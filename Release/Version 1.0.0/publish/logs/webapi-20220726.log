[2022-07-26 08:36:40.416 +05:30 INF] User profile not available. Using 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\S-1-5-82-1361998291-1551570530-77267900-3141186879-3841397018\DataProtection' as key repository and Windows DPAPI to encrypt keys at rest.
[2022-07-26 08:36:40.493 +05:30 INF] Application started. Press Ctrl+C to shut down.
[2022-07-26 08:36:40.493 +05:30 INF] Hosting environment: Production
[2022-07-26 08:36:40.493 +05:30 INF] Content root path: C:\Local\publish\
[2022-07-26 08:36:40.517 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 08:36:40.543 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:36:40.551 +05:30 WRN] Failed to determine the https port for redirect.
[2022-07-26 08:36:41.443 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-26 08:36:41.449 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 08:36:41.452 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 08:36:41.466 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 08:36:41.617 +05:30 INF] RequestBody: {"emailId":"tommy@aspiresys.com","password":"Pass@12345"}
[2022-07-26 08:36:42.263 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:36:42.721 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:36:42.738 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:36:42.742 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:36:42.745 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:36:42.821 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 08:36:42.888 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :1178ms
[2022-07-26 08:36:42.889 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :1178ms
[2022-07-26 08:36:42.945 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :1243ms
[2022-07-26 08:36:42.946 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 08:36:42.969 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 880
[2022-07-26 08:36:42.978 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 1508.9646ms
[2022-07-26 08:36:42.978 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 08:36:42.978 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..n97rPFNrsSTOytkjIVpfeQ.2BkH4IheE2p7eoOtmmVTyBSNStiDTMGH8bZsjThNOQaaK35X9bAhTl4IWJEcPnnBEjyINrsLkrzwmDuTLQN7VbD6V1vE-iLy68sf7_mEFSEZm2FZoj7Hy1C6rkgD8505PS5IWusPt401YgQUxREB_FdgyDSnJS6JkUq13E_gW6WQCtgrFhFBcJghvM1GWWNmHe5ZhhEhm8oP6eqWm7K79aWb92A1ujCAxC1YYGBV36WI0fIU7RrsHlHLaq_M9iXUlHJM-N5eEf9UzlrKmj4i-Naug4saV5w_D1iX4RtJ21CdFNgalVZQwa8EF_wpLN8HdLmmZfjuBlMCXdfOG42Rp3u4U2wp0PRR5aMct22M4tB_06mhq4YZ4FtfJb2z7K0c4ccrIkt5NLszjxJuvglxXrQ02sJt2ycHZEAh3TAObzCAomQzHl7fwRO-mIunolHGmoKPjOJxtAXsdtg9H70SPlsm0z7XZICa2RnFdcheHLMXbHZNdCMB4gYbB4nkj0G3yDnZamkqeeVanVIIk-v71_w-RrxDVKyM_5Lp-N-a52L7-2bzFh1DovrV11Hom72rM40TxU2BHUn-JciOOmAAJIRhTAEdlpLAtM7sVzI5ACM.Af2OtrJrJS1qOskKmloiL5OLauqwueyHwknBLhc8ckY","expiryInMinutes":360,"userHash":"a378b5658dbdcaf167e945242572bd3339f540af202acf0ab70741e411d861b7","userName":"Tom"}
[2022-07-26 08:36:42.981 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 880 application/json;+charset=utf-8 2466.1863ms
[2022-07-26 08:37:27.798 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 08:37:27.800 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:37:27.801 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-26 08:37:27.801 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 08:37:27.801 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 08:37:27.801 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 08:37:27.802 +05:30 INF] RequestBody: {"emailId":"arnold@aspiresys.com","password":"Pass@12345"}
[2022-07-26 08:37:27.803 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:37:27.806 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:37:27.808 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:37:27.810 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:37:27.811 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:37:27.815 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 08:37:27.816 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :13ms
[2022-07-26 08:37:27.816 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :13ms
[2022-07-26 08:37:27.817 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :14ms
[2022-07-26 08:37:27.817 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 08:37:27.817 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 883
[2022-07-26 08:37:27.817 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 16.152ms
[2022-07-26 08:37:27.817 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 08:37:27.817 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..2oR4PqBe8YrTudUoJd4F_g.Qie8aghZwujB4tgGVSfroRIGCuMIk1z8X2baHVKMN7Q2Qvs-_xtNuprwNLShGDz-GQy6D5PADeFhesHzkuYc8e-qteGOCr31Nah7n0Mq_HWn4DgMW4hobj63T6mIZAQntmbTx75aIIk4OWUm48TixxHtExWEhtGV_U8x60wNpI2WU92kL39jY5LpU_ARTAgKZT9q5nO88K8elPz9Vb2cT4EheK3ljVwlwFBXu_tPV64cWVOPIcyvyHYjSNexY5hZM_4YkpWWYPKGzoc9hM3zA0zClXOFIvW8snui1FXzcX5RC2bV2eIiKwUXBtokhmbfhCk2pFZnYWamIFbDtHa7NLLOniuaiYd8XEN3wO02DDegKrS9-Iv9IIUaBWO70RTvjR-lrTOs9Jy8gUI8UyWouo2ZU2wbExMG-VnfdHLMHgLY0ON2E7sAVrSCcF8tcnSwzUpvavC-Iu_46QWSxAyYIioYshwOxR3GMJPxhFOlqRqpOlBEiqipzHol-4HXBn0GwOjndyWUupq-pF9XhlbXLwO5MVcrb-sU8qJgfVZPcDPkSjB0A7407HzpPQTpppeMvqqDqGDWxlifHjEy58YNrbe9QtYlV7sFlZK-XZqL75I.m3IRyalSTe5Dgq1eJGib0vbRQ3eJGZ1gZX8HKp6RRDs","expiryInMinutes":360,"userHash":"3fc90e88bbe900077c96b0253ce7d279ac5646ac5d8335dea8ea9e4f98c6c582","userName":"Arnold"}
[2022-07-26 08:37:27.818 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 883 application/json;+charset=utf-8 19.3840ms
[2022-07-26 08:37:31.810 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeProfile application/json -
[2022-07-26 08:37:31.853 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeProfile
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
[2022-07-26 08:37:31.853 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source)'
[2022-07-26 08:37:31.854 +05:30 INF] Route matched with {action = "ViewEmployeeProfile", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeProfile() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 08:37:31.888 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:37:31.948 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[EmployeeId], [t].[DepartmentId], [t].[EmailId], [t].[EmployeeAceNumber], [t].[IsActive], [t].[IsAdminAccepted], [t].[IsAdminResponded], [t].[Name], [t].[Password], [t].[ProjectId], [t].[RoleId], [t].[ProjectId0], [t].[DepartmentId0], [t].[IsActive0], [t].[ProjectName], [t].[DepartmentId1], [t].[AddedBy], [t].[AddedOn], [t].[DepartmentName], [t].[IsActive1], [t].[UpdatedBy], [t].[UpdatedOn], [t].[RoleId0], [p0].[PoolMembersId], [p0].[EmployeeId], [p0].[IsActive], [p0].[PoolId], [t].[AddedBy0], [t].[AddedOn0], [t].[IsActive2], [t].[IsManagement], [t].[RoleName], [t].[UpdatedBy0], [t].[UpdatedOn0]
FROM (
    SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p].[ProjectId] AS [ProjectId0], [p].[DepartmentId] AS [DepartmentId0], [p].[IsActive] AS [IsActive0], [p].[ProjectName], [d].[DepartmentId] AS [DepartmentId1], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive] AS [IsActive1], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId] AS [RoleId0], [r].[AddedBy] AS [AddedBy0], [r].[AddedOn] AS [AddedOn0], [r].[IsActive] AS [IsActive2], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy] AS [UpdatedBy0], [r].[UpdatedOn] AS [UpdatedOn0]
    FROM [Employees] AS [e]
    INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
    INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
    INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
    WHERE [e].[EmployeeId] = @__employeeId_0
) AS [t]
LEFT JOIN [PoolMembers] AS [p0] ON [t].[EmployeeId] = [p0].[EmployeeId]
ORDER BY [t].[EmployeeId], [t].[ProjectId0], [t].[DepartmentId1], [t].[RoleId0]
[2022-07-26 08:37:31.955 +05:30 INF] Employee DAL Time elapsed for  ViewProfile(int employeeId)  :97ms
[2022-07-26 08:37:31.955 +05:30 INF] Employee Service Time elapsed for  ViewProfile(int employeeId) :98ms
[2022-07-26 08:37:31.955 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType41`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 08:37:31.957 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 208
[2022-07-26 08:37:31.957 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source) in 102.9698ms
[2022-07-26 08:37:31.957 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source)'
[2022-07-26 08:37:31.957 +05:30 INF] RequestBody: 
[2022-07-26 08:37:31.957 +05:30 INF] ResponseBody: {"employeeACEId":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeProject":"Interview_Management_NET","employeeRole":"Senior Software Developer","employeeEmailID":"arnold@aspiresys.com"}
[2022-07-26 08:37:31.957 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeProfile application/json - - 200 208 application/json;+charset=utf-8 147.3309ms
[2022-07-26 08:37:40.853 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 08:37:40.853 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:37:40.855 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 08:37:40.855 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 08:37:40.857 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:37:40.858 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 08:37:40.863 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:37:40.897 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:37:40.932 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :69ms
[2022-07-26 08:37:40.934 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:37:40.934 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :70ms
[2022-07-26 08:37:40.934 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:37:40.935 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :71ms
[2022-07-26 08:37:40.954 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 08:37:40.961 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :97ms
[2022-07-26 08:37:40.962 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 08:37:40.963 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :98ms
[2022-07-26 08:37:40.973 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 08:37:40.973 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :108ms
[2022-07-26 08:37:40.973 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :111ms
[2022-07-26 08:37:40.973 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 08:37:40.977 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 08:37:40.977 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 120.2344ms
[2022-07-26 08:37:40.977 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 08:37:40.977 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 08:37:40.977 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 124.5705ms
[2022-07-26 08:38:08.553 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19
[2022-07-26 08:38:08.560 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:38:08.561 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 08:38:08.561 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 08:38:08.562 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:38:08.563 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 08:38:08.565 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:08.577 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:38:08.579 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :14ms
[2022-07-26 08:38:08.580 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:38:08.580 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :15ms
[2022-07-26 08:38:08.580 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :16ms
[2022-07-26 08:38:08.580 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 08:38:08.580 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 08:38:08.580 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 18.3893ms
[2022-07-26 08:38:08.580 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 08:38:08.580 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 08:38:08.580 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19 - 200 42 application/json;+charset=utf-8 27.3409ms
[2022-07-26 08:38:10.492 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 19
[2022-07-26 08:38:10.492 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:38:10.493 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewNonCancelledDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 08:38:10.493 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 08:38:10.494 +05:30 INF] Route matched with {action = "ViewNonCancelledDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewNonCancelledDrives(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:38:10.494 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 08:38:10.496 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:10.497 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 08:38:10.497 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:10.497 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :2ms
[2022-07-26 08:38:10.498 +05:30 INF] Drive Service Time elapsed for  ViewNonCancelledDrives(int tacId) :2ms
[2022-07-26 08:38:10.498 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:10.498 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:10.498 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:10.499 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:10.499 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:10.499 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:10.499 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:10.500 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:10.501 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:10.502 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:10.505 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1876
[2022-07-26 08:38:10.506 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewNonCancelledDrives (Source) in 11.9016ms
[2022-07-26 08:38:10.506 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 08:38:10.506 +05:30 INF] ResponseBody: [{"driveId":42,"driveName":"Fresher NET","fromDate":"2022-07-12","toDate":"2022-07-13","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Freshers .NET","driveMode":"Offline"},{"driveId":44,"driveName":"Fresher Oracle","fromDate":"2022-07-10","toDate":"2022-07-12","driveDepartment":"ORACLE","driveLocation":"Chennai","drivePool":"Fresher ORACLE","driveMode":"Offline"},{"driveId":45,"driveName":"Testing Team","fromDate":"2022-07-12","toDate":"2022-07-13","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":46,"driveName":"Architect NET","fromDate":"2022-07-12","toDate":"2022-07-12","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":47,"driveName":"Freshers 2020","fromDate":"2022-07-14","toDate":"2022-07-15","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":60,"driveName":"Docker Drive","fromDate":"2022-07-01","toDate":"2022-07-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco Minor NET","driveMode":"Offline"},{"driveId":61,"driveName":"Angular Drive","fromDate":"2022-07-06","toDate":"2022-07-07","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor NET","driveMode":"Online"},{"driveId":62,"driveName":"Devops Drive","fromDate":"2022-07-03","toDate":"2022-07-05","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":63,"driveName":"Aries Drive","fromDate":"2022-07-22","toDate":"2022-07-25","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":64,"driveName":"Hydra Drive","fromDate":"2022-07-10","toDate":"2022-07-16","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"}]
[2022-07-26 08:38:10.506 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 19 - 200 1876 application/json;+charset=utf-8 13.6931ms
[2022-07-26 08:38:10.516 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:10.516 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :15ms
[2022-07-26 08:38:10.517 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :16ms
[2022-07-26 08:38:10.517 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:10.517 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:10.517 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :15ms
[2022-07-26 08:38:10.517 +05:30 INF] Pool Service Time elapsed for  ViewPools() :16ms
[2022-07-26 08:38:10.517 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:10.520 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:10.520 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 20.2527ms
[2022-07-26 08:38:10.520 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:10.520 +05:30 INF] RequestBody: 
[2022-07-26 08:38:10.520 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:10.520 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 21.6927ms
[2022-07-26 08:38:10.524 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:10.524 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 25.4807ms
[2022-07-26 08:38:10.524 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:10.524 +05:30 INF] RequestBody: 
[2022-07-26 08:38:10.524 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:10.525 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 27.6342ms
[2022-07-26 08:38:18.349 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:18.349 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:18.353 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:18.353 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:18.353 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:18.353 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:18.353 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:18.353 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:18.354 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:18.354 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:18.356 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:18.356 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:18.356 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 08:38:18.356 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 08:38:18.356 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-26 08:38:18.356 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-26 08:38:18.356 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:18.356 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:18.357 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:18.357 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:18.357 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.0543ms
[2022-07-26 08:38:18.357 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:18.357 +05:30 INF] RequestBody: 
[2022-07-26 08:38:18.357 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.0826ms
[2022-07-26 08:38:18.357 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:18.357 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:18.357 +05:30 INF] RequestBody: 
[2022-07-26 08:38:18.357 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:18.357 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 9.0371ms
[2022-07-26 08:38:18.357 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 9.0371ms
[2022-07-26 08:38:26.635 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/RemovePool?poolId=26 application/json 0
[2022-07-26 08:38:26.635 +05:30 INF] CORS policy execution successful.
[2022-07-26 08:38:26.636 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/RemovePool
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 08:38:26.636 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.RemovePool (Source)'
[2022-07-26 08:38:26.639 +05:30 INF] Route matched with {action = "RemovePool", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemovePool(Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:26.645 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:26.648 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:38:26.651 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE ([d].[PoolId] = @__poolId_0) AND ([d].[ToDate] >= GETDATE())) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 08:38:26.651 +05:30 INF] Pool DAL Time elapsed for hasActiveDrives(int poolId)  :7ms
[2022-07-26 08:38:26.654 +05:30 ERR] Pool service : RemovePool(int poolId): Pool contains active drives.
[2022-07-26 08:38:26.654 +05:30 INF] Pool Service Time elapsed for  RemovePool(int poolId) :9ms
[2022-07-26 08:38:26.654 +05:30 ERR] Pool Service : RemovePool(int poolId) : Pool contains active drives.
[2022-07-26 08:38:26.654 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-26 08:38:26.654 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-26 08:38:26.655 +05:30 INF] Executed action IMS.Controllers.PoolController.RemovePool (Source) in 15.9715ms
[2022-07-26 08:38:26.655 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.RemovePool (Source)'
[2022-07-26 08:38:26.655 +05:30 INF] RequestBody: 
[2022-07-26 08:38:26.655 +05:30 INF] ResponseBody: Pool contains active drives.
[2022-07-26 08:38:26.655 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/RemovePool?poolId=26 application/json 0 - 400 - text/plain;+charset=utf-8 20.1802ms
[2022-07-26 08:38:32.811 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:32.811 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:32.811 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json -
[2022-07-26 08:38:32.811 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Location/ViewLocations
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:32.811 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:32.811 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:32.812 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:32.812 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:32.812 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 08:38:32.812 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:32.812 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:32.812 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:32.812 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:32.812 +05:30 INF] Route matched with {action = "ViewLocations", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLocations() on controller IMS.Controllers.LocationController (Source).
[2022-07-26 08:38:32.814 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:32.814 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:32.814 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 08:38:32.814 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 08:38:32.814 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:32.814 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:32.815 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:32.815 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-26 08:38:32.815 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-26 08:38:32.815 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:32.815 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:32.815 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.1715ms
[2022-07-26 08:38:32.815 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:32.815 +05:30 INF] RequestBody: 
[2022-07-26 08:38:32.815 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:32.815 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 3.2189ms
[2022-07-26 08:38:32.815 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:32.815 +05:30 INF] RequestBody: 
[2022-07-26 08:38:32.815 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:32.815 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 4.1848ms
[2022-07-26 08:38:32.815 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 4.1077ms
[2022-07-26 08:38:32.828 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [Locations] AS [l]
WHERE [l].[IsActive] = CAST(1 AS bit)
ORDER BY [l].[LocationName]
[2022-07-26 08:38:32.828 +05:30 INF] Location DAL Time elapsed for  GetLocationsFromDatabase() :14ms
[2022-07-26 08:38:32.828 +05:30 INF] Location Service Time elapsed for  ViewLocations() :15ms
[2022-07-26 08:38:32.828 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Location, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:32.830 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1180
[2022-07-26 08:38:32.831 +05:30 INF] Executed action IMS.Controllers.LocationController.ViewLocations (Source) in 18.164ms
[2022-07-26 08:38:32.831 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 08:38:32.831 +05:30 INF] RequestBody: 
[2022-07-26 08:38:32.831 +05:30 INF] ResponseBody: [{"locationId":2,"locationName":"Bangalore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":1,"locationName":"Chennai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":8,"locationName":"Coimbatore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":4,"locationName":"Dubai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":6,"locationName":"Hyderabad","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":7,"locationName":"Kochin","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":3,"locationName":"London","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":22,"locationName":"Online","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]}]
[2022-07-26 08:38:32.831 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json - - 200 1180 application/json;+charset=utf-8 19.5405ms
[2022-07-26 08:38:38.231 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewTodayDrives application/json -
[2022-07-26 08:38:38.232 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewTodayDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:38.232 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewTodayDrives (Source)'
[2022-07-26 08:38:38.233 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:38.233 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:38.233 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:38.233 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:38.233 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:38.234 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:38.234 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:38.234 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:38.234 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:38.234 +05:30 INF] Route matched with {action = "ViewTodayDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewTodayDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:38:38.235 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:38.236 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:38.236 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 08:38:38.236 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 08:38:38.236 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:38.236 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:38.236 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:38.236 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :1ms
[2022-07-26 08:38:38.236 +05:30 INF] Pool Service Time elapsed for  ViewPools() :1ms
[2022-07-26 08:38:38.236 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:38.236 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:38.236 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 2.7718ms
[2022-07-26 08:38:38.236 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:38.236 +05:30 INF] RequestBody: 
[2022-07-26 08:38:38.236 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:38.236 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 2.5113ms
[2022-07-26 08:38:38.236 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:38.236 +05:30 INF] RequestBody: 
[2022-07-26 08:38:38.236 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 3.8110ms
[2022-07-26 08:38:38.236 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:38.237 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 3.8788ms
[2022-07-26 08:38:38.237 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:38.256 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ((CONVERT(date, [d].[FromDate]) <= CONVERT(date, GETDATE())) AND (CONVERT(date, [d].[ToDate]) >= CONVERT(date, GETDATE())))) AND ([d].[IsScheduled] = CAST(1 AS bit))
[2022-07-26 08:38:38.256 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :19ms
[2022-07-26 08:38:38.256 +05:30 INF] Drive Service Time elapsed for  ViewTodayDrives() :20ms
[2022-07-26 08:38:38.256 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:38.256 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-26 08:38:38.256 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewTodayDrives (Source) in 21.9088ms
[2022-07-26 08:38:38.256 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewTodayDrives (Source)'
[2022-07-26 08:38:38.256 +05:30 INF] RequestBody: 
[2022-07-26 08:38:38.256 +05:30 INF] ResponseBody: []
[2022-07-26 08:38:38.256 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewTodayDrives application/json - - 200 2 application/json;+charset=utf-8 25.0277ms
[2022-07-26 08:38:41.254 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledDrives application/json -
[2022-07-26 08:38:41.255 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:41.255 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewScheduledDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:41.255 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewScheduledDrives (Source)'
[2022-07-26 08:38:41.256 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:41.256 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:41.256 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:41.257 +05:30 INF] Route matched with {action = "ViewScheduledDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewScheduledDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:38:41.257 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:41.258 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:41.258 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :1ms
[2022-07-26 08:38:41.258 +05:30 INF] Pool Service Time elapsed for  ViewPools() :1ms
[2022-07-26 08:38:41.258 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:41.258 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:41.259 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 2.8739ms
[2022-07-26 08:38:41.259 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:41.259 +05:30 INF] RequestBody: 
[2022-07-26 08:38:41.259 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:41.259 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:41.259 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 4.0728ms
[2022-07-26 08:38:41.259 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:41.260 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:41.260 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:41.260 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:41.260 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:41.261 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:41.261 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :1ms
[2022-07-26 08:38:41.261 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :1ms
[2022-07-26 08:38:41.261 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:41.261 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:41.262 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 1.7662ms
[2022-07-26 08:38:41.262 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:41.262 +05:30 INF] RequestBody: 
[2022-07-26 08:38:41.262 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:41.262 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 2.3817ms
[2022-07-26 08:38:41.278 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND (CONVERT(date, [d].[FromDate]) > CONVERT(date, GETDATE()))) AND ([d].[IsScheduled] = CAST(1 AS bit))
[2022-07-26 08:38:41.279 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :20ms
[2022-07-26 08:38:41.279 +05:30 INF] Drive Service Time elapsed for  ViewScheduledDrives() :21ms
[2022-07-26 08:38:41.279 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:41.279 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 555
[2022-07-26 08:38:41.279 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewScheduledDrives (Source) in 22.6479ms
[2022-07-26 08:38:41.279 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewScheduledDrives (Source)'
[2022-07-26 08:38:41.279 +05:30 INF] RequestBody: 
[2022-07-26 08:38:41.279 +05:30 INF] ResponseBody: [{"driveId":53,"driveName":"Harvard","fromDate":"2022-07-28","toDate":"2022-07-29","driveDepartment":"ORACLE","driveLocation":"Chennai","drivePool":"Phoenix oracle","driveMode":"Offline"},{"driveId":54,"driveName":"Cloud Developer","fromDate":"2022-07-28","toDate":"2022-07-29","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":59,"driveName":"Hydra Net","fromDate":"2022-08-01","toDate":"2022-08-04","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"}]
[2022-07-26 08:38:41.279 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledDrives application/json - - 200 555 application/json;+charset=utf-8 25.2989ms
[2022-07-26 08:38:44.555 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 08:38:44.555 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 08:38:44.555 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json -
[2022-07-26 08:38:44.556 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:44.556 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:44.556 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 08:38:44.556 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:44.556 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:44.556 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 08:38:44.556 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 08:38:44.556 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 08:38:44.558 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:44.558 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:44.558 +05:30 INF] Route matched with {action = "ViewUpcomingDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 08:38:44.559 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 08:38:44.559 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 08:38:44.560 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :3ms
[2022-07-26 08:38:44.560 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-26 08:38:44.560 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-26 08:38:44.560 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-26 08:38:44.560 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:44.560 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:44.560 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 08:38:44.560 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 08:38:44.561 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.042ms
[2022-07-26 08:38:44.561 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.0148ms
[2022-07-26 08:38:44.561 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 08:38:44.561 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 08:38:44.561 +05:30 INF] RequestBody: 
[2022-07-26 08:38:44.561 +05:30 INF] RequestBody: 
[2022-07-26 08:38:44.561 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 08:38:44.561 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 08:38:44.561 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 5.6868ms
[2022-07-26 08:38:44.561 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5.6847ms
[2022-07-26 08:38:44.561 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 08:38:44.572 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND (CONVERT(date, [d].[FromDate]) <> CONVERT(date, GETDATE()))) AND ([d].[IsScheduled] = CAST(0 AS bit))
[2022-07-26 08:38:44.573 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :11ms
[2022-07-26 08:38:44.573 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingDrives() :12ms
[2022-07-26 08:38:44.573 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 08:38:44.573 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2258
[2022-07-26 08:38:44.573 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingDrives (Source) in 15.0281ms
[2022-07-26 08:38:44.574 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 08:38:44.574 +05:30 INF] RequestBody: 
[2022-07-26 08:38:44.574 +05:30 INF] ResponseBody: [{"driveId":49,"driveName":"WaterLoo Freshers","fromDate":"2022-07-30","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":51,"driveName":"Stanford University","fromDate":"2022-07-28","toDate":"2022-07-28","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":52,"driveName":"MIT Freshers","fromDate":"2022-08-08","toDate":"2022-08-10","driveDepartment":"BFS","driveLocation":"Online","drivePool":"Caleum BFS","driveMode":"Online"},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":56,"driveName":"DevOps ","fromDate":"2022-08-10","toDate":"2022-08-15","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":58,"driveName":"Scrum Master ","fromDate":"2022-08-01","toDate":"2022-08-07","driveDepartment":".NET","driveLocation":"Hyderabad","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveDepartment":".NET","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":68,"driveName":"Draco drive .NET","fromDate":"2022-08-01","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":69,"driveName":"Capella Drive","fromDate":"2022-08-12","toDate":"2022-08-27","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":70,"driveName":"PSNA java","fromDate":"2022-08-01","toDate":"2022-08-17","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"}]
[2022-07-26 08:38:44.574 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json - - 200 2258 application/json;+charset=utf-8 18.1984ms
[2022-07-26 09:04:20.380 +05:30 INF] Application is shutting down...
[2022-07-26 09:14:16.307 +05:30 INF] User profile not available. Using 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\S-1-5-82-1361998291-1551570530-77267900-3141186879-3841397018\DataProtection' as key repository and Windows DPAPI to encrypt keys at rest.
[2022-07-26 09:14:16.583 +05:30 INF] Application started. Press Ctrl+C to shut down.
[2022-07-26 09:14:16.583 +05:30 INF] Hosting environment: Production
[2022-07-26 09:14:16.583 +05:30 INF] Content root path: C:\Local\publish\
[2022-07-26 09:14:16.634 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:14:16.740 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:14:16.773 +05:30 WRN] Failed to determine the https port for redirect.
[2022-07-26 09:14:16.904 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-26 09:14:16.922 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:14:16.930 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:14:16.996 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:14:17.421 +05:30 INF] RequestBody: {"emailId":"admin@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:14:20.266 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:21.520 +05:30 INF] Executed DbCommand (55ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:21.567 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:21.574 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:21.580 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:21.803 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:14:22.112 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :4371ms
[2022-07-26 09:14:22.113 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :4371ms
[2022-07-26 09:14:22.393 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :4659ms
[2022-07-26 09:14:22.399 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:14:22.500 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 882
[2022-07-26 09:14:22.539 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 5527.9419ms
[2022-07-26 09:14:22.539 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:14:22.540 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..7DoqsP_-lLh3igxEa4JSYw.PjHywEbhYtkmX0dDxWHenmlOg2QZKl9PhSCb2ebEb0EQwOjgUf_m3eYvWbLOZRWB6TJy4FRZ9-1TVeo5JHAMojf06PhcMByPSoNjLzSDkIBuJVrHDZDlmUqVcjsrlKRTOPPxfqHNSRVdreVMh3CuXVSj26_BxHCQlQvMA3B17Rp6YGQTbQuDBpetatYkc8mOhKYATnvs6SJELIZJ9kgLs-ErhSmpen-63xL8GDi1p9SyRK36BD7nnV2tdNHDupYkpyU_n6C3Mt7nEbd-w9d-bPxCeD49BmbH6bTtbHNmslRI4gQQaWthcSWWh-nyu2bSTsDd7R3g9yfrmJBDLHEYvXXYaH1V8Kt_IvZ83NfebpERlTgZA8X_irkwmhxYmiYY3PHi01MRGr8iazS87rRk-k_2Q049uIXiYrGZVzgvm5Gz7VB-IFfs8e0nAv-lctrwKRpnK27eEA8zFW3tSWvmevzU-GyEc8PEq3phAp6t-UL5bgNCHry3GPScBiYfxBJLhehJ5amNdC_0LcMAJ4wJGmKTeG161_MtNmr3klc95hN7IOWRvB7ZP1HdU1KQoD__iB1p3YT7IzepbPxRlOCPYTia2WiihzjNnwMcswOI5Rk.qUWrxmrvBpFsqk4Y3oE2AA0J0d45lNouP7VyEiAvYoc","expiryInMinutes":360,"userHash":"6e93e549b7140ec74ade7f56aff807f19b7dec5fea37e57902e91286f3b27d64","userName":"Admin"}
[2022-07-26 09:14:22.551 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 882 application/json;+charset=utf-8 5927.7354ms
[2022-07-26 09:14:22.672 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json -
[2022-07-26 09:14:22.872 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:14:22.873 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:14:22.886 +05:30 INF] Route matched with {action = "ViewEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeRequest() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:14:22.902 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:22.942 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE (([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))
[2022-07-26 09:14:22.943 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesRequestFromDatabase()  :43ms
[2022-07-26 09:14:22.944 +05:30 INF] Employee Service Time elapsed for  ViewEmployeeRequest() :46ms
[2022-07-26 09:14:22.945 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType42`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:14:22.967 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 267
[2022-07-26 09:14:22.968 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source) in 82.3927ms
[2022-07-26 09:14:22.969 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:14:22.969 +05:30 INF] RequestBody: 
[2022-07-26 09:14:22.969 +05:30 INF] ResponseBody: [{"employeeId":75,"employeeAceNumber":"ACE00091","employeeName":"lawrence","employeeDepartment":"LAMP","employeeRole":"Project Manager"},{"employeeId":77,"employeeAceNumber":"ACE00987","employeeName":"Albert","employeeDepartment":"LAMP","employeeRole":"Module Lead"}]
[2022-07-26 09:14:22.969 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json - - 200 267 application/json;+charset=utf-8 297.2490ms
[2022-07-26 09:14:42.297 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 09:14:42.299 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:14:42.307 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:14:42.307 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:14:42.308 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:14:42.310 +05:30 INF] RequestBody: {"emailId":"arnold@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:14:42.445 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:42.455 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:42.461 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:42.467 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:42.481 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:14:42.487 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:14:42.490 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :178ms
[2022-07-26 09:14:42.490 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :178ms
[2022-07-26 09:14:42.490 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :179ms
[2022-07-26 09:14:42.491 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:14:42.491 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 883
[2022-07-26 09:14:42.491 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 183.2352ms
[2022-07-26 09:14:42.491 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:14:42.491 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..7YyDOBhg4GOT4l_v5grzoQ.U4PPJ0riOp39vL6UBCG3sRKiq8qF7PzO3KziNadIkn9Xowvz53wb0nN0Z5yGCRj9qukicsHygZevSwMTjhLShTonlzNZFk8gqo_9UEjhEi56q7KuxMYj2JPf6XxtSCVWVrubi_bN5L-KQqn4v7_Uw1QanFi4VpXbMSEQ6CC3hfdB4OEx5DBeMIadZm7mXQjIocmWlFRaCr8x62wl8o4bOgZGzqIsDnzJ0bIMsR8o-YVbNaVBWLoVb-jyIDgYtFkdiZS2Ha-ytEgZ8RgPpK_NJ9SFbiHTspbfd3xisy445p3V8s2yZPOjG-eTWgq32sJti5C1S_eqqmxsh6aoaXI-QJ04Tx8UMkwHPP85MyPaCk2-mEAbS5thGILN9CUGUn302xAtGdF2wvCwQDCDbDuvOreJvJj8McZ7oBv3Fc7GICfWydYAJ2Bpt230L-u_RaauhtCqq4_vnl3obey6iiPffqYQmnwrK3gPtTuuMELC9xy3c-j_oLo85sETCu4rRJZszoXsyTNklLyvSDmzhF4rR5CpOWZpUwUu-Bdpfm5opO5J9e7HeYOBj1TOmScNuJLvZGz9k5T2xgPKdmJABtEoyEOMqE80at1XKcJbqwkWDt8.0r0Jmx1tMA-KYctlDFJtaR--RnHVExvmQgsfZB2B8sI","expiryInMinutes":360,"userHash":"3fc90e88bbe900077c96b0253ce7d279ac5646ac5d8335dea8ea9e4f98c6c582","userName":"Arnold"}
[2022-07-26 09:14:42.491 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 883 application/json;+charset=utf-8 194.6174ms
[2022-07-26 09:14:44.224 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 09:14:44.225 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:14:44.227 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:14:44.227 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:14:44.230 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:14:44.243 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 09:14:44.260 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:44.368 +05:30 INF] Executed DbCommand (31ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:44.483 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :225ms
[2022-07-26 09:14:44.496 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:44.496 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :227ms
[2022-07-26 09:14:44.497 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:44.498 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :229ms
[2022-07-26 09:14:44.609 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:44.648 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :376ms
[2022-07-26 09:14:44.650 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:44.650 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :379ms
[2022-07-26 09:14:44.681 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:44.681 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :409ms
[2022-07-26 09:14:44.682 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :427ms
[2022-07-26 09:14:44.682 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:14:44.689 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 09:14:44.689 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 458.8073ms
[2022-07-26 09:14:44.689 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:14:44.689 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 09:14:44.690 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 465.4069ms
[2022-07-26 09:14:50.439 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewTotalAvailability application/json 19
[2022-07-26 09:14:50.439 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:14:50.442 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:14:50.443 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:14:50.445 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:14:50.456 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:50.463 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:14:50.464 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewTotalAvailability
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:14:50.464 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewTotalAvailability (Source)'
[2022-07-26 09:14:50.467 +05:30 INF] Route matched with {action = "ViewTotalAvailability", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewTotalAvailability(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:14:50.467 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 09:14:50.472 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:50.476 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:50.476 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-26 09:14:50.478 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:50.478 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :6ms
[2022-07-26 09:14:50.480 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:50.480 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :8ms
[2022-07-26 09:14:50.480 +05:30 INF] Drive Service Time elapsed for  ViewTotalAvailability(int employeeId) :8ms
[2022-07-26 09:14:50.481 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectEnumerableIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType36`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.TimeSpan, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.TimeSpan, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:14:50.492 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2511
[2022-07-26 09:14:50.492 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewTotalAvailability (Source) in 25.4694ms
[2022-07-26 09:14:50.492 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewTotalAvailability (Source)'
[2022-07-26 09:14:50.492 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":72,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-01","fromTime":"14:30:00","toTime":"15:00:00","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":73,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-01","fromTime":"15:45:00","toTime":"16:15:00","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":69,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-01","fromTime":"10:30:00","toTime":"11:00:00","mode":"Offline","locationName":"Chennai","status":true},{"employeeAvailabilityId":70,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-02","fromTime":"11:30:00","toTime":"12:00:00","mode":"Offline","locationName":"Chennai","status":true},{"employeeAvailabilityId":75,"driveName":"Angular Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-07","fromTime":"18:00:00","toTime":"18:30:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":76,"driveName":"Angular Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-06","fromTime":"08:00:00","toTime":"08:30:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":77,"driveName":"Angular Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-06","fromTime":"11:00:00","toTime":"11:30:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":78,"driveName":"Aries Drive","poolName":"Draco NET","interviewDate":"2022-07-22","fromTime":"12:50:00","toTime":"13:50:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":79,"driveName":"Aries Drive","poolName":"Draco NET","interviewDate":"2022-07-22","fromTime":"14:00:00","toTime":"15:00:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":80,"driveName":"Aries Drive","poolName":"Draco NET","interviewDate":"2022-07-22","fromTime":"07:30:00","toTime":"08:30:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":81,"driveName":"Aries Drive","poolName":"Draco NET","interviewDate":"2022-07-24","fromTime":"09:00:00","toTime":"10:00:00","mode":"Online","locationName":"Online","status":true},{"employeeAvailabilityId":82,"driveName":"Aries Drive","poolName":"Draco NET","interviewDate":"2022-07-24","fromTime":"17:00:00","toTime":"18:00:00","mode":"Online","locationName":"Online","status":true}]
[2022-07-26 09:14:50.493 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewTotalAvailability application/json 19 - 200 2511 application/json;+charset=utf-8 53.6593ms
[2022-07-26 09:14:50.508 +05:30 INF] Executed DbCommand (19ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:14:50.517 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :62ms
[2022-07-26 09:14:50.518 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :65ms
[2022-07-26 09:14:50.518 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:14:50.521 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 119
[2022-07-26 09:14:50.521 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 76.0865ms
[2022-07-26 09:14:50.521 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:14:50.521 +05:30 INF] RequestBody: 
[2022-07-26 09:14:50.521 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32}]
[2022-07-26 09:14:50.522 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 119 application/json;+charset=utf-8 82.1520ms
[2022-07-26 09:14:54.155 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 09:14:54.155 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:14:54.156 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:14:54.157 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:14:54.157 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:14:54.159 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 09:14:54.160 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:14:54.162 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:54.162 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :3ms
[2022-07-26 09:14:54.164 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:54.164 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :5ms
[2022-07-26 09:14:54.165 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:14:54.166 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :6ms
[2022-07-26 09:14:54.167 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:54.168 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :8ms
[2022-07-26 09:14:54.169 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:54.170 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :10ms
[2022-07-26 09:14:54.171 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:14:54.171 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :12ms
[2022-07-26 09:14:54.171 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :12ms
[2022-07-26 09:14:54.171 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:14:54.172 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 09:14:54.172 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 15.2773ms
[2022-07-26 09:14:54.172 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:14:54.172 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 09:14:54.172 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 17.5540ms
[2022-07-26 09:15:02.579 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39
[2022-07-26 09:15:02.579 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:15:02.581 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:15:02.581 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:15:02.581 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:15:02.582 +05:30 INF] RequestBody: {"From":"2022-07-01","To":"2022-07-01"}
[2022-07-26 09:15:02.583 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:15:02.585 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:02.585 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :3ms
[2022-07-26 09:15:02.586 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:02.586 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-26 09:15:02.587 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:02.587 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :5ms
[2022-07-26 09:15:02.612 +05:30 INF] Executed DbCommand (24ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 60)
[2022-07-26 09:15:02.613 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :30ms
[2022-07-26 09:15:02.615 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 60)
[2022-07-26 09:15:02.615 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :32ms
[2022-07-26 09:15:02.631 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 60)
[2022-07-26 09:15:02.631 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :49ms
[2022-07-26 09:15:02.631 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :49ms
[2022-07-26 09:15:02.632 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:15:02.632 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-26 09:15:02.632 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 51.0863ms
[2022-07-26 09:15:02.632 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:15:02.632 +05:30 INF] ResponseBody: {"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":1,"UtilizedInterviews":2,"NotUtilizedInterviews":2,"CancelledInterview":1,"SlotAvailabiltyGiven":5,"TotalAvailability":5}
[2022-07-26 09:15:02.632 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39 - 200 190 application/json;+charset=utf-8 53.6231ms
[2022-07-26 09:15:05.069 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewCancelledInterview application/json 39
[2022-07-26 09:15:05.069 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:15:05.070 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewCancelledInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:15:05.070 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewCancelledInterview (Source)'
[2022-07-26 09:15:05.073 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:15:05.073 +05:30 INF] Route matched with {action = "ViewCancelledInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewCancelledInterview(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:15:05.074 +05:30 INF] RequestBody: {"From":"2022-07-01","To":"2022-07-01"}
[2022-07-26 09:15:05.079 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:15:05.080 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:15:05.081 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:15:05.081 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:15:05.082 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:05.082 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:15:05.082 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-26 09:15:05.083 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:15:05.084 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :2ms
[2022-07-26 09:15:05.084 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :2ms
[2022-07-26 09:15:05.084 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:15:05.084 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 119
[2022-07-26 09:15:05.084 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 3.5942ms
[2022-07-26 09:15:05.084 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:15:05.084 +05:30 INF] RequestBody: 
[2022-07-26 09:15:05.085 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32}]
[2022-07-26 09:15:05.085 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 119 application/json;+charset=utf-8 12.2045ms
[2022-07-26 09:15:05.090 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 60)
[2022-07-26 09:15:05.090 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :11ms
[2022-07-26 09:15:05.090 +05:30 INF] Drive Service Time elapsed for  ViewCancelledInterview(int employeeId) :12ms
[2022-07-26 09:15:05.090 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType38`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:15:05.097 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 214
[2022-07-26 09:15:05.097 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewCancelledInterview (Source) in 23.878ms
[2022-07-26 09:15:05.097 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewCancelledInterview (Source)'
[2022-07-26 09:15:05.097 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":71,"fromTime":"12:00 PM","toTime":"12:30 PM","driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-02","mode":"Offline","locationName":"Chennai","status":true}]
[2022-07-26 09:15:05.097 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewCancelledInterview application/json 39 - 200 214 application/json;+charset=utf-8 28.4502ms
[2022-07-26 09:15:07.268 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 09:15:07.268 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:15:07.269 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:15:07.270 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:15:07.270 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:15:07.271 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 09:15:07.272 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:15:07.274 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:07.274 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :3ms
[2022-07-26 09:15:07.276 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:07.276 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-26 09:15:07.277 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 09:15:07.277 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :6ms
[2022-07-26 09:15:07.279 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:15:07.279 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :8ms
[2022-07-26 09:15:07.280 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:15:07.281 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :9ms
[2022-07-26 09:15:07.282 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 09:15:07.282 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :11ms
[2022-07-26 09:15:07.282 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :11ms
[2022-07-26 09:15:07.282 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:15:07.283 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 09:15:07.283 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 13.0751ms
[2022-07-26 09:15:07.283 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 09:15:07.283 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 09:15:07.283 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 15.4782ms
[2022-07-26 09:15:17.917 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json -
[2022-07-26 09:15:17.918 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewInvitesByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:15:17.918 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:15:17.921 +05:30 INF] Route matched with {action = "ViewInvitesByID", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewInvitesByID() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:15:17.939 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:15:17.967 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[DriveId]
FROM [EmployeeDriveResponse] AS [e]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = 0)
[2022-07-26 09:15:17.968 +05:30 INF] Drive DAL Time elapsed for IsResponded(int employeeId, int driveId)  :30ms
[2022-07-26 09:15:18.013 +05:30 INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] IN (54, 55, 57, 59, 65, 67)
[2022-07-26 09:15:18.017 +05:30 INF] Drive Service Time elapsed for  ViewDriveInvites(int employeeId) :91ms
[2022-07-26 09:15:18.017 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType27`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:15:18.025 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1164
[2022-07-26 09:15:18.025 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewInvitesByID (Source) in 103.8392ms
[2022-07-26 09:15:18.026 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:15:18.026 +05:30 INF] RequestBody: 
[2022-07-26 09:15:18.026 +05:30 INF] ResponseBody: [{"driveId":54,"driveName":"Cloud Developer","fromDate":"2022-07-28","toDate":"2022-07-29","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online","poolId":26,"driveTiming":30.0},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":90.0},{"driveId":59,"driveName":"Hydra Net","fromDate":"2022-08-01","toDate":"2022-08-04","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":30.0},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":60.0},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0}]
[2022-07-26 09:15:18.026 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json - - 200 1164 application/json;+charset=utf-8 108.9884ms
[2022-07-26 09:29:34.384 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:29:34.384 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-26 09:29:34.384 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-26 09:29:34.392 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:29:34.392 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:29:34.392 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:29:34.393 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:29:34.393 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:29:34.393 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:29:34.398 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-26 09:29:34.398 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:29:34.398 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:29:34.410 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:29:34.416 +05:30 ERR] logger DAL
[2022-07-26 09:29:34.418 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:29:34.419 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:29:34.449 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-26 09:29:34.450 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :45ms
[2022-07-26 09:29:34.450 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :46ms
[2022-07-26 09:29:34.451 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:29:34.455 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:29:34.456 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :49ms
[2022-07-26 09:29:34.457 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :52ms
[2022-07-26 09:29:34.457 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:29:34.467 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-26 09:29:34.468 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 70.1278ms
[2022-07-26 09:29:34.468 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:29:34.469 +05:30 INF] RequestBody: 
[2022-07-26 09:29:34.469 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-26 09:29:34.469 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 85.2912ms
[2022-07-26 09:29:34.469 +05:30 INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-26 09:29:34.470 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :63ms
[2022-07-26 09:29:34.470 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :66ms
[2022-07-26 09:29:34.471 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:29:34.474 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:29:34.474 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-26 09:29:34.474 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 75.8945ms
[2022-07-26 09:29:34.474 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:29:34.474 +05:30 INF] RequestBody: 
[2022-07-26 09:29:34.474 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:29:34.474 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 90.5769ms
[2022-07-26 09:29:34.474 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 76.311ms
[2022-07-26 09:29:34.474 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:29:34.474 +05:30 INF] RequestBody: 
[2022-07-26 09:29:34.474 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-26 09:29:34.475 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 90.8205ms
[2022-07-26 09:30:56.648 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:30:56.648 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-26 09:30:56.648 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-26 09:30:56.652 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:30:56.652 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:30:56.652 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-26 09:30:56.653 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:30:56.653 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:30:56.653 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:30:56.653 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:30:56.653 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:30:56.653 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:30:56.655 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:30:56.655 +05:30 ERR] logger DAL
[2022-07-26 09:30:56.655 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:30:56.656 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:30:56.662 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:30:56.662 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-26 09:30:56.663 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-26 09:30:56.663 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :8ms
[2022-07-26 09:30:56.663 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :9ms
[2022-07-26 09:30:56.663 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :9ms
[2022-07-26 09:30:56.663 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:30:56.663 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:30:56.663 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:30:56.663 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-26 09:30:56.663 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-26 09:30:56.664 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 10.611ms
[2022-07-26 09:30:56.664 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 10.7183ms
[2022-07-26 09:30:56.664 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:30:56.664 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :10ms
[2022-07-26 09:30:56.664 +05:30 INF] RequestBody: 
[2022-07-26 09:30:56.664 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:30:56.664 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:30:56.664 +05:30 INF] RequestBody: 
[2022-07-26 09:30:56.664 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :10ms
[2022-07-26 09:30:56.664 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-26 09:30:56.664 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:30:56.664 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 16.9540ms
[2022-07-26 09:30:56.665 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 16.7290ms
[2022-07-26 09:30:56.665 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-26 09:30:56.665 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 12.5778ms
[2022-07-26 09:30:56.665 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:30:56.665 +05:30 INF] RequestBody: 
[2022-07-26 09:30:56.665 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-26 09:30:56.665 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 17.4516ms
[2022-07-26 09:34:22.413 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 169
[2022-07-26 09:34:22.422 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:34:22.423 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 169
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:34:22.424 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-26 09:34:22.427 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:34:22.430 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE2022","name":"Maggie","departmentId":"1","roleId":"1","projectId":"1","emailId":"maggie@aspiresys.com","password":"Maggie@12345"}
[2022-07-26 09:34:22.511 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:34:22.522 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.523 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:34:22.530 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__roleId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Roles] AS [r]
        WHERE [r].[RoleId] = @__roleId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.538 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__projectId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Projects] AS [p]
        WHERE [p].[ProjectId] = @__projectId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.541 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:34:22.550 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employee_EmployeeAceNumber_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmployeeAceNumber] = @__employee_EmployeeAceNumber_0) AND ([e].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.558 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employee_EmailId_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employee_EmailId_0) AND ([e].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.567 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employee_EmailId_0='?' (Size = 4000), @__employee_EmployeeAceNumber_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (((([e].[EmailId] = @__employee_EmailId_0) OR ([e].[EmployeeAceNumber] = @__employee_EmployeeAceNumber_1)) AND ([e].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:34:22.819 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (DbType = Boolean), @p4='?' (DbType = Boolean), @p5='?' (DbType = Boolean), @p6='?' (Size = 4000), @p7='?' (Size = 4000), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Employees] ([DepartmentId], [EmailId], [EmployeeAceNumber], [IsActive], [IsAdminAccepted], [IsAdminResponded], [Name], [Password], [ProjectId], [RoleId])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9);
SELECT [EmployeeId]
FROM [Employees]
WHERE @@ROWCOUNT = 1 AND [EmployeeId] = scope_identity();
[2022-07-26 09:34:22.878 +05:30 INF] Employee DAL Time elapsed for  AddEmployeeToDatabase(Employee employee)  :337ms
[2022-07-26 09:34:22.878 +05:30 INF] Employee Service Time elapsed for  CreateNewEmployee(Employee employee) :391ms
[2022-07-26 09:34:22.878 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:34:22.879 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 107
[2022-07-26 09:34:22.879 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 452.0154ms
[2022-07-26 09:34:22.879 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-26 09:34:22.879 +05:30 INF] ResponseBody: {"message":"Account has been created sucessfully. Please wait until you receive a mail from administrator"}
[2022-07-26 09:34:22.879 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 169 - 200 107 application/json;+charset=utf-8 466.1743ms
[2022-07-26 09:35:11.565 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:35:11.565 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:35:11.566 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:35:11.566 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:35:11.567 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:35:11.569 +05:30 INF] RequestBody: {"emailId":"admin@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:35:11.570 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:35:11.586 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:35:11.593 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:35:11.600 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:35:11.605 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:35:11.628 +05:30 INF] Executed DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:35:11.630 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :60ms
[2022-07-26 09:35:11.630 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :60ms
[2022-07-26 09:35:11.631 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :61ms
[2022-07-26 09:35:11.631 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:35:11.631 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 882
[2022-07-26 09:35:11.632 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 65.2815ms
[2022-07-26 09:35:11.632 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:35:11.632 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..XrBFkEEJggDn_BoiF1ZQEQ.zo5NsD7RzubKAutleP5Pfjfjj8p3N9A9DXkglZvdn4EE-cxTUDW7p3smDF9aFpDA4b2vupN3gToBd-1D_se79bXOlDXUsGU7v4x-2yEILaYGAHYuCPt_7kLhq65dkRy5qUollnZG0BCtajMBAWzHbLHzxI-Y7ZPqORjAL9UBhzRtYYEMlhA5JLtrvJ0uZMDhYaoFdWrwjO0dXnmCPdNJRx_rj9JIMGjkrUgustO_VhsR7vqwGFheNCLHGhSZf9XO_pqkipHDtK5RuBy2zQGS1xLxq2txha-1gtJcWaJ3ha5yRLFDvQ-P1SiRCPeH9Fd0wuEzQj-2HV-vg_B7m3gJg5dlzOORONPyuau8HZG_MV5XdbSu0EhpBGt0JXnxPV-2ToCwjzDkVdo5cuEyoQr289J-KMYWsV_Ospb86IWfBqRnurS9oUTiKCj6WDKv-RN69VIfEh4w034jqdNWjwkuvS6JuOs1tUP72Q9syxKCNBSaTW2uJjAZ1vFUwUWi-0YKZ55UOsDZnOvKPXfZ8k8G8jVkUMHnGIYKHLwCWYHXHo5x_Gx0-6v_uB4KMRaqNlOPTX2VX2dg00ZjFKPV1Kt2dyftU3msW55Y_dRx-fCO9cg.LdG_q3NYvtUElWo6jSmTDo5SIcpHcockjFWvE7zjWqk","expiryInMinutes":360,"userHash":"6e93e549b7140ec74ade7f56aff807f19b7dec5fea37e57902e91286f3b27d64","userName":"Admin"}
[2022-07-26 09:35:11.632 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 882 application/json;+charset=utf-8 67.7516ms
[2022-07-26 09:35:11.651 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json -
[2022-07-26 09:35:11.652 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:35:11.652 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:35:11.652 +05:30 INF] Route matched with {action = "ViewEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeRequest() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:35:11.656 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:35:11.676 +05:30 INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE (([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))
[2022-07-26 09:35:11.676 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesRequestFromDatabase()  :21ms
[2022-07-26 09:35:11.676 +05:30 INF] Employee Service Time elapsed for  ViewEmployeeRequest() :21ms
[2022-07-26 09:35:11.676 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType42`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:35:11.676 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 403
[2022-07-26 09:35:11.677 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source) in 24.2846ms
[2022-07-26 09:35:11.677 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:35:11.677 +05:30 INF] RequestBody: 
[2022-07-26 09:35:11.677 +05:30 INF] ResponseBody: [{"employeeId":75,"employeeAceNumber":"ACE00091","employeeName":"lawrence","employeeDepartment":"LAMP","employeeRole":"Project Manager"},{"employeeId":77,"employeeAceNumber":"ACE00987","employeeName":"Albert","employeeDepartment":"LAMP","employeeRole":"Module Lead"},{"employeeId":84,"employeeAceNumber":"ACE2022","employeeName":"Maggie","employeeDepartment":".NET","employeeRole":"Software Developer"}]
[2022-07-26 09:35:11.677 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json - - 200 403 application/json;+charset=utf-8 25.9103ms
[2022-07-26 09:36:15.390 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Employee/RespondEmployeeRequest?employeeId=84&response=true application/json -
[2022-07-26 09:36:15.391 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:36:15.392 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Employee/RespondEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:36:15.392 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.RespondEmployeeRequest (Source)'
[2022-07-26 09:36:15.408 +05:30 INF] Route matched with {action = "RespondEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RespondEmployeeRequest(Int32, Boolean) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:36:15.432 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:36:15.442 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmployeeId] = @__employeeId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:36:15.478 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId]
FROM [Employees] AS [e]
WHERE [e].[EmployeeId] = @__p_0
[2022-07-26 09:36:15.511 +05:30 INF] Executed DbCommand (20ms) [Parameters=[@p10='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (DbType = Boolean), @p4='?' (DbType = Boolean), @p5='?' (DbType = Boolean), @p6='?' (Size = 4000), @p7='?' (Size = 4000), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Employees] SET [DepartmentId] = @p0, [EmailId] = @p1, [EmployeeAceNumber] = @p2, [IsActive] = @p3, [IsAdminAccepted] = @p4, [IsAdminResponded] = @p5, [Name] = @p6, [Password] = @p7, [ProjectId] = @p8, [RoleId] = @p9
WHERE [EmployeeId] = @p10;
SELECT @@ROWCOUNT;
[2022-07-26 09:36:15.513 +05:30 INF] Employee DAL Time elapsed for  RespondEmployeeRequest(int employeeId, bool response)  :81ms
[2022-07-26 09:36:15.513 +05:30 INF] Employee Service Time elapsed for  RespondEmployeeRequest(int employeeId, bool response) :84ms
[2022-07-26 09:36:15.513 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:36:15.513 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 57
[2022-07-26 09:36:15.514 +05:30 INF] Executed action IMS.Controllers.EmployeeController.RespondEmployeeRequest (Source) in 105.8414ms
[2022-07-26 09:36:15.514 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.RespondEmployeeRequest (Source)'
[2022-07-26 09:36:15.514 +05:30 INF] RequestBody: 
[2022-07-26 09:36:15.514 +05:30 INF] ResponseBody: {"message":"Employee's request is accepted Successfully"}
[2022-07-26 09:36:15.514 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Employee/RespondEmployeeRequest?employeeId=84&response=true application/json - - 200 57 application/json;+charset=utf-8 123.7334ms
[2022-07-26 09:36:15.523 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json -
[2022-07-26 09:36:15.523 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:36:15.523 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:36:15.524 +05:30 INF] Route matched with {action = "ViewEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeRequest() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:36:15.524 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:36:15.539 +05:30 INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE (([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))
[2022-07-26 09:36:15.540 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesRequestFromDatabase()  :15ms
[2022-07-26 09:36:15.540 +05:30 INF] Employee Service Time elapsed for  ViewEmployeeRequest() :15ms
[2022-07-26 09:36:15.540 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType42`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:36:15.540 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 267
[2022-07-26 09:36:15.540 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source) in 16.6896ms
[2022-07-26 09:36:15.540 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:36:15.540 +05:30 INF] RequestBody: 
[2022-07-26 09:36:15.540 +05:30 INF] ResponseBody: [{"employeeId":75,"employeeAceNumber":"ACE00091","employeeName":"lawrence","employeeDepartment":"LAMP","employeeRole":"Project Manager"},{"employeeId":77,"employeeAceNumber":"ACE00987","employeeName":"Albert","employeeDepartment":"LAMP","employeeRole":"Module Lead"}]
[2022-07-26 09:36:15.540 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json - - 200 267 application/json;+charset=utf-8 17.6208ms
[2022-07-26 09:37:20.426 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:37:20.428 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:37:20.428 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:37:20.428 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:37:20.430 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:37:20.436 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:37:20.436 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 09:37:20.436 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-26 09:37:20.436 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:37:20.437 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:37:20.437 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.2575ms
[2022-07-26 09:37:20.437 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:37:20.437 +05:30 INF] RequestBody: 
[2022-07-26 09:37:20.437 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:37:20.438 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 11.2760ms
[2022-07-26 09:37:56.284 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:37:56.285 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Cache-Control: no-cache
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Pragma: [Redacted]
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:37:56.285 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:37:56.285 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:37:56.287 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:37:56.293 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:37:56.293 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 09:37:56.293 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-26 09:37:56.293 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:37:56.294 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:37:56.294 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.161ms
[2022-07-26 09:37:56.294 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:37:56.294 +05:30 INF] RequestBody: 
[2022-07-26 09:37:56.295 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:37:56.295 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 11.1713ms
[2022-07-26 09:38:14.860 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 42
[2022-07-26 09:38:14.860 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:38:14.861 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 42
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:38:14.861 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:38:14.864 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:38:14.865 +05:30 INF] RequestBody: {"departmentId":1,"departmentName":".NET"}
[2022-07-26 09:38:14.886 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:38:14.894 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:38:14.904 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:38:14.905 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :19ms
[2022-07-26 09:38:14.905 +05:30 ERR] Location service : RemoveLocation(int locationId) : Department contains active Pools.
[2022-07-26 09:38:14.907 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :24ms
[2022-07-26 09:38:14.908 +05:30 ERR] Department Controller : RemoveDepartment(int departmentId) : Department contains active Pools.
[2022-07-26 09:38:14.909 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-26 09:38:14.910 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-26 09:38:14.912 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 47.4131ms
[2022-07-26 09:38:14.912 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:38:14.912 +05:30 INF] ResponseBody: Department contains active Pools.
[2022-07-26 09:38:14.912 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 42 - 400 - text/plain;+charset=utf-8 52.8291ms
[2022-07-26 09:39:28.856 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:39:28.856 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:39:28.857 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:39:28.857 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:39:28.859 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:39:28.860 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:39:28.873 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:39:28.913 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:39:28.914 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 54.0308ms
[2022-07-26 09:39:28.914 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:39:28.914 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-837c6817238c43722ce36c287b5c5fbc-729084f3440a09f1-00"}
[2022-07-26 09:39:28.914 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 58.2319ms
[2022-07-26 09:39:34.947 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:39:34.947 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:39:34.949 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:39:34.949 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:39:34.949 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:39:34.950 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:39:34.950 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:39:34.951 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:39:34.951 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 2.0408ms
[2022-07-26 09:39:34.951 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:39:34.951 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-c7dfe00dccfd68f3a92f868b9bf96e58-74a30cadd8762402-00"}
[2022-07-26 09:39:34.952 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 4.6783ms
[2022-07-26 09:40:12.186 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:40:12.186 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:12.188 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:40:12.188 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:12.188 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:12.191 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:40:12.192 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:40:12.192 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:40:12.193 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 4.5814ms
[2022-07-26 09:40:12.193 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:12.193 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-95aba6fa55811d8a42552635a32f647e-925d82e2cdcfc3e6-00"}
[2022-07-26 09:40:12.194 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 7.4959ms
[2022-07-26 09:40:27.963 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:40:27.963 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:27.964 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:40:27.965 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:27.965 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:27.965 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:40:27.966 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:40:27.966 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:40:27.966 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 1.7041ms
[2022-07-26 09:40:27.967 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:27.967 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-3e9f48e3657c327f35b057d2900bea60-724401af845ef3ae-00"}
[2022-07-26 09:40:27.967 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 3.7266ms
[2022-07-26 09:40:30.324 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-26 09:40:30.325 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:30.328 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 3.6845ms
[2022-07-26 09:40:30.329 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:40:30.329 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:30.329 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-26 09:40:30.329 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:40:30.329 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:40:30.329 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:40:30.330 +05:30 INF] RequestBody: {"emailId":"admin@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:40:30.330 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:30.335 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:40:30.339 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:40:30.344 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:40:30.349 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:40:30.366 +05:30 INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:40:30.367 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :37ms
[2022-07-26 09:40:30.367 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :37ms
[2022-07-26 09:40:30.368 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :38ms
[2022-07-26 09:40:30.368 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:40:30.369 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 882
[2022-07-26 09:40:30.369 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 39.8696ms
[2022-07-26 09:40:30.370 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:40:30.370 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..f5_VruHCar_Tef75BZdBeQ.Y6D3l7C2tQQVA0Lgsgq6wNOiIae19IlsS7N2qWzUXgLohVTc_55w6w7h0Iyk7O6XuSU59PAGILD23zgk4V0U2ISr7SXUTB0TMXWMYIr5vM6d8GMaW8-tE6S1haYJGsIYHmZTqLYTy1O8Vhz8I7GFnmDOdtMkNZhGonpcolp21DWPJ2MA27VxMZPrWm2PcHdAVvSUpvMGEkhMhOGk82YXLcsjaCfsh7iqsT-1p8zML4gPqujYaCZhLtHPXgHFYnL3uZMM6nXcgjUKtkrr2bEeDjdhw1IQvdGGjt7QTD-fZJa0e8sN_wv_MfialsnflIWWeAPoqwQ6hSHMToPSfkJXfB6xlx7XM-G7Sko-jLkfugXaVma6f-4MJKYDFpjxdd-2g0-BeUfRnvnPDhcNsva-ztAePE9fZ8OdFkE7MYwOF9I5HiQfm2T_T5GxSGdQbTlJoN5w_q13Beq4kX0xRCP7T5NBw01leUdoy27RTgGVQdifBBW4ICj4QKoSsZ6DdAW7d4N78M-8V-yO_xZo8eTjKlDWhNv5p5nMURH1_YraU4ETratGgeE2j6SbM_apZzStQTZumBR8KrtwciU32ftEeY-hWAYuDgJM2WzCa-U9r84.EpmTY8JyZG_F9k_1CDx4iYGnB28zzU8wFz04POmChHg","expiryInMinutes":360,"userHash":"6e93e549b7140ec74ade7f56aff807f19b7dec5fea37e57902e91286f3b27d64","userName":"Admin"}
[2022-07-26 09:40:30.371 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 882 application/json;+charset=utf-8 41.1960ms
[2022-07-26 09:40:30.465 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest - -
[2022-07-26 09:40:30.465 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:30.466 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest - - - 204 - - 0.7695ms
[2022-07-26 09:40:30.471 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json -
[2022-07-26 09:40:30.473 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:30.476 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:40:30.476 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:40:30.476 +05:30 INF] Route matched with {action = "ViewEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeRequest() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:40:30.479 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:30.499 +05:30 INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE (([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))
[2022-07-26 09:40:30.500 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesRequestFromDatabase()  :22ms
[2022-07-26 09:40:30.500 +05:30 INF] Employee Service Time elapsed for  ViewEmployeeRequest() :22ms
[2022-07-26 09:40:30.500 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType42`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:30.500 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 267
[2022-07-26 09:40:30.500 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source) in 24.1787ms
[2022-07-26 09:40:30.501 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-26 09:40:30.501 +05:30 INF] RequestBody: 
[2022-07-26 09:40:30.501 +05:30 INF] ResponseBody: [{"employeeId":75,"employeeAceNumber":"ACE00091","employeeName":"lawrence","employeeDepartment":"LAMP","employeeRole":"Project Manager"},{"employeeId":77,"employeeAceNumber":"ACE00987","employeeName":"Albert","employeeDepartment":"LAMP","employeeRole":"Module Lead"}]
[2022-07-26 09:40:30.502 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json - - 200 267 application/json;+charset=utf-8 31.1399ms
[2022-07-26 09:40:32.222 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json -
[2022-07-26 09:40:32.223 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Location/ViewLocations
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:40:32.223 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 09:40:32.226 +05:30 INF] Route matched with {action = "ViewLocations", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLocations() on controller IMS.Controllers.LocationController (Source).
[2022-07-26 09:40:32.236 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:32.265 +05:30 INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [Locations] AS [l]
WHERE [l].[IsActive] = CAST(1 AS bit)
ORDER BY [l].[LocationName]
[2022-07-26 09:40:32.265 +05:30 INF] Location DAL Time elapsed for  GetLocationsFromDatabase() :30ms
[2022-07-26 09:40:32.266 +05:30 INF] Location Service Time elapsed for  ViewLocations() :33ms
[2022-07-26 09:40:32.266 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Location, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:32.271 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1180
[2022-07-26 09:40:32.272 +05:30 INF] Executed action IMS.Controllers.LocationController.ViewLocations (Source) in 45.5323ms
[2022-07-26 09:40:32.272 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 09:40:32.272 +05:30 INF] RequestBody: 
[2022-07-26 09:40:32.272 +05:30 INF] ResponseBody: [{"locationId":2,"locationName":"Bangalore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":1,"locationName":"Chennai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":8,"locationName":"Coimbatore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":4,"locationName":"Dubai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":6,"locationName":"Hyderabad","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":7,"locationName":"Kochin","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":3,"locationName":"London","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":22,"locationName":"Online","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]}]
[2022-07-26 09:40:32.272 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json - - 200 1180 application/json;+charset=utf-8 50.1250ms
[2022-07-26 09:40:32.308 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:40:32.308 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:32.309 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.7389ms
[2022-07-26 09:40:32.311 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:40:32.311 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:32.312 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:40:32.312 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:32.312 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:32.313 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:32.317 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:40:32.318 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :5ms
[2022-07-26 09:40:32.318 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :5ms
[2022-07-26 09:40:32.318 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:32.318 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:40:32.319 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 7.0285ms
[2022-07-26 09:40:32.319 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:32.319 +05:30 INF] RequestBody: 
[2022-07-26 09:40:32.319 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:40:32.320 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 8.9792ms
[2022-07-26 09:40:38.360 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:40:38.361 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:38.362 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 1.9779ms
[2022-07-26 09:40:38.364 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:40:38.364 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:38.364 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:40:38.364 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:38.364 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:38.365 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:40:38.366 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:40:38.366 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:40:38.369 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 2.6883ms
[2022-07-26 09:40:38.370 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:40:38.370 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-c39bfdbc344f29525a5309ff128eff0b-44e9bf1d57ebf74d-00"}
[2022-07-26 09:40:38.371 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 6.7461ms
[2022-07-26 09:40:46.067 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Location/CreateNewLocation application/json 40
[2022-07-26 09:40:46.070 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:40:46.071 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Location/CreateNewLocation
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 40
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:40:46.071 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.CreateNewLocation (Source)'
[2022-07-26 09:40:46.074 +05:30 INF] Route matched with {action = "CreateNewLocation", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewLocation(IMS.Models.Location) on controller IMS.Controllers.LocationController (Source).
[2022-07-26 09:40:46.075 +05:30 INF] RequestBody: {"locationId":0,"locationName":"Sydney"}
[2022-07-26 09:40:46.085 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:46.104 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__location_LocationName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Locations] AS [l]
        WHERE ([l].[LocationName] = @__location_LocationName_0) AND ([l].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:40:46.120 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (DbType = Boolean), @p3='?' (Size = 30), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Locations] ([AddedBy], [AddedOn], [IsActive], [LocationName], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [LocationId]
FROM [Locations]
WHERE @@ROWCOUNT = 1 AND [LocationId] = scope_identity();
[2022-07-26 09:40:46.125 +05:30 INF] Location DAL Time elapsed for AddLocationToDatabase(Location location)  :40ms
[2022-07-26 09:40:46.125 +05:30 INF] Location Service Time elapsed for  CreateLocation(string locationName) :43ms
[2022-07-26 09:40:46.125 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:40:46.125 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 41
[2022-07-26 09:40:46.126 +05:30 INF] Executed action IMS.Controllers.LocationController.CreateNewLocation (Source) in 51.8657ms
[2022-07-26 09:40:46.126 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.CreateNewLocation (Source)'
[2022-07-26 09:40:46.126 +05:30 INF] ResponseBody: {"message":"Location Added Successfully"}
[2022-07-26 09:40:46.126 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Location/CreateNewLocation application/json 40 - 200 41 application/json;+charset=utf-8 59.3652ms
[2022-07-26 09:40:50.300 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-26 09:40:50.301 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:40:50.301 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:40:50.302 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-26 09:40:50.303 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:50.319 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:40:50.320 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:40:50.321 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:50.321 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:50.322 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:50.328 +05:30 INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-26 09:40:50.329 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :26ms
[2022-07-26 09:40:50.329 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :26ms
[2022-07-26 09:40:50.329 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:50.330 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-26 09:40:50.330 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 28.4916ms
[2022-07-26 09:40:50.330 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:40:50.330 +05:30 INF] RequestBody: 
[2022-07-26 09:40:50.330 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-26 09:40:50.331 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 30.0749ms
[2022-07-26 09:40:50.354 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:40:50.354 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :32ms
[2022-07-26 09:40:50.354 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :32ms
[2022-07-26 09:40:50.354 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:50.354 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:40:50.355 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 33.8696ms
[2022-07-26 09:40:50.355 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:50.355 +05:30 INF] RequestBody: 
[2022-07-26 09:40:50.355 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:40:50.355 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 35.4223ms
[2022-07-26 09:40:56.057 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:40:56.058 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:40:56.058 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:56.058 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:40:56.058 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:40:56.060 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:40:56.060 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :1ms
[2022-07-26 09:40:56.060 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 09:40:56.060 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:40:56.060 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:40:56.060 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 2.7245ms
[2022-07-26 09:40:56.060 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:40:56.060 +05:30 INF] RequestBody: 
[2022-07-26 09:40:56.060 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:40:56.061 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 3.5145ms
[2022-07-26 09:41:19.375 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:41:19.375 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:41:19.376 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.2918ms
[2022-07-26 09:41:19.377 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:41:19.377 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:41:19.377 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:41:19.378 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:41:19.378 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:41:19.378 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:41:19.379 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:41:19.379 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:41:19.379 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 1.6765ms
[2022-07-26 09:41:19.379 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:41:19.380 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-bd28218617dfecd07e7c545ac6eb9126-0008db3e60376d0e-00"}
[2022-07-26 09:41:19.380 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 2.9789ms
[2022-07-26 09:41:20.955 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Project/CreateNewProject?departmentId=3&projectName=AI%20PROJECT application/json 0
[2022-07-26 09:41:20.956 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:41:20.956 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Project/CreateNewProject
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:41:20.956 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.CreateNewProject (Source)'
[2022-07-26 09:41:20.959 +05:30 INF] Route matched with {action = "CreateNewProject", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewProject(Int32, System.String) on controller IMS.Controller.ProjectController (Source).
[2022-07-26 09:41:20.967 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:41:20.990 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Projects] AS [p]
WHERE [p].[ProjectId] = @__p_0
[2022-07-26 09:41:20.999 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__project_ProjectName_0='?' (Size = 4000), @__project_DepartmentId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Projects] AS [p]
        WHERE (([p].[ProjectName] = @__project_ProjectName_0) AND ([p].[IsActive] = CAST(1 AS bit))) AND ([p].[DepartmentId] = @__project_DepartmentId_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:41:21.018 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Boolean), @p2='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Projects] ([DepartmentId], [IsActive], [ProjectName])
VALUES (@p0, @p1, @p2);
SELECT [ProjectId]
FROM [Projects]
WHERE @@ROWCOUNT = 1 AND [ProjectId] = scope_identity();
[2022-07-26 09:41:21.023 +05:30 INF] Department DAL Time elapsed for  AddProjectToDatabase(Project project) :56ms
[2022-07-26 09:41:21.023 +05:30 INF] Department Service Time elapsed for  CreateProject(int departmentId, string projectName) :59ms
[2022-07-26 09:41:21.023 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:41:21.023 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 40
[2022-07-26 09:41:21.023 +05:30 INF] Executed action IMS.Controller.ProjectController.CreateNewProject (Source) in 63.8966ms
[2022-07-26 09:41:21.023 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.CreateNewProject (Source)'
[2022-07-26 09:41:21.023 +05:30 INF] RequestBody: 
[2022-07-26 09:41:21.023 +05:30 INF] ResponseBody: {"message":"Project Added Successfully"}
[2022-07-26 09:41:21.024 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Project/CreateNewProject?departmentId=3&projectName=AI%20PROJECT application/json 0 - 200 40 application/json;+charset=utf-8 68.2800ms
[2022-07-26 09:41:23.825 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-26 09:41:23.825 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:41:23.825 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:41:23.825 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:41:23.828 +05:30 ERR] logger DAL
[2022-07-26 09:41:23.828 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:41:23.834 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-26 09:41:23.834 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :7ms
[2022-07-26 09:41:23.834 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :7ms
[2022-07-26 09:41:23.834 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:41:23.834 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-26 09:41:23.835 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 9.1897ms
[2022-07-26 09:41:23.835 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:41:23.835 +05:30 INF] RequestBody: 
[2022-07-26 09:41:23.835 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-26 09:41:23.835 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 10.4766ms
[2022-07-26 09:41:27.475 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:41:27.476 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:41:27.476 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:41:27.476 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:41:27.476 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-26 09:41:27.477 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:41:27.477 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:41:27.477 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:41:27.477 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-26 09:41:27.478 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:41:27.480 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:41:27.480 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :4ms
[2022-07-26 09:41:27.480 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :4ms
[2022-07-26 09:41:27.481 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:41:27.481 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:41:27.481 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 5.2768ms
[2022-07-26 09:41:27.481 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:41:27.481 +05:30 INF] RequestBody: 
[2022-07-26 09:41:27.481 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:41:27.481 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 6.7752ms
[2022-07-26 09:41:27.484 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-26 09:41:27.485 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :7ms
[2022-07-26 09:41:27.485 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :7ms
[2022-07-26 09:41:27.485 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:41:27.485 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1151
[2022-07-26 09:41:27.485 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 8.5166ms
[2022-07-26 09:41:27.485 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-26 09:41:27.485 +05:30 INF] RequestBody: 
[2022-07-26 09:41:27.485 +05:30 INF] ResponseBody: [{"projectId":33,"projectName":"AI PROJECT","departmentName":"ORACLE"},{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-26 09:41:27.486 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1151 application/json;+charset=utf-8 9.3724ms
[2022-07-26 09:42:32.943 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:42:32.943 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:42:32.944 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:42:32.944 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:42:32.944 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:42:32.945 +05:30 INF] RequestBody: {"emailId":"tommy@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:42:32.947 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:42:32.954 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:42:32.959 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:42:32.964 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:42:32.968 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:42:32.982 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:42:32.983 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :37ms
[2022-07-26 09:42:32.983 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :37ms
[2022-07-26 09:42:32.983 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :37ms
[2022-07-26 09:42:32.984 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:42:32.984 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 880
[2022-07-26 09:42:32.984 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 39.6893ms
[2022-07-26 09:42:32.984 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:42:32.984 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..WWOLh1Pi3fyXJSdd3dkEAw.GextAjhjlqgWbARRp8hTIdZbVqAkuzztlV6zdRxhy2Z0URUdO0qcCvxEkoUZa82OMWYdBIM-aTzRtDJ-wUVPwYtFXQM3T1fqr9oIBmLktrTkZbCwoErNyJeQ8E8WpaWdrG4VlYp5idGu6bzLkxBagseV16a8qGFdQ50SbAkXzRMdKXkYNCcrZ1FMkV3HMafXOmERsH4BsGoVn9FMedvwVxe6L5R_2c1Dy0lhGJg7NI3rmtYZi8p3-6LvvSgQY1SMbnV6X99jOczH5ZluVPa-OndAHp7qD7fElUfrUX5LMHTNQw2l3zi2VW0x_jG0RXiFCgdjTlNwi9OHnkuznZ_ZLUGzyzwrZ5inb7WsHKp0jwxoTXG8rU0U7U3mUF35iyiD9YKnD47Ml9esDC4Np8mDzuCwSnUamKyowVA4Jvu5HzZYUt1uMyzZSjkIdiWgAA8I4t_p1IBmWMttnc7Mr47pg6rH2c-uTiDUxJLsnZNNLn5W1khAF5qA9aQUhuRWVaH_eRg4p1wxyBKRONz9Ned-veCuUWOl22LOdH3KiC5WM_7XanIHomwYsRsU2iS0Mhw9N9ax9MpZPVKnNqfxd7gyQSlM3hyQw5SVedNcPO-qUXc.MTzWLjUQ9b067khtVp_jQB2541H6CWhGHGJ9_cH2l2k","expiryInMinutes":360,"userHash":"a378b5658dbdcaf167e945242572bd3339f540af202acf0ab70741e411d861b7","userName":"Tom"}
[2022-07-26 09:42:32.984 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 880 application/json;+charset=utf-8 41.1778ms
[2022-07-26 09:42:40.315 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:42:40.316 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:42:40.316 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:42:40.316 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:42:40.316 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:42:40.316 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:42:40.316 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:42:40.318 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:42:40.319 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:42:40.325 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:42:40.333 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:42:40.333 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :16ms
[2022-07-26 09:42:40.333 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :16ms
[2022-07-26 09:42:40.334 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:42:40.334 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:42:40.334 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 17.5845ms
[2022-07-26 09:42:40.334 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:42:40.334 +05:30 INF] RequestBody: 
[2022-07-26 09:42:40.334 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:42:40.334 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 19.1115ms
[2022-07-26 09:42:40.350 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:42:40.350 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :26ms
[2022-07-26 09:42:40.351 +05:30 INF] Pool Service Time elapsed for  ViewPools() :28ms
[2022-07-26 09:42:40.351 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:42:40.355 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 726
[2022-07-26 09:42:40.355 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 36.1062ms
[2022-07-26 09:42:40.356 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:42:40.356 +05:30 INF] RequestBody: 
[2022-07-26 09:42:40.356 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:42:40.356 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 726 application/json;+charset=utf-8 40.2335ms
[2022-07-26 09:42:45.435 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:42:45.436 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:42:45.436 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:42:45.436 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:42:45.437 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:42:45.449 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:42:45.449 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :12ms
[2022-07-26 09:42:45.449 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :12ms
[2022-07-26 09:42:45.449 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:42:45.449 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:42:45.450 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 13.1433ms
[2022-07-26 09:42:45.450 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:42:45.450 +05:30 INF] RequestBody: 
[2022-07-26 09:42:45.450 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:42:45.450 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 14.7834ms
[2022-07-26 09:43:30.004 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/CreateNewPool?departmentId=1&poolName=Capella%20Major application/json 0
[2022-07-26 09:43:30.005 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:43:30.006 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/CreateNewPool
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:43:30.006 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.CreateNewPool (Source)'
[2022-07-26 09:43:30.008 +05:30 INF] Route matched with {action = "CreateNewPool", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewPool(Int32, System.String) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:43:30.048 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:30.058 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__pool_PoolName_0='?' (Size = 25), @__pool_DepartmentId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE (([p].[PoolName] = @__pool_PoolName_0) AND ([p].[DepartmentId] = @__pool_DepartmentId_1)) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:43:30.068 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:43:30.078 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__pool_PoolName_0='?' (Size = 25), @__pool_DepartmentId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE (([p].[PoolName] = @__pool_PoolName_0) AND ([p].[DepartmentId] = @__pool_DepartmentId_1)) AND ([p].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:43:30.091 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (DbType = Int32), @p3='?' (DbType = Boolean), @p4='?' (Size = 25), @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Pools] ([AddedBy], [AddedOn], [DepartmentId], [IsActive], [PoolName], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
SELECT [PoolId]
FROM [Pools]
WHERE @@ROWCOUNT = 1 AND [PoolId] = scope_identity();
[2022-07-26 09:43:30.096 +05:30 INF] Pool DAL Time elapsed for AddPoolToDatabase(Pool pool)  :49ms
[2022-07-26 09:43:30.097 +05:30 ERR] Pool Service Time elapsed for  CreatePool(int departmentId, string poolName) :55ms
[2022-07-26 09:43:30.097 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:43:30.097 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 37
[2022-07-26 09:43:30.098 +05:30 INF] Executed action IMS.Controllers.PoolController.CreateNewPool (Source) in 89.4252ms
[2022-07-26 09:43:30.098 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.CreateNewPool (Source)'
[2022-07-26 09:43:30.098 +05:30 INF] RequestBody: 
[2022-07-26 09:43:30.098 +05:30 INF] ResponseBody: {"message":"Pool Added Successfully"}
[2022-07-26 09:43:30.098 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/CreateNewPool?departmentId=1&poolName=Capella%20Major application/json 0 - 200 37 application/json;+charset=utf-8 94.0313ms
[2022-07-26 09:43:37.251 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:43:37.251 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:43:37.252 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:37.253 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:43:37.253 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:37.253 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:43:37.253 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:43:37.253 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:43:37.254 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:37.254 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:37.259 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:43:37.260 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :6ms
[2022-07-26 09:43:37.260 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :6ms
[2022-07-26 09:43:37.260 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:37.260 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:43:37.261 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 7.7188ms
[2022-07-26 09:43:37.261 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:43:37.261 +05:30 INF] RequestBody: 
[2022-07-26 09:43:37.261 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:43:37.261 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 9.7128ms
[2022-07-26 09:43:37.262 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:43:37.263 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :9ms
[2022-07-26 09:43:37.263 +05:30 INF] Pool Service Time elapsed for  ViewPools() :9ms
[2022-07-26 09:43:37.263 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:37.263 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:43:37.263 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 10.2612ms
[2022-07-26 09:43:37.263 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:43:37.263 +05:30 INF] RequestBody: 
[2022-07-26 09:43:37.263 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Major","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:43:37.263 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 11.9090ms
[2022-07-26 09:43:43.567 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-26 09:43:43.567 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:43:43.567 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.4840ms
[2022-07-26 09:43:43.570 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-26 09:43:43.570 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:43:43.572 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:43:43.572 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:43:43.572 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:43:43.573 +05:30 ERR] logger DAL
[2022-07-26 09:43:43.574 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:43.588 +05:30 INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-26 09:43:43.589 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :16ms
[2022-07-26 09:43:43.589 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :16ms
[2022-07-26 09:43:43.589 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:43.589 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-26 09:43:43.590 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 17.5371ms
[2022-07-26 09:43:43.590 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:43:43.590 +05:30 INF] RequestBody: 
[2022-07-26 09:43:43.590 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-26 09:43:43.590 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 20.2764ms
[2022-07-26 09:43:48.923 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-26 09:43:48.923 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:43:48.924 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:48.924 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:43:48.924 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:43:48.924 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:48.925 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:43:48.925 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:43:48.925 +05:30 ERR] logger DAL
[2022-07-26 09:43:48.926 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:48.927 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:48.928 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:43:48.928 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-26 09:43:48.928 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :3ms
[2022-07-26 09:43:48.928 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-26 09:43:48.928 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :3ms
[2022-07-26 09:43:48.929 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-26 09:43:48.929 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:48.929 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:48.929 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-26 09:43:48.929 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:43:48.929 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.2307ms
[2022-07-26 09:43:48.929 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:43:48.929 +05:30 INF] RequestBody: 
[2022-07-26 09:43:48.929 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 4.6758ms
[2022-07-26 09:43:48.929 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Major","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:43:48.929 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-26 09:43:48.929 +05:30 INF] RequestBody: 
[2022-07-26 09:43:48.929 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-26 09:43:48.929 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 6.1098ms
[2022-07-26 09:43:48.930 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 6.2149ms
[2022-07-26 09:43:48.936 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json -
[2022-07-26 09:43:48.936 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployees application/json -
[2022-07-26 09:43:48.937 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolMembers
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:48.937 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:43:48.937 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployees
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:43:48.938 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployees (Source)'
[2022-07-26 09:43:48.940 +05:30 INF] Route matched with {action = "ViewEmployees", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployees() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 09:43:48.940 +05:30 INF] Route matched with {action = "ViewPoolMembers", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolMembers(Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:43:48.945 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:48.950 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:48.967 +05:30 INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:43:48.968 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :24ms
[2022-07-26 09:43:48.968 +05:30 INF] Employee Service Time elapsed for  ViewEmployees() :24ms
[2022-07-26 09:43:48.969 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType40`6[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:48.975 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 4396
[2022-07-26 09:43:48.976 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployees (Source) in 35.1989ms
[2022-07-26 09:43:48.976 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployees (Source)'
[2022-07-26 09:43:48.976 +05:30 INF] RequestBody: 
[2022-07-26 09:43:48.976 +05:30 INF] ResponseBody: [{"employeeId":12,"employeeName":"Admin","employeeAceNumber":"ACE0012","employeeDepartmentName":"ADMIN","employeeProjectName":"Banking_NET","employeeRoleName":"Admin"},{"employeeId":48,"employeeName":"Tom","employeeAceNumber":"ACE7777","employeeDepartmentName":"TAC","employeeProjectName":"Not Applicable","employeeRoleName":"TAC"},{"employeeId":53,"employeeName":"John","employeeAceNumber":"ACE9999","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Delivery Manager"},{"employeeId":58,"employeeName":"Ben","employeeAceNumber":"ACE9975","employeeDepartmentName":".NET","employeeProjectName":"Interview_Management_NET","employeeRoleName":"Software Developer"},{"employeeId":59,"employeeName":"Jacobs M","employeeAceNumber":"ACE1999","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Delivery Manager"},{"employeeId":60,"employeeName":"Chris","employeeAceNumber":"ACE0001","employeeDepartmentName":"BFS","employeeProjectName":"Banking_BFS","employeeRoleName":"Software Developer"},{"employeeId":61,"employeeName":"Mike","employeeAceNumber":"ACE0002","employeeDepartmentName":"LAMP","employeeProjectName":"Interview_Management_LAMP","employeeRoleName":"Delivery Manager"},{"employeeId":62,"employeeName":"Jack","employeeAceNumber":"ACE0003","employeeDepartmentName":"ORACLE","employeeProjectName":"Interview_Management_ORACLE","employeeRoleName":"Delivery Manager"},{"employeeId":63,"employeeName":"Sammy","employeeAceNumber":"ACE0004","employeeDepartmentName":"LAMP","employeeProjectName":"Banking_LAMP","employeeRoleName":"Module Lead"},{"employeeId":64,"employeeName":"Katte","employeeAceNumber":"ACE0006","employeeDepartmentName":"LAMP","employeeProjectName":"Employee_Management_LAMP","employeeRoleName":"Senior Software Developer"},{"employeeId":65,"employeeName":"Xaami","employeeAceNumber":"ACE0008","employeeDepartmentName":"LAMP","employeeProjectName":"Banking_LAMP","employeeRoleName":"Service Line Owner"},{"employeeId":66,"employeeName":"Jordan","employeeAceNumber":"ACE0010","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Delivery Manager"},{"employeeId":67,"employeeName":"Shane","employeeAceNumber":"ACE0014","employeeDepartmentName":".NET","employeeProjectName":"Interview_Management_NET","employeeRoleName":"Module Lead"},{"employeeId":68,"employeeName":"Willams","employeeAceNumber":"ACE0016","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Project Manager"},{"employeeId":69,"employeeName":"Steve","employeeAceNumber":"ACE0005","employeeDepartmentName":"TAC","employeeProjectName":"Not Applicable","employeeRoleName":"TAC"},{"employeeId":71,"employeeName":"Stokes","employeeAceNumber":"ACE0007","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Senior Software Developer"},{"employeeId":72,"employeeName":"Board","employeeAceNumber":"ACE0009","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Software Developer"},{"employeeId":73,"employeeName":"Jason","employeeAceNumber":"ACE0011","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Software Developer"},{"employeeId":74,"employeeName":"Arnold","employeeAceNumber":"ACE0013","employeeDepartmentName":".NET","employeeProjectName":"Interview_Management_NET","employeeRoleName":"Senior Software Developer"},{"employeeId":79,"employeeName":"Sam","employeeAceNumber":"ACE12345","employeeDepartmentName":"TAC","employeeProjectName":"Not Applicable","employeeRoleName":"TAC"},{"employeeId":81,"employeeName":"Shelin","employeeAceNumber":"ACE00985","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Module Lead"},{"employeeId":82,"employeeName":"Robert","employeeAceNumber":"ACE00243","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Delivery Manager"},{"employeeId":83,"employeeName":"Jeremy Buendia","employeeAceNumber":"ACE4000","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Module Lead"},{"employeeId":84,"employeeName":"Maggie","employeeAceNumber":"ACE2022","employeeDepartmentName":".NET","employeeProjectName":"Interview_Management_NET","employeeRoleName":"Software Developer"}]
[2022-07-26 09:43:48.976 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployees application/json - - 200 4396 application/json;+charset=utf-8 39.7999ms
[2022-07-26 09:43:49.000 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ((([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) AND ([e].[IsAdminResponded] = CAST(1 AS bit))
[2022-07-26 09:43:49.001 +05:30 INF] Pool DAL Time elapsed for GetPoolMembersFromDatabase(int poolId)  :51ms
[2022-07-26 09:43:49.001 +05:30 INF] Pool Service Time elapsed for  ViewPoolMembers(int poolId) :56ms
[2022-07-26 09:43:49.001 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType45`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:43:49.003 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-26 09:43:49.003 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolMembers (Source) in 62.8884ms
[2022-07-26 09:43:49.004 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:43:49.004 +05:30 INF] RequestBody: 
[2022-07-26 09:43:49.004 +05:30 INF] ResponseBody: []
[2022-07-26 09:43:49.004 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json - - 200 2 application/json;+charset=utf-8 67.3557ms
[2022-07-26 09:43:54.168 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/CreateNewRole - -
[2022-07-26 09:43:54.168 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:43:54.169 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/CreateNewRole - - - 204 - - 0.3399ms
[2022-07-26 09:43:54.171 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Role/CreateNewRole application/json 54
[2022-07-26 09:43:54.171 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:43:54.171 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Role/CreateNewRole
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 54
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:43:54.172 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.CreateNewRole (Source)'
[2022-07-26 09:43:54.173 +05:30 INF] Route matched with {action = "CreateNewRole", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewRole(IMS.Models.Role) on controller IMS.Controllers.RoleController (Source).
[2022-07-26 09:43:54.173 +05:30 INF] RequestBody: {"roleId":0,"roleName":"Admin","isManagement":"false"}
[2022-07-26 09:43:54.189 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:43:54.197 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__role_RoleName_0='?' (Size = 100)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Roles] AS [r]
        WHERE ([r].[RoleName] = @__role_RoleName_0) AND ([r].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:43:54.197 +05:30 ERR] Role service : CreateRole(string roleName) : Role already exist
[2022-07-26 09:43:54.197 +05:30 INF] Role Service Time elapsed for  CreateRole(string roleName,bool isManagement) :10ms
[2022-07-26 09:43:54.198 +05:30 ERR] Role Service : CreateNewRole() : Role already exist
[2022-07-26 09:43:54.198 +05:30 INF] Executing BadRequestObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:43:54.198 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/json; charset=utf-8
Content-Length: 32
[2022-07-26 09:43:54.199 +05:30 INF] Executed action IMS.Controllers.RoleController.CreateNewRole (Source) in 25.8156ms
[2022-07-26 09:43:54.199 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.CreateNewRole (Source)'
[2022-07-26 09:43:54.199 +05:30 INF] ResponseBody: {"message":"Role already exist"}
[2022-07-26 09:43:54.199 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Role/CreateNewRole application/json 54 - 400 32 application/json;+charset=utf-8 28.2465ms
[2022-07-26 09:44:21.284 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0
[2022-07-26 09:44:21.285 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:21.285 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/AddPoolMember
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:44:21.285 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:21.288 +05:30 INF] Route matched with {action = "AddPoolMember", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddPoolMember(Int32, Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:21.297 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:21.317 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE [e].[EmployeeId] = @__poolMembers_EmployeeId_0
[2022-07-26 09:44:21.320 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:44:21.327 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32), @__poolMembers_PoolId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [PoolMembers] AS [p]
        WHERE (([p].[EmployeeId] = @__poolMembers_EmployeeId_0) AND ([p].[PoolId] = @__poolMembers_PoolId_1)) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:44:21.340 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Boolean), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [PoolMembers] ([EmployeeId], [IsActive], [PoolId])
VALUES (@p0, @p1, @p2);
SELECT [PoolMembersId]
FROM [PoolMembers]
WHERE @@ROWCOUNT = 1 AND [PoolMembersId] = scope_identity();
[2022-07-26 09:44:21.342 +05:30 INF] Pool DAL Time elapsed for AddPoolMembersToDatabase(PoolMembers poolMembers)  :49ms
[2022-07-26 09:44:21.342 +05:30 INF] Pool Service Time elapsed for  AddPoolMember(int employeeId, int poolId) :50ms
[2022-07-26 09:44:21.342 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:44:21.342 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 44
[2022-07-26 09:44:21.343 +05:30 INF] Executed action IMS.Controllers.PoolController.AddPoolMember (Source) in 54.8284ms
[2022-07-26 09:44:21.343 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:21.343 +05:30 INF] RequestBody: 
[2022-07-26 09:44:21.343 +05:30 INF] ResponseBody: {"message":"Pool Member Added Successfully"}
[2022-07-26 09:44:21.343 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0 - 200 44 application/json;+charset=utf-8 58.2749ms
[2022-07-26 09:44:21.350 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json -
[2022-07-26 09:44:21.351 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolMembers
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:44:21.351 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:44:21.351 +05:30 INF] Route matched with {action = "ViewPoolMembers", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolMembers(Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:21.352 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:21.359 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ((([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) AND ([e].[IsAdminResponded] = CAST(1 AS bit))
[2022-07-26 09:44:21.360 +05:30 INF] Pool DAL Time elapsed for GetPoolMembersFromDatabase(int poolId)  :8ms
[2022-07-26 09:44:21.360 +05:30 INF] Pool Service Time elapsed for  ViewPoolMembers(int poolId) :8ms
[2022-07-26 09:44:21.360 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType45`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:44:21.361 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 123
[2022-07-26 09:44:21.361 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolMembers (Source) in 10.0652ms
[2022-07-26 09:44:21.361 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:44:21.361 +05:30 INF] RequestBody: 
[2022-07-26 09:44:21.361 +05:30 INF] ResponseBody: [{"poolId":35,"poolMemberId":96,"employeeAceNumber":"ACE2022","employeeName":"Maggie","employeeRole":"Software Developer"}]
[2022-07-26 09:44:21.361 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json - - 200 123 application/json;+charset=utf-8 10.6848ms
[2022-07-26 09:44:31.395 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:44:31.395 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:31.395 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.4385ms
[2022-07-26 09:44:31.398 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:44:31.398 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:31.398 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:44:31.398 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:44:31.398 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:44:31.399 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:31.404 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:44:31.405 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :5ms
[2022-07-26 09:44:31.405 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :5ms
[2022-07-26 09:44:31.405 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:44:31.405 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:44:31.405 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 6.6748ms
[2022-07-26 09:44:31.405 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:44:31.405 +05:30 INF] RequestBody: 
[2022-07-26 09:44:31.405 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:44:31.405 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 7.6803ms
[2022-07-26 09:44:31.626 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=74&poolId=35 application/json 0
[2022-07-26 09:44:31.626 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:31.627 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/AddPoolMember
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:44:31.628 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:31.628 +05:30 INF] Route matched with {action = "AddPoolMember", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddPoolMember(Int32, Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:31.629 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:31.636 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE [e].[EmployeeId] = @__poolMembers_EmployeeId_0
[2022-07-26 09:44:31.639 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:44:31.646 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32), @__poolMembers_PoolId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [PoolMembers] AS [p]
        WHERE (([p].[EmployeeId] = @__poolMembers_EmployeeId_0) AND ([p].[PoolId] = @__poolMembers_PoolId_1)) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:44:31.652 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Boolean), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [PoolMembers] ([EmployeeId], [IsActive], [PoolId])
VALUES (@p0, @p1, @p2);
SELECT [PoolMembersId]
FROM [PoolMembers]
WHERE @@ROWCOUNT = 1 AND [PoolMembersId] = scope_identity();
[2022-07-26 09:44:31.664 +05:30 INF] Pool DAL Time elapsed for AddPoolMembersToDatabase(PoolMembers poolMembers)  :35ms
[2022-07-26 09:44:31.664 +05:30 INF] Pool Service Time elapsed for  AddPoolMember(int employeeId, int poolId) :35ms
[2022-07-26 09:44:31.664 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:44:31.664 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 44
[2022-07-26 09:44:31.665 +05:30 INF] Executed action IMS.Controllers.PoolController.AddPoolMember (Source) in 37.0705ms
[2022-07-26 09:44:31.665 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:31.665 +05:30 INF] RequestBody: 
[2022-07-26 09:44:31.665 +05:30 INF] ResponseBody: {"message":"Pool Member Added Successfully"}
[2022-07-26 09:44:31.665 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=74&poolId=35 application/json 0 - 200 44 application/json;+charset=utf-8 38.8795ms
[2022-07-26 09:44:31.674 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json -
[2022-07-26 09:44:31.674 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolMembers
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:44:31.674 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:44:31.675 +05:30 INF] Route matched with {action = "ViewPoolMembers", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolMembers(Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:31.676 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:31.686 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ((([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) AND ([e].[IsAdminResponded] = CAST(1 AS bit))
[2022-07-26 09:44:31.686 +05:30 INF] Pool DAL Time elapsed for GetPoolMembersFromDatabase(int poolId)  :11ms
[2022-07-26 09:44:31.686 +05:30 INF] Pool Service Time elapsed for  ViewPoolMembers(int poolId) :11ms
[2022-07-26 09:44:31.687 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType45`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:44:31.687 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 252
[2022-07-26 09:44:31.687 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolMembers (Source) in 12.4567ms
[2022-07-26 09:44:31.687 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-26 09:44:31.687 +05:30 INF] RequestBody: 
[2022-07-26 09:44:31.687 +05:30 INF] ResponseBody: [{"poolId":35,"poolMemberId":96,"employeeAceNumber":"ACE2022","employeeName":"Maggie","employeeRole":"Software Developer"},{"poolId":35,"poolMemberId":97,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeRole":"Senior Software Developer"}]
[2022-07-26 09:44:31.687 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=35 application/json - - 200 252 application/json;+charset=utf-8 13.6018ms
[2022-07-26 09:44:36.568 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:44:36.569 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:36.569 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.5504ms
[2022-07-26 09:44:36.570 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:44:36.570 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:36.570 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:44:36.570 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:44:36.570 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:44:36.571 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:44:36.572 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:44:36.572 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:44:36.572 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 1.8005ms
[2022-07-26 09:44:36.572 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:44:36.572 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-099be142ee961fcb9f4f12d5ca9a68bd-7b080f37b5f8753c-00"}
[2022-07-26 09:44:36.573 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 2.4173ms
[2022-07-26 09:44:38.487 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0
[2022-07-26 09:44:38.488 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:38.488 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/AddPoolMember
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:44:38.488 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:38.488 +05:30 INF] Route matched with {action = "AddPoolMember", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddPoolMember(Int32, Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:38.490 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:38.491 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE [e].[EmployeeId] = @__poolMembers_EmployeeId_0
[2022-07-26 09:44:38.493 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:44:38.494 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32), @__poolMembers_PoolId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [PoolMembers] AS [p]
        WHERE (([p].[EmployeeId] = @__poolMembers_EmployeeId_0) AND ([p].[PoolId] = @__poolMembers_PoolId_1)) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:44:38.494 +05:30 INF] Pool DAL Time elapsed for AddPoolMembersToDatabase(PoolMembers poolMembers)  :5ms
[2022-07-26 09:44:38.495 +05:30 ERR] Pool service : AddPoolMembers(int employeeId,int poolId): Pool member already exists in the given pool
[2022-07-26 09:44:38.495 +05:30 INF] Pool Service Time elapsed for  AddPoolMember(int employeeId, int poolId) :5ms
[2022-07-26 09:44:38.496 +05:30 ERR] Pool Service :AddPoolMembers(int employeeId,int poolId) Pool member already exists in the given pool
[2022-07-26 09:44:38.496 +05:30 INF] Executing BadRequestObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:44:38.496 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/json; charset=utf-8
Content-Length: 58
[2022-07-26 09:44:38.496 +05:30 INF] Executed action IMS.Controllers.PoolController.AddPoolMember (Source) in 8.0045ms
[2022-07-26 09:44:38.497 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:38.497 +05:30 INF] RequestBody: 
[2022-07-26 09:44:38.497 +05:30 INF] ResponseBody: {"message":"Pool member already exists in the given pool"}
[2022-07-26 09:44:38.497 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0 - 400 58 application/json;+charset=utf-8 9.3666ms
[2022-07-26 09:44:46.679 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0
[2022-07-26 09:44:46.679 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:44:46.680 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Pool/AddPoolMember
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 0
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:44:46.680 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:46.680 +05:30 INF] Route matched with {action = "AddPoolMember", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddPoolMember(Int32, Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:46.681 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:46.683 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE [e].[EmployeeId] = @__poolMembers_EmployeeId_0
[2022-07-26 09:44:46.685 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:44:46.686 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__poolMembers_EmployeeId_0='?' (DbType = Int32), @__poolMembers_PoolId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [PoolMembers] AS [p]
        WHERE (([p].[EmployeeId] = @__poolMembers_EmployeeId_0) AND ([p].[PoolId] = @__poolMembers_PoolId_1)) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:44:46.686 +05:30 INF] Pool DAL Time elapsed for AddPoolMembersToDatabase(PoolMembers poolMembers)  :5ms
[2022-07-26 09:44:46.687 +05:30 ERR] Pool service : AddPoolMembers(int employeeId,int poolId): Pool member already exists in the given pool
[2022-07-26 09:44:46.687 +05:30 INF] Pool Service Time elapsed for  AddPoolMember(int employeeId, int poolId) :6ms
[2022-07-26 09:44:46.687 +05:30 ERR] Pool Service :AddPoolMembers(int employeeId,int poolId) Pool member already exists in the given pool
[2022-07-26 09:44:46.688 +05:30 INF] Executing BadRequestObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:44:46.688 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/json; charset=utf-8
Content-Length: 58
[2022-07-26 09:44:46.688 +05:30 INF] Executed action IMS.Controllers.PoolController.AddPoolMember (Source) in 8.0631ms
[2022-07-26 09:44:46.688 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.AddPoolMember (Source)'
[2022-07-26 09:44:46.688 +05:30 INF] RequestBody: 
[2022-07-26 09:44:46.688 +05:30 INF] ResponseBody: {"message":"Pool member already exists in the given pool"}
[2022-07-26 09:44:46.688 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Pool/AddPoolMember?employeeId=84&poolId=35 application/json 0 - 400 58 application/json;+charset=utf-8 9.4119ms
[2022-07-26 09:44:50.468 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:44:50.468 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:44:50.468 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:44:50.468 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:44:50.469 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:44:50.469 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:44:50.469 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:44:50.469 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:44:50.470 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:50.470 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:44:50.472 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:44:50.473 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :3ms
[2022-07-26 09:44:50.473 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-26 09:44:50.473 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:44:50.473 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:44:50.473 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.7339ms
[2022-07-26 09:44:50.473 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:44:50.473 +05:30 INF] RequestBody: 
[2022-07-26 09:44:50.473 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:44:50.474 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 6.0484ms
[2022-07-26 09:44:50.478 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:44:50.478 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :9ms
[2022-07-26 09:44:50.478 +05:30 INF] Pool Service Time elapsed for  ViewPools() :9ms
[2022-07-26 09:44:50.479 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:44:50.479 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:44:50.479 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 10.0727ms
[2022-07-26 09:44:50.479 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:44:50.479 +05:30 INF] RequestBody: 
[2022-07-26 09:44:50.479 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Major","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:44:50.479 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 11.1354ms
[2022-07-26 09:45:05.083 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:45:05.084 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:45:05.084 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:45:05.084 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:45:05.085 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:45:05.093 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:45:05.094 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :8ms
[2022-07-26 09:45:05.094 +05:30 INF] Pool Service Time elapsed for  ViewPools() :8ms
[2022-07-26 09:45:05.094 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:45:05.094 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:45:05.094 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 9.6835ms
[2022-07-26 09:45:05.094 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:45:05.094 +05:30 INF] RequestBody: 
[2022-07-26 09:45:05.094 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Major","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:45:05.094 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 10.8335ms
[2022-07-26 09:45:21.496 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Pool/EditPool?poolId=35&poolName=Capella%20Minor application/json -
[2022-07-26 09:45:21.496 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:45:21.497 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Pool/EditPool
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:45:21.497 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.EditPool (Source)'
[2022-07-26 09:45:21.500 +05:30 INF] Route matched with {action = "EditPool", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult EditPool(Int32, System.String) on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:45:21.506 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:45:21.515 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__poolName_0='?' (Size = 25)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[PoolName] = @__poolName_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:45:21.518 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [Pools] AS [p]
WHERE [p].[PoolId] = @__p_0
[2022-07-26 09:45:21.540 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@p7='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (DbType = Int32), @p3='?' (DbType = Boolean), @p4='?' (Size = 25), @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Pools] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentId] = @p2, [IsActive] = @p3, [PoolName] = @p4, [UpdatedBy] = @p5, [UpdatedOn] = @p6
WHERE [PoolId] = @p7;
SELECT @@ROWCOUNT;
[2022-07-26 09:45:21.541 +05:30 INF] Pool DAL Time elapsed for EditPoolFromDatabase(int poolId, string poolName)  :35ms
[2022-07-26 09:45:21.541 +05:30 INF] Pool Service Time elapsed for  EditPool(int poolId, string poolName) :38ms
[2022-07-26 09:45:21.541 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:45:21.541 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 44
[2022-07-26 09:45:21.542 +05:30 INF] Executed action IMS.Controllers.PoolController.EditPool (Source) in 41.5942ms
[2022-07-26 09:45:21.542 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.EditPool (Source)'
[2022-07-26 09:45:21.542 +05:30 INF] RequestBody: 
[2022-07-26 09:45:21.542 +05:30 INF] ResponseBody: {"message":"Pool name changed Successfully"}
[2022-07-26 09:45:21.542 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Pool/EditPool?poolId=35&poolName=Capella%20Minor application/json - - 200 44 application/json;+charset=utf-8 45.6881ms
[2022-07-26 09:45:23.648 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:45:23.648 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:45:23.648 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:45:23.648 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:45:23.649 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:45:23.649 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:45:23.649 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:45:23.649 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:45:23.649 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:45:23.650 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:45:23.656 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:45:23.656 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :7ms
[2022-07-26 09:45:23.656 +05:30 INF] Pool Service Time elapsed for  ViewPools() :7ms
[2022-07-26 09:45:23.656 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:45:23.657 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:45:23.657 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 8.2623ms
[2022-07-26 09:45:23.657 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:45:23.657 +05:30 INF] RequestBody: 
[2022-07-26 09:45:23.657 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:45:23.657 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 9.3818ms
[2022-07-26 09:45:23.666 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:45:23.666 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :16ms
[2022-07-26 09:45:23.666 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :16ms
[2022-07-26 09:45:23.666 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:45:23.666 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:45:23.667 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 17.6325ms
[2022-07-26 09:45:23.667 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:45:23.667 +05:30 INF] RequestBody: 
[2022-07-26 09:45:23.667 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:45:23.667 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 18.9829ms
[2022-07-26 09:46:01.228 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:46:01.228 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:46:01.229 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:46:01.229 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:46:01.229 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:46:01.229 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:46:01.230 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:46:01.230 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:46:01.231 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:46:01.231 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:46:01.233 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json -
[2022-07-26 09:46:01.234 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Location/ViewLocations
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:46:01.234 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 09:46:01.234 +05:30 INF] Route matched with {action = "ViewLocations", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLocations() on controller IMS.Controllers.LocationController (Source).
[2022-07-26 09:46:01.237 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:46:01.238 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:46:01.239 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:46:01.239 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-26 09:46:01.239 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :9ms
[2022-07-26 09:46:01.239 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:46:01.239 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :9ms
[2022-07-26 09:46:01.239 +05:30 INF] Pool Service Time elapsed for  ViewPools() :9ms
[2022-07-26 09:46:01.239 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:46:01.240 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:46:01.240 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:46:01.240 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 10.288ms
[2022-07-26 09:46:01.240 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 10.358ms
[2022-07-26 09:46:01.240 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:46:01.240 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:46:01.240 +05:30 INF] RequestBody: 
[2022-07-26 09:46:01.240 +05:30 INF] RequestBody: 
[2022-07-26 09:46:01.240 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:46:01.240 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:46:01.241 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 12.3304ms
[2022-07-26 09:46:01.241 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 12.3134ms
[2022-07-26 09:46:01.260 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [Locations] AS [l]
WHERE [l].[IsActive] = CAST(1 AS bit)
ORDER BY [l].[LocationName]
[2022-07-26 09:46:01.260 +05:30 INF] Location DAL Time elapsed for  GetLocationsFromDatabase() :24ms
[2022-07-26 09:46:01.260 +05:30 INF] Location Service Time elapsed for  ViewLocations() :24ms
[2022-07-26 09:46:01.260 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Location, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:46:01.260 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1350
[2022-07-26 09:46:01.261 +05:30 INF] Executed action IMS.Controllers.LocationController.ViewLocations (Source) in 26.6351ms
[2022-07-26 09:46:01.261 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-26 09:46:01.261 +05:30 INF] RequestBody: 
[2022-07-26 09:46:01.261 +05:30 INF] ResponseBody: [{"locationId":2,"locationName":"Bangalore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":1,"locationName":"Chennai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":8,"locationName":"Coimbatore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":4,"locationName":"Dubai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":6,"locationName":"Hyderabad","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":7,"locationName":"Kochin","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":3,"locationName":"London","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":22,"locationName":"Online","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":23,"locationName":"Sydney","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:40:46.0826397","updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]}]
[2022-07-26 09:46:01.261 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json - - 200 1350 application/json;+charset=utf-8 27.6571ms
[2022-07-26 09:46:35.164 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:46:35.164 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:46:35.165 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.8408ms
[2022-07-26 09:46:35.167 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:46:35.167 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:46:35.168 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:46:35.168 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:46:35.168 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:46:35.169 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:46:35.169 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:46:35.170 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:46:35.170 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 2.1454ms
[2022-07-26 09:46:35.170 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:46:35.171 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-c31764ba7d93d49d77e1157ddef5b7d9-0612e519fead9b77-00"}
[2022-07-26 09:46:35.171 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 3.5208ms
[2022-07-26 09:47:57.471 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/CreateDrive application/json 165
[2022-07-26 09:47:57.471 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:47:57.472 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/CreateDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 165
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:47:57.472 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.CreateDrive (Source)'
[2022-07-26 09:47:57.474 +05:30 INF] Route matched with {action = "CreateDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateDrive(IMS.Models.Drive) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:47:57.475 +05:30 INF] RequestBody: {"driveId":0,"name":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","departmentId":"1","poolId":"35","modeId":"2","locationId":"1","slotTiming":"30"}
[2022-07-26 09:47:57.505 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:47:57.513 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__drive_Name_0='?' (Size = 30), @__drive_PoolId_1='?' (DbType = Int32), @__drive_FromDate_2='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE ((([d].[Name] = @__drive_Name_0) AND ([d].[PoolId] = @__drive_PoolId_1)) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([d].[ToDate] >= @__drive_FromDate_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:47:57.531 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 4000), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = Boolean), @p6='?' (DbType = Boolean), @p7='?' (DbType = Int32), @p8='?' (DbType = Int32), @p9='?' (Size = 30), @p10='?' (DbType = Int32), @p11='?' (DbType = Double), @p12='?' (DbType = DateTime2), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Drives] ([AddedBy], [AddedOn], [CancelReason], [DepartmentId], [FromDate], [IsCancelled], [IsScheduled], [LocationId], [ModeId], [Name], [PoolId], [SlotTiming], [ToDate], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14);
SELECT [DriveId]
FROM [Drives]
WHERE @@ROWCOUNT = 1 AND [DriveId] = scope_identity();
[2022-07-26 09:47:57.538 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[EmployeeId]
FROM [PoolMembers] AS [p]
WHERE ([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:47:57.547 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeDriveResponse] ([DriveId], [EmployeeId], [ResponseType])
VALUES (@p0, @p1, @p2);
SELECT [ResponseId]
FROM [EmployeeDriveResponse]
WHERE @@ROWCOUNT = 1 AND [ResponseId] = scope_identity();
[2022-07-26 09:47:57.548 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeDriveResponse] ([DriveId], [EmployeeId], [ResponseType])
VALUES (@p0, @p1, @p2);
SELECT [ResponseId]
FROM [EmployeeDriveResponse]
WHERE @@ROWCOUNT = 1 AND [ResponseId] = scope_identity();
[2022-07-26 09:47:57.549 +05:30 INF] Drive DAL Time elapsed for AddDriveToDatabase(Drive drive)  :44ms
[2022-07-26 09:47:57.549 +05:30 INF] Drive Service Time elapsed for  CreateDrive(Drive drive) :48ms
[2022-07-26 09:47:57.549 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:47:57.549 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 40
[2022-07-26 09:47:57.549 +05:30 INF] Executed action IMS.Controllers.DriveController.CreateDrive (Source) in 74.4069ms
[2022-07-26 09:47:57.549 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.CreateDrive (Source)'
[2022-07-26 09:47:57.549 +05:30 INF] ResponseBody: {"message":"Drive Created Successfully"}
[2022-07-26 09:47:57.549 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/CreateDrive application/json 165 - 200 40 application/json;+charset=utf-8 78.2504ms
[2022-07-26 09:48:43.644 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/CreateDrive application/json 164
[2022-07-26 09:48:43.644 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:48:43.645 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/CreateDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 164
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:48:43.645 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.CreateDrive (Source)'
[2022-07-26 09:48:43.645 +05:30 INF] Route matched with {action = "CreateDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateDrive(IMS.Models.Drive) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:48:43.646 +05:30 INF] RequestBody: {"driveId":0,"name":"Capella Drive 2","fromDate":"2022-08-03","toDate":"2022-08-03","departmentId":"1","poolId":"35","modeId":"1","locationId":22,"slotTiming":"30"}
[2022-07-26 09:48:43.650 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:48:43.666 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__drive_Name_0='?' (Size = 30), @__drive_PoolId_1='?' (DbType = Int32), @__drive_FromDate_2='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE ((([d].[Name] = @__drive_Name_0) AND ([d].[PoolId] = @__drive_PoolId_1)) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([d].[ToDate] >= @__drive_FromDate_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:48:43.674 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 4000), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = Boolean), @p6='?' (DbType = Boolean), @p7='?' (DbType = Int32), @p8='?' (DbType = Int32), @p9='?' (Size = 30), @p10='?' (DbType = Int32), @p11='?' (DbType = Double), @p12='?' (DbType = DateTime2), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Drives] ([AddedBy], [AddedOn], [CancelReason], [DepartmentId], [FromDate], [IsCancelled], [IsScheduled], [LocationId], [ModeId], [Name], [PoolId], [SlotTiming], [ToDate], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14);
SELECT [DriveId]
FROM [Drives]
WHERE @@ROWCOUNT = 1 AND [DriveId] = scope_identity();
[2022-07-26 09:48:43.676 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[EmployeeId]
FROM [PoolMembers] AS [p]
WHERE ([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:48:43.679 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeDriveResponse] ([DriveId], [EmployeeId], [ResponseType])
VALUES (@p0, @p1, @p2);
SELECT [ResponseId]
FROM [EmployeeDriveResponse]
WHERE @@ROWCOUNT = 1 AND [ResponseId] = scope_identity();
[2022-07-26 09:48:43.680 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeDriveResponse] ([DriveId], [EmployeeId], [ResponseType])
VALUES (@p0, @p1, @p2);
SELECT [ResponseId]
FROM [EmployeeDriveResponse]
WHERE @@ROWCOUNT = 1 AND [ResponseId] = scope_identity();
[2022-07-26 09:48:43.681 +05:30 INF] Drive DAL Time elapsed for AddDriveToDatabase(Drive drive)  :31ms
[2022-07-26 09:48:43.681 +05:30 INF] Drive Service Time elapsed for  CreateDrive(Drive drive) :31ms
[2022-07-26 09:48:43.681 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:48:43.681 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 40
[2022-07-26 09:48:43.681 +05:30 INF] Executed action IMS.Controllers.DriveController.CreateDrive (Source) in 35.5759ms
[2022-07-26 09:48:43.681 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.CreateDrive (Source)'
[2022-07-26 09:48:43.681 +05:30 INF] ResponseBody: {"message":"Drive Created Successfully"}
[2022-07-26 09:48:43.681 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/CreateDrive application/json 164 - 200 40 application/json;+charset=utf-8 37.1259ms
[2022-07-26 09:48:48.361 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:48:48.361 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:48:48.362 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.3908ms
[2022-07-26 09:48:48.376 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:48:48.376 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:48:48.377 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:48:48.377 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:48:48.377 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:48:48.377 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:48:48.379 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:48:48.379 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:48:48.387 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 9.9725ms
[2022-07-26 09:48:48.387 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:48:48.387 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-943b2bb99232247bd50b6d17d082ff68-dabe24c5ae5ba3a8-00"}
[2022-07-26 09:48:48.387 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 11.7255ms
[2022-07-26 09:49:24.363 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:49:24.363 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:49:24.363 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 1.0530ms
[2022-07-26 09:49:24.367 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43
[2022-07-26 09:49:24.367 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:49:24.367 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:49:24.367 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:49:24.367 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:49:24.368 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"React"}
[2022-07-26 09:49:24.382 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:49:24.390 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:49:24.402 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Departments] ([AddedBy], [AddedOn], [DepartmentName], [IsActive], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [DepartmentId]
FROM [Departments]
WHERE @@ROWCOUNT = 1 AND [DepartmentId] = scope_identity();
[2022-07-26 09:49:24.413 +05:30 INF] Department DAL Time elapsed for  createDeaprtment(string departmentName) :34ms
[2022-07-26 09:49:24.413 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :41ms
[2022-07-26 09:49:24.414 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:49:24.414 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 43
[2022-07-26 09:49:24.414 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 46.7083ms
[2022-07-26 09:49:24.414 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:49:24.414 +05:30 INF] ResponseBody: {"message":"Department Added Successfully"}
[2022-07-26 09:49:24.414 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43 - 200 43 application/json;+charset=utf-8 47.6919ms
[2022-07-26 09:49:38.914 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:49:38.914 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:49:38.915 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 1.2186ms
[2022-07-26 09:49:38.917 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 42
[2022-07-26 09:49:38.917 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:49:38.917 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 42
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:49:38.917 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:49:38.917 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:49:38.917 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"Mean"}
[2022-07-26 09:49:38.918 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:49:38.921 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:49:38.928 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Departments] ([AddedBy], [AddedOn], [DepartmentName], [IsActive], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [DepartmentId]
FROM [Departments]
WHERE @@ROWCOUNT = 1 AND [DepartmentId] = scope_identity();
[2022-07-26 09:49:38.942 +05:30 INF] Department DAL Time elapsed for  createDeaprtment(string departmentName) :23ms
[2022-07-26 09:49:38.942 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :23ms
[2022-07-26 09:49:38.942 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:49:38.942 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 43
[2022-07-26 09:49:38.942 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 25.1871ms
[2022-07-26 09:49:38.943 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:49:38.943 +05:30 INF] ResponseBody: {"message":"Department Added Successfully"}
[2022-07-26 09:49:38.943 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 42 - 200 43 application/json;+charset=utf-8 26.0735ms
[2022-07-26 09:50:22.807 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:50:22.807 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:50:22.808 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.7388ms
[2022-07-26 09:50:22.809 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:50:22.810 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:50:22.812 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:50:22.812 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:50:22.812 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:50:22.812 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:50:22.813 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:50:22.813 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:50:22.813 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 0.8942ms
[2022-07-26 09:50:22.813 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:50:22.813 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-497b379894a61476fc81786b4d03e3d1-9bdd1f79622ee3c8-00"}
[2022-07-26 09:50:22.813 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 4.0832ms
[2022-07-26 09:50:53.036 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:50:53.036 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:50:53.037 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 1.0771ms
[2022-07-26 09:50:53.068 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:50:53.069 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:50:53.078 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:50:53.078 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:50:53.078 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:50:53.079 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:50:53.080 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:50:53.080 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:50:53.081 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 2.1541ms
[2022-07-26 09:50:53.081 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:50:53.081 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-1cdf266594642a4dd5e71bcc40a6a8f7-e3de62299d799135-00"}
[2022-07-26 09:50:53.081 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 12.9301ms
[2022-07-26 09:51:11.632 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:51:11.632 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:51:11.634 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 1.6559ms
[2022-07-26 09:51:11.635 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:51:11.635 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:51:11.637 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:51:11.637 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:51:11.637 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:51:11.638 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:51:11.639 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:51:11.639 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:51:11.640 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 2.0103ms
[2022-07-26 09:51:11.640 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:51:11.640 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-47c56b9cf20b577809aadb965961a57c-ec8511febf2d431e-00"}
[2022-07-26 09:51:11.640 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 4.9306ms
[2022-07-26 09:51:58.274 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:51:58.274 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:51:58.275 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.7994ms
[2022-07-26 09:51:58.279 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18
[2022-07-26 09:51:58.279 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:51:58.280 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 18
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:51:58.280 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:51:58.280 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:51:58.281 +05:30 INF] RequestBody: {"departmentId":0}
[2022-07-26 09:51:58.282 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
[2022-07-26 09:51:58.282 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/problem+json; charset=utf-8
Content-Length: 261
[2022-07-26 09:51:58.301 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 20.8ms
[2022-07-26 09:51:58.301 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:51:58.301 +05:30 INF] ResponseBody: {"errors":{"DepartmentName":["The DepartmentName field is required."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-300a7ba35366712479a2142d8b43fed9-24edeb9571201e07-00"}
[2022-07-26 09:51:58.302 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 18 - 400 261 application/problem+json;+charset=utf-8 22.6855ms
[2022-07-26 09:52:04.066 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 09:52:04.067 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:52:04.068 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:52:04.068 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:52:04.068 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:52:04.068 +05:30 INF] RequestBody: {"emailId":"arnold@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:52:04.069 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:52:04.075 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:52:04.078 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:52:04.084 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:52:04.089 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:52:04.104 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:52:04.105 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :36ms
[2022-07-26 09:52:04.105 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :36ms
[2022-07-26 09:52:04.106 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :37ms
[2022-07-26 09:52:04.106 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:52:04.106 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 883
[2022-07-26 09:52:04.106 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 38.3645ms
[2022-07-26 09:52:04.106 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:52:04.106 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..PtgWion7swYoJMf1T86BAg.6Xi5VfDc_2N7HpBZPIp5Po5zUzbpcIGd9M5MBlZRYU0iA9cDgF9oeqJVloB0LPkpNLPciiRMO1NY0QlqDTNPtoaArty1haCfXJClPG6UecVOl2-PBJnbWvoVDyoiQDkkTeI4AnIvdzqGqDSWpXdSr51BXzgKrjY3gMj2AoUzZ-8kk90gccNirmdeXT_0XCvKD8FnAdJmFAMtEDdn4Ba7Gk3jP9iFNS8l-z6F9JGfmdPngaiKCmbudLz_Os4WPEW0dXPoCHib6Lm64WjRXBDHMqm3nsGU0UPClSV4jDDo5XLoHZA7mf1siy3K6J8v6lyBvHWyCg1nuwKbbHZBRylC7soj7BaD_UuQohtUTi0VFPRmW7lIU44C9dki01i5gtbwhJ3SNlLaJIXi6LF1buU6kajkeTXRy008lH8_OOlh8HH-65bv6lsn7UwtJfV1mEHgTlY3zaRjo95vDiOrWu8fBLOapjlRPEzh5hYeKXqm3Q9pVstFggld0TzRSoJC8DqHbeifN908iVzi_0iSrkUPxpD1NS0OXVDVmk50RA6QxQBo2Y89Kn2BkebYKuSn_JhF0H9zoagLQw-VuLuAYKlRXSCYzjFxmqhLOiSSHVZsc7Q.MDt3xeJ3sFlrwzJqgUXSqeCInv82O12QcFoQPfXjy4E","expiryInMinutes":360,"userHash":"3fc90e88bbe900077c96b0253ce7d279ac5646ac5d8335dea8ea9e4f98c6c582","userName":"Arnold"}
[2022-07-26 09:52:04.106 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 883 application/json;+charset=utf-8 40.0765ms
[2022-07-26 09:52:08.121 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json -
[2022-07-26 09:52:08.122 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewInvitesByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:52:08.122 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:52:08.122 +05:30 INF] Route matched with {action = "ViewInvitesByID", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewInvitesByID() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:52:08.133 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:52:08.139 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[DriveId]
FROM [EmployeeDriveResponse] AS [e]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = 0)
[2022-07-26 09:52:08.139 +05:30 INF] Drive DAL Time elapsed for IsResponded(int employeeId, int driveId)  :16ms
[2022-07-26 09:52:08.152 +05:30 INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] IN (54, 55, 57, 59, 65, 67, 71, 72)
[2022-07-26 09:52:08.153 +05:30 INF] Drive Service Time elapsed for  ViewDriveInvites(int employeeId) :30ms
[2022-07-26 09:52:08.154 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType27`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:52:08.154 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1558
[2022-07-26 09:52:08.154 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewInvitesByID (Source) in 32.5752ms
[2022-07-26 09:52:08.154 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:52:08.154 +05:30 INF] RequestBody: 
[2022-07-26 09:52:08.154 +05:30 INF] ResponseBody: [{"driveId":54,"driveName":"Cloud Developer","fromDate":"2022-07-28","toDate":"2022-07-29","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online","poolId":26,"driveTiming":30.0},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":90.0},{"driveId":59,"driveName":"Hydra Net","fromDate":"2022-08-01","toDate":"2022-08-04","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":30.0},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":60.0},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0},{"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline","poolId":35,"driveTiming":30.0},{"driveId":72,"driveName":"Capella Drive 2","fromDate":"2022-08-03","toDate":"2022-08-03","driveLocation":"Online","drivePool":"Capella Minor","driveMode":"Online","poolId":35,"driveTiming":30.0}]
[2022-07-26 09:52:08.155 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json - - 200 1558 application/json;+charset=utf-8 34.0067ms
[2022-07-26 09:53:21.247 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/AddResponse application/json 61
[2022-07-26 09:53:21.248 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:21.258 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/AddResponse
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 61
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:53:21.258 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.AddResponse (Source)'
[2022-07-26 09:53:21.261 +05:30 INF] Route matched with {action = "AddResponse", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddResponse(IMS.Models.EmployeeDriveResponse) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:21.262 +05:30 INF] RequestBody: {"responseId":0,"driveId":72,"employeeId":0,"responseType":2}
[2022-07-26 09:53:21.279 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:21.290 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__userResponse_DriveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__userResponse_DriveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:21.300 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__userResponse_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmployeeId] = @__userResponse_EmployeeId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:21.310 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__userResponse_DriveId_0='?' (DbType = Int32), @__userResponse_EmployeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeDriveResponse] AS [e]
        WHERE (([e].[DriveId] = @__userResponse_DriveId_0) AND ([e].[EmployeeId] = @__userResponse_EmployeeId_1)) AND ([e].[ResponseType] <> 0)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:21.321 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__userResponse_EmployeeId_0='?' (DbType = Int32), @__userResponse_DriveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType]
FROM [EmployeeDriveResponse] AS [e]
WHERE ([e].[EmployeeId] = @__userResponse_EmployeeId_0) AND ([e].[DriveId] = @__userResponse_DriveId_1)
[2022-07-26 09:53:21.330 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [EmployeeDriveResponse] SET [DriveId] = @p0, [EmployeeId] = @p1, [ResponseType] = @p2
WHERE [ResponseId] = @p3;
SELECT @@ROWCOUNT;
[2022-07-26 09:53:21.331 +05:30 INF] Drive DAL Time elapsed for AddResponseToDatabase(EmployeeDriveResponse userResponse)  :54ms
[2022-07-26 09:53:21.331 +05:30 INF] Drive Service Time elapsed for  AddResponse(EmployeeDriveResponse response) :59ms
[2022-07-26 09:53:21.331 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:21.332 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 40
[2022-07-26 09:53:21.332 +05:30 INF] Executed action IMS.Controllers.DriveController.AddResponse (Source) in 70.6953ms
[2022-07-26 09:53:21.332 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.AddResponse (Source)'
[2022-07-26 09:53:21.332 +05:30 INF] ResponseBody: {"message":"Response added sucessfully"}
[2022-07-26 09:53:21.332 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/AddResponse application/json 61 - 200 40 application/json;+charset=utf-8 84.6205ms
[2022-07-26 09:53:21.354 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json -
[2022-07-26 09:53:21.355 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewInvitesByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:53:21.355 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:53:21.355 +05:30 INF] Route matched with {action = "ViewInvitesByID", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewInvitesByID() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:21.356 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:21.360 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[DriveId]
FROM [EmployeeDriveResponse] AS [e]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = 0)
[2022-07-26 09:53:21.360 +05:30 INF] Drive DAL Time elapsed for IsResponded(int employeeId, int driveId)  :4ms
[2022-07-26 09:53:21.373 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] IN (54, 55, 57, 59, 65, 67, 71)
[2022-07-26 09:53:21.375 +05:30 INF] Drive Service Time elapsed for  ViewDriveInvites(int employeeId) :19ms
[2022-07-26 09:53:21.375 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType27`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:53:21.375 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1362
[2022-07-26 09:53:21.376 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewInvitesByID (Source) in 20.5136ms
[2022-07-26 09:53:21.376 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewInvitesByID (Source)'
[2022-07-26 09:53:21.376 +05:30 INF] RequestBody: 
[2022-07-26 09:53:21.376 +05:30 INF] ResponseBody: [{"driveId":54,"driveName":"Cloud Developer","fromDate":"2022-07-28","toDate":"2022-07-29","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online","poolId":26,"driveTiming":30.0},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":90.0},{"driveId":59,"driveName":"Hydra Net","fromDate":"2022-08-01","toDate":"2022-08-04","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":30.0},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline","poolId":25,"driveTiming":60.0},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online","poolId":25,"driveTiming":60.0},{"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline","poolId":35,"driveTiming":30.0}]
[2022-07-26 09:53:21.376 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewInvitesByID application/json - - 200 1362 application/json;+charset=utf-8 22.1828ms
[2022-07-26 09:53:28.722 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json -
[2022-07-26 09:53:28.726 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json -
[2022-07-26 09:53:28.727 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailabilty
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:53:28.727 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:53:28.732 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:53:28.734 +05:30 INF] Route matched with {action = "ViewAvailabilty", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailabilty(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:28.733 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:53:28.738 +05:30 INF] Route matched with {action = "ViewDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:28.742 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:28.746 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:28.786 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__driveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[DriveId] = @__driveId_1)
[2022-07-26 09:53:28.786 +05:30 INF] Drive DAL Time elapsed for ViewAvailability(int employeeId, int driveId)  :44ms
[2022-07-26 09:53:28.786 +05:30 INF] Drive Service Time elapsed for  ViewAvailabilty(int employeeId, int driveId) :47ms
[2022-07-26 09:53:28.786 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType28`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:53:28.790 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-26 09:53:28.790 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailabilty (Source) in 55.9969ms
[2022-07-26 09:53:28.790 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:53:28.790 +05:30 INF] RequestBody: 
[2022-07-26 09:53:28.790 +05:30 INF] ResponseBody: []
[2022-07-26 09:53:28.791 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json - - 200 2 application/json;+charset=utf-8 64.4020ms
[2022-07-26 09:53:28.804 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] = @__driveId_0
[2022-07-26 09:53:28.805 +05:30 INF] Drive DAL Time elapsed for ViewDrive(int driveId)  :60ms
[2022-07-26 09:53:28.805 +05:30 INF] Drive Service Time elapsed for  ViewDrive(int driveId) :63ms
[2022-07-26 09:53:28.805 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType26`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:28.811 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 209
[2022-07-26 09:53:28.811 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDrive (Source) in 73.2551ms
[2022-07-26 09:53:28.811 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:53:28.811 +05:30 INF] RequestBody: 
[2022-07-26 09:53:28.811 +05:30 INF] ResponseBody: {"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","slotTiming":30.0,"driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"}
[2022-07-26 09:53:28.811 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json - - 200 209 application/json;+charset=utf-8 88.9350ms
[2022-07-26 09:53:41.701 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:53:41.701 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:41.701 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.5815ms
[2022-07-26 09:53:41.704 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43
[2022-07-26 09:53:41.704 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:41.705 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:53:41.705 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:53:41.705 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:53:41.706 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"Admin"}
[2022-07-26 09:53:41.708 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:41.717 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:41.723 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Departments] ([AddedBy], [AddedOn], [DepartmentName], [IsActive], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [DepartmentId]
FROM [Departments]
WHERE @@ROWCOUNT = 1 AND [DepartmentId] = scope_identity();
[2022-07-26 09:53:41.724 +05:30 INF] Department DAL Time elapsed for  createDeaprtment(string departmentName) :17ms
[2022-07-26 09:53:41.724 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :17ms
[2022-07-26 09:53:41.724 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:41.724 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 43
[2022-07-26 09:53:41.724 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 19.1577ms
[2022-07-26 09:53:41.724 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:53:41.724 +05:30 INF] ResponseBody: {"message":"Department Added Successfully"}
[2022-07-26 09:53:41.724 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43 - 200 43 application/json;+charset=utf-8 20.5903ms
[2022-07-26 09:53:48.210 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:53:48.210 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:48.210 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.8596ms
[2022-07-26 09:53:48.214 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43
[2022-07-26 09:53:48.214 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:48.225 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:53:48.225 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:53:48.225 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:53:48.225 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"Admin"}
[2022-07-26 09:53:48.227 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:48.228 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:48.384 +05:30 ERR] Department Service : CreateDepartment(string departmentName) : Department already exist :    at IMS.DataAccessLayer.DepartmentDataAccessLayer.AddDepartmentToDatabase(Department department) in C:\Users\vinoth.jayakumar\Documents\GITHUB\Project\Source\InterviewManagementSystemAPI\IMS.API\DataAcessLayer\Department\DepartmentDataAccessLayer.cs:line 42
   at IMS.Service.DepartmentService.CreateDepartment(Department department) in C:\Users\vinoth.jayakumar\Documents\GITHUB\Project\Source\InterviewManagementSystemAPI\IMS.API\Services\Department\DepartmentService.cs:line 46
[2022-07-26 09:53:48.384 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :158ms
[2022-07-26 09:53:48.385 +05:30 ERR] Department Controller : CreateDepartment(string departmentName):Department already exist : Department already exist
[2022-07-26 09:53:48.385 +05:30 INF] Executing BadRequestObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:48.385 +05:30 INF] Response:
StatusCode: 400
Content-Type: application/json; charset=utf-8
Content-Length: 38
[2022-07-26 09:53:48.386 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 160.5851ms
[2022-07-26 09:53:48.386 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:53:48.386 +05:30 INF] ResponseBody: {"message":"Department already exist"}
[2022-07-26 09:53:48.386 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43 - 400 38 application/json;+charset=utf-8 172.1199ms
[2022-07-26 09:53:50.123 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 123
[2022-07-26 09:53:50.123 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:50.124 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/SetTimeSlot
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 123
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:53:50.124 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:53:50.135 +05:30 INF] Route matched with {action = "SetTimeSlot", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult SetTimeSlot(IMS.Models.EmployeeAvailability) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:50.136 +05:30 INF] RequestBody: {"employeeAvailabilityId":0,"driveId":"71","employeeId":1,"interviewDate":"2022-08-02","fromTime":"10:00","toTime":"10:30"}
[2022-07-26 09:53:50.174 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:50.191 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:53:50.191 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:50.193 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 1.4378ms
[2022-07-26 09:53:50.199 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32), @__employeeAvailability_InterviewDate_2='?' (DbType = DateTime2), @__employeeAvailability_From_TimeOfDay_3='?' (DbType = Time), @__employeeAvailability_To_TimeOfDay_4='?' (DbType = Time)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeAvailability] AS [e]
        WHERE ((([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[InterviewDate] = @__employeeAvailability_InterviewDate_2)) AND (((@__employeeAvailability_From_TimeOfDay_3 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_From_TimeOfDay_3 <= CONVERT(time, [e].[To]))) OR ((@__employeeAvailability_To_TimeOfDay_4 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_To_TimeOfDay_4 <= CONVERT(time, [e].[To]))))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.199 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:53:50.200 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:50.200 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:53:50.200 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:53:50.201 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:53:50.202 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:50.206 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:53:50.206 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :5ms
[2022-07-26 09:53:50.206 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :5ms
[2022-07-26 09:53:50.206 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:53:50.207 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1961
[2022-07-26 09:53:50.207 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 6.321ms
[2022-07-26 09:53:50.207 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:53:50.207 +05:30 INF] RequestBody: 
[2022-07-26 09:53:50.207 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":31,"departmentName":"Admin","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:53:41.7064459","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":30,"departmentName":"Mean","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:49:38.9183182","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":29,"departmentName":"React","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:49:24.3733197","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:53:50.207 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1961 application/json;+charset=utf-8 7.9713ms
[2022-07-26 09:53:50.221 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeDriveResponse] AS [e]
        WHERE (([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[ResponseType] = 2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.238 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeAvailability_DriveId_0='?' (DbType = Int32), @__employeeAvailability_InterviewDate_Date_1='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE (([d].[DriveId] = @__employeeAvailability_DriveId_0) AND (CONVERT(date, [d].[FromDate]) <= @__employeeAvailability_InterviewDate_Date_1)) AND (CONVERT(date, [d].[ToDate]) >= @__employeeAvailability_InterviewDate_Date_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.252 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:53:50.272 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@p0='?' (Size = 40), @p1='?' (Size = 40), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = DateTime2), @p6='?' (DbType = Boolean), @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeAvailability] ([CancellationReason], [Comments], [DriveId], [EmployeeId], [From], [InterviewDate], [IsInterviewCancelled], [IsInterviewScheduled], [To])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8);
SELECT [EmployeeAvailabilityId]
FROM [EmployeeAvailability]
WHERE @@ROWCOUNT = 1 AND [EmployeeAvailabilityId] = scope_identity();
[2022-07-26 09:53:50.274 +05:30 INF] Drive DAL Time elapsed for SetTimeSlotToDatabase(EmployeeAvailability employeeAvailability)  :101ms
[2022-07-26 09:53:50.274 +05:30 INF] Drive Service Time elapsed for  SetTimeSlot(EmployeeAvailability employeeAvailability) :115ms
[2022-07-26 09:53:50.274 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:50.274 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 47
[2022-07-26 09:53:50.275 +05:30 INF] Executed action IMS.Controllers.DriveController.SetTimeSlot (Source) in 139.1808ms
[2022-07-26 09:53:50.275 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:53:50.275 +05:30 INF] ResponseBody: {"message":"Availability recorded sucessfully"}
[2022-07-26 09:53:50.275 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 123 - 200 47 application/json;+charset=utf-8 151.7865ms
[2022-07-26 09:53:50.333 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/AddResponse application/json 63
[2022-07-26 09:53:50.334 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:50.335 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/AddResponse
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 63
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:53:50.335 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.AddResponse (Source)'
[2022-07-26 09:53:50.335 +05:30 INF] Route matched with {action = "AddResponse", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AddResponse(IMS.Models.EmployeeDriveResponse) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:50.336 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json -
[2022-07-26 09:53:50.336 +05:30 INF] RequestBody: {"responseId":0,"driveId":"71","employeeId":0,"responseType":1}
[2022-07-26 09:53:50.336 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailabilty
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:53:50.337 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:53:50.337 +05:30 INF] Route matched with {action = "ViewAvailabilty", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailabilty(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:53:50.337 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:50.338 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:50.342 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__userResponse_DriveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__userResponse_DriveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.347 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__userResponse_EmployeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmployeeId] = @__userResponse_EmployeeId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.348 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__driveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[DriveId] = @__driveId_1)
[2022-07-26 09:53:50.348 +05:30 INF] Drive DAL Time elapsed for ViewAvailability(int employeeId, int driveId)  :10ms
[2022-07-26 09:53:50.348 +05:30 INF] Drive Service Time elapsed for  ViewAvailabilty(int employeeId, int driveId) :11ms
[2022-07-26 09:53:50.349 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType28`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:53:50.352 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 126
[2022-07-26 09:53:50.352 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailabilty (Source) in 15.3467ms
[2022-07-26 09:53:50.352 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:53:50.352 +05:30 INF] RequestBody: 
[2022-07-26 09:53:50.352 +05:30 INF] ResponseBody: [{"driveName":"Capella Drive 1","date":"2022-08-02T00:00:00","fromTime":"2022-07-26T10:00:00","toTime":"2022-07-26T10:30:00"}]
[2022-07-26 09:53:50.352 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json - - 200 126 application/json;+charset=utf-8 16.5914ms
[2022-07-26 09:53:50.355 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__userResponse_DriveId_0='?' (DbType = Int32), @__userResponse_EmployeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeDriveResponse] AS [e]
        WHERE (([e].[DriveId] = @__userResponse_DriveId_0) AND ([e].[EmployeeId] = @__userResponse_EmployeeId_1)) AND ([e].[ResponseType] <> 0)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:50.360 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__userResponse_EmployeeId_0='?' (DbType = Int32), @__userResponse_DriveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType]
FROM [EmployeeDriveResponse] AS [e]
WHERE ([e].[EmployeeId] = @__userResponse_EmployeeId_0) AND ([e].[DriveId] = @__userResponse_DriveId_1)
[2022-07-26 09:53:50.368 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [EmployeeDriveResponse] SET [DriveId] = @p0, [EmployeeId] = @p1, [ResponseType] = @p2
WHERE [ResponseId] = @p3;
SELECT @@ROWCOUNT;
[2022-07-26 09:53:50.370 +05:30 INF] Drive DAL Time elapsed for AddResponseToDatabase(EmployeeDriveResponse userResponse)  :33ms
[2022-07-26 09:53:50.370 +05:30 INF] Drive Service Time elapsed for  AddResponse(EmployeeDriveResponse response) :33ms
[2022-07-26 09:53:50.370 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:50.370 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 40
[2022-07-26 09:53:50.370 +05:30 INF] Executed action IMS.Controllers.DriveController.AddResponse (Source) in 35.0697ms
[2022-07-26 09:53:50.370 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.AddResponse (Source)'
[2022-07-26 09:53:50.370 +05:30 INF] ResponseBody: {"message":"Response added sucessfully"}
[2022-07-26 09:53:50.371 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/AddResponse application/json 63 - 200 40 application/json;+charset=utf-8 37.1225ms
[2022-07-26 09:53:59.905 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:53:59.906 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:59.906 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.4811ms
[2022-07-26 09:53:59.911 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:53:59.911 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:53:59.922 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:53:59.923 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:53:59.923 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:53:59.923 +05:30 INF] RequestBody: {"departmentId":31,"departmentName":"Admin"}
[2022-07-26 09:53:59.925 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:53:59.933 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:59.937 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:59.948 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[DepartmentId] = @__deparmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:59.948 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :23ms
[2022-07-26 09:53:59.954 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__department_DepartmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:53:59.963 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@p6='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Departments] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentName] = @p2, [IsActive] = @p3, [UpdatedBy] = @p4, [UpdatedOn] = @p5
WHERE [DepartmentId] = @p6;
SELECT @@ROWCOUNT;
[2022-07-26 09:53:59.964 +05:30 INF] Department DAL Time elapsed for RemoveDepartmentFromDatabase(int departmentId)  :23ms
[2022-07-26 09:53:59.964 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :40ms
[2022-07-26 09:53:59.964 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:53:59.965 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:53:59.965 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 42.0654ms
[2022-07-26 09:53:59.965 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:53:59.965 +05:30 INF] ResponseBody: {"message":"Department Removed Successfully"}
[2022-07-26 09:53:59.965 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 200 45 application/json;+charset=utf-8 54.3860ms
[2022-07-26 09:54:03.099 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 43
[2022-07-26 09:54:03.100 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:03.100 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:03.100 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:03.100 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:03.101 +05:30 INF] RequestBody: {"departmentId":30,"departmentName":"Mean"}
[2022-07-26 09:54:03.111 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:03.113 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:03.115 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:03.116 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[DepartmentId] = @__deparmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:03.116 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :15ms
[2022-07-26 09:54:03.117 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__department_DepartmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:03.118 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@p6='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Departments] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentName] = @p2, [IsActive] = @p3, [UpdatedBy] = @p4, [UpdatedOn] = @p5
WHERE [DepartmentId] = @p6;
SELECT @@ROWCOUNT;
[2022-07-26 09:54:03.119 +05:30 INF] Department DAL Time elapsed for RemoveDepartmentFromDatabase(int departmentId)  :15ms
[2022-07-26 09:54:03.119 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :17ms
[2022-07-26 09:54:03.119 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:54:03.119 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:54:03.119 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 18.7544ms
[2022-07-26 09:54:03.119 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:03.119 +05:30 INF] ResponseBody: {"message":"Department Removed Successfully"}
[2022-07-26 09:54:03.119 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 43 - 200 45 application/json;+charset=utf-8 20.1346ms
[2022-07-26 09:54:04.972 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 122
[2022-07-26 09:54:04.972 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:04.973 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/SetTimeSlot
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 122
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:54:04.982 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:54:04.982 +05:30 INF] Route matched with {action = "SetTimeSlot", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult SetTimeSlot(IMS.Models.EmployeeAvailability) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:54:04.983 +05:30 INF] RequestBody: {"employeeAvailabilityId":0,"driveId":"71","employeeId":1,"interviewDate":"2022-08-03","fromTime":"09:00","toTime":"9:30"}
[2022-07-26 09:54:04.986 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:05.000 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32), @__employeeAvailability_InterviewDate_2='?' (DbType = DateTime2), @__employeeAvailability_From_TimeOfDay_3='?' (DbType = Time), @__employeeAvailability_To_TimeOfDay_4='?' (DbType = Time)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeAvailability] AS [e]
        WHERE ((([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[InterviewDate] = @__employeeAvailability_InterviewDate_2)) AND (((@__employeeAvailability_From_TimeOfDay_3 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_From_TimeOfDay_3 <= CONVERT(time, [e].[To]))) OR ((@__employeeAvailability_To_TimeOfDay_4 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_To_TimeOfDay_4 <= CONVERT(time, [e].[To]))))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:05.008 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeDriveResponse] AS [e]
        WHERE (([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[ResponseType] = 2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:05.014 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeAvailability_DriveId_0='?' (DbType = Int32), @__employeeAvailability_InterviewDate_Date_1='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE (([d].[DriveId] = @__employeeAvailability_DriveId_0) AND (CONVERT(date, [d].[FromDate]) <= @__employeeAvailability_InterviewDate_Date_1)) AND (CONVERT(date, [d].[ToDate]) >= @__employeeAvailability_InterviewDate_Date_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:05.018 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:54:05.027 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@p0='?' (Size = 40), @p1='?' (Size = 40), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = DateTime2), @p6='?' (DbType = Boolean), @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeAvailability] ([CancellationReason], [Comments], [DriveId], [EmployeeId], [From], [InterviewDate], [IsInterviewCancelled], [IsInterviewScheduled], [To])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8);
SELECT [EmployeeAvailabilityId]
FROM [EmployeeAvailability]
WHERE @@ROWCOUNT = 1 AND [EmployeeAvailabilityId] = scope_identity();
[2022-07-26 09:54:05.028 +05:30 INF] Drive DAL Time elapsed for SetTimeSlotToDatabase(EmployeeAvailability employeeAvailability)  :44ms
[2022-07-26 09:54:05.028 +05:30 INF] Drive Service Time elapsed for  SetTimeSlot(EmployeeAvailability employeeAvailability) :44ms
[2022-07-26 09:54:05.028 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:54:05.028 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 47
[2022-07-26 09:54:05.028 +05:30 INF] Executed action IMS.Controllers.DriveController.SetTimeSlot (Source) in 46.1247ms
[2022-07-26 09:54:05.028 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:54:05.028 +05:30 INF] ResponseBody: {"message":"Availability recorded sucessfully"}
[2022-07-26 09:54:05.028 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 122 - 200 47 application/json;+charset=utf-8 56.6808ms
[2022-07-26 09:54:05.037 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json -
[2022-07-26 09:54:05.037 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailabilty
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:54:05.037 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:54:05.037 +05:30 INF] Route matched with {action = "ViewAvailabilty", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailabilty(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:54:05.038 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:05.047 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__driveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[DriveId] = @__driveId_1)
[2022-07-26 09:54:05.047 +05:30 INF] Drive DAL Time elapsed for ViewAvailability(int employeeId, int driveId)  :9ms
[2022-07-26 09:54:05.047 +05:30 INF] Drive Service Time elapsed for  ViewAvailabilty(int employeeId, int driveId) :9ms
[2022-07-26 09:54:05.047 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType28`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:54:05.047 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 251
[2022-07-26 09:54:05.048 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailabilty (Source) in 10.2939ms
[2022-07-26 09:54:05.048 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:54:05.048 +05:30 INF] RequestBody: 
[2022-07-26 09:54:05.048 +05:30 INF] ResponseBody: [{"driveName":"Capella Drive 1","date":"2022-08-02T00:00:00","fromTime":"2022-07-26T10:00:00","toTime":"2022-07-26T10:30:00"},{"driveName":"Capella Drive 1","date":"2022-08-03T00:00:00","fromTime":"2022-07-26T09:00:00","toTime":"2022-07-26T09:30:00"}]
[2022-07-26 09:54:05.048 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json - - 200 251 application/json;+charset=utf-8 11.1663ms
[2022-07-26 09:54:12.929 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:54:12.930 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:12.930 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.9208ms
[2022-07-26 09:54:12.942 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:54:12.942 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:12.944 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:12.944 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:12.945 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:12.945 +05:30 INF] RequestBody: {"departmentId":31,"departmentName":"Admin"}
[2022-07-26 09:54:12.946 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:12.951 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:12.952 +05:30 ERR] Location service : RemoveLocation(int locationId) : Department already deleted
[2022-07-26 09:54:12.952 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :6ms
[2022-07-26 09:54:12.952 +05:30 ERR] Department Controller : RemoveDepartment(int departmentId) : Department already deleted
[2022-07-26 09:54:12.953 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-26 09:54:12.953 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-26 09:54:12.953 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 8.608ms
[2022-07-26 09:54:12.953 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:12.953 +05:30 INF] ResponseBody: Department already deleted
[2022-07-26 09:54:12.954 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 400 - text/plain;+charset=utf-8 11.3379ms
[2022-07-26 09:54:18.078 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 123
[2022-07-26 09:54:18.078 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:18.079 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/SetTimeSlot
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 123
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:54:18.079 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:54:18.079 +05:30 INF] Route matched with {action = "SetTimeSlot", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult SetTimeSlot(IMS.Models.EmployeeAvailability) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:54:18.080 +05:30 INF] RequestBody: {"employeeAvailabilityId":0,"driveId":"71","employeeId":1,"interviewDate":"2022-08-04","fromTime":"11:00","toTime":"11:30"}
[2022-07-26 09:54:18.081 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:18.097 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32), @__employeeAvailability_InterviewDate_2='?' (DbType = DateTime2), @__employeeAvailability_From_TimeOfDay_3='?' (DbType = Time), @__employeeAvailability_To_TimeOfDay_4='?' (DbType = Time)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeAvailability] AS [e]
        WHERE ((([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[InterviewDate] = @__employeeAvailability_InterviewDate_2)) AND (((@__employeeAvailability_From_TimeOfDay_3 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_From_TimeOfDay_3 <= CONVERT(time, [e].[To]))) OR ((@__employeeAvailability_To_TimeOfDay_4 >= CONVERT(time, [e].[From])) AND (@__employeeAvailability_To_TimeOfDay_4 <= CONVERT(time, [e].[To]))))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:18.103 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeAvailability_EmployeeId_0='?' (DbType = Int32), @__employeeAvailability_DriveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EmployeeDriveResponse] AS [e]
        WHERE (([e].[EmployeeId] = @__employeeAvailability_EmployeeId_0) AND ([e].[DriveId] = @__employeeAvailability_DriveId_1)) AND ([e].[ResponseType] = 2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:18.108 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeAvailability_DriveId_0='?' (DbType = Int32), @__employeeAvailability_InterviewDate_Date_1='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE (([d].[DriveId] = @__employeeAvailability_DriveId_0) AND (CONVERT(date, [d].[FromDate]) <= @__employeeAvailability_InterviewDate_Date_1)) AND (CONVERT(date, [d].[ToDate]) >= @__employeeAvailability_InterviewDate_Date_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:18.112 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:54:18.119 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (Size = 40), @p1='?' (Size = 40), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = DateTime2), @p6='?' (DbType = Boolean), @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EmployeeAvailability] ([CancellationReason], [Comments], [DriveId], [EmployeeId], [From], [InterviewDate], [IsInterviewCancelled], [IsInterviewScheduled], [To])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8);
SELECT [EmployeeAvailabilityId]
FROM [EmployeeAvailability]
WHERE @@ROWCOUNT = 1 AND [EmployeeAvailabilityId] = scope_identity();
[2022-07-26 09:54:18.121 +05:30 INF] Drive DAL Time elapsed for SetTimeSlotToDatabase(EmployeeAvailability employeeAvailability)  :40ms
[2022-07-26 09:54:18.121 +05:30 INF] Drive Service Time elapsed for  SetTimeSlot(EmployeeAvailability employeeAvailability) :40ms
[2022-07-26 09:54:18.121 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:54:18.121 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 47
[2022-07-26 09:54:18.122 +05:30 INF] Executed action IMS.Controllers.DriveController.SetTimeSlot (Source) in 42.3412ms
[2022-07-26 09:54:18.122 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.SetTimeSlot (Source)'
[2022-07-26 09:54:18.122 +05:30 INF] ResponseBody: {"message":"Availability recorded sucessfully"}
[2022-07-26 09:54:18.122 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/SetTimeSlot application/json 123 - 200 47 application/json;+charset=utf-8 43.8528ms
[2022-07-26 09:54:18.187 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json -
[2022-07-26 09:54:18.188 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailabilty
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:54:18.188 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:54:18.188 +05:30 INF] Route matched with {action = "ViewAvailabilty", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailabilty(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:54:18.189 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:18.197 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__driveId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
WHERE ([e].[EmployeeId] = @__employeeId_0) AND ([e].[DriveId] = @__driveId_1)
[2022-07-26 09:54:18.197 +05:30 INF] Drive DAL Time elapsed for ViewAvailability(int employeeId, int driveId)  :8ms
[2022-07-26 09:54:18.197 +05:30 INF] Drive Service Time elapsed for  ViewAvailabilty(int employeeId, int driveId) :8ms
[2022-07-26 09:54:18.197 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType28`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:54:18.197 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 376
[2022-07-26 09:54:18.198 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailabilty (Source) in 9.9034ms
[2022-07-26 09:54:18.198 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailabilty (Source)'
[2022-07-26 09:54:18.198 +05:30 INF] RequestBody: 
[2022-07-26 09:54:18.198 +05:30 INF] ResponseBody: [{"driveName":"Capella Drive 1","date":"2022-08-02T00:00:00","fromTime":"2022-07-26T10:00:00","toTime":"2022-07-26T10:30:00"},{"driveName":"Capella Drive 1","date":"2022-08-03T00:00:00","fromTime":"2022-07-26T09:00:00","toTime":"2022-07-26T09:30:00"},{"driveName":"Capella Drive 1","date":"2022-08-04T00:00:00","fromTime":"2022-07-26T11:00:00","toTime":"2022-07-26T11:30:00"}]
[2022-07-26 09:54:18.198 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailabilty?driveId=71 application/json - - 200 376 application/json;+charset=utf-8 11.1126ms
[2022-07-26 09:54:19.899 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:54:19.899 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:19.899 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.2365ms
[2022-07-26 09:54:19.900 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:54:19.900 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:19.901 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:19.901 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:54:19.901 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:19.902 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:19.909 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:54:19.910 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 09:54:19.910 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-26 09:54:19.910 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:54:19.910 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1498
[2022-07-26 09:54:19.910 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 8.5821ms
[2022-07-26 09:54:19.910 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:54:19.910 +05:30 INF] RequestBody: 
[2022-07-26 09:54:19.910 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":29,"departmentName":"React","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:49:24.3733197","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:54:19.910 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1498 application/json;+charset=utf-8 9.9712ms
[2022-07-26 09:54:31.838 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:54:31.839 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:31.839 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.8345ms
[2022-07-26 09:54:31.842 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:54:31.842 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:31.843 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:31.843 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:31.843 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:31.844 +05:30 INF] RequestBody: {"departmentId":29,"departmentName":"React"}
[2022-07-26 09:54:31.845 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:31.849 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:31.857 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:31.862 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[DepartmentId] = @__deparmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:31.862 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :17ms
[2022-07-26 09:54:31.865 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__department_DepartmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:31.873 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@p6='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Departments] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentName] = @p2, [IsActive] = @p3, [UpdatedBy] = @p4, [UpdatedOn] = @p5
WHERE [DepartmentId] = @p6;
SELECT @@ROWCOUNT;
[2022-07-26 09:54:31.875 +05:30 INF] Department DAL Time elapsed for RemoveDepartmentFromDatabase(int departmentId)  :17ms
[2022-07-26 09:54:31.875 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :31ms
[2022-07-26 09:54:31.875 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:54:31.875 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:54:31.876 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 32.4916ms
[2022-07-26 09:54:31.876 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:31.876 +05:30 INF] ResponseBody: {"message":"Department Removed Successfully"}
[2022-07-26 09:54:31.876 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 200 45 application/json;+charset=utf-8 34.3267ms
[2022-07-26 09:54:37.759 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:54:37.759 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:37.759 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.8314ms
[2022-07-26 09:54:37.763 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:54:37.764 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:37.774 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:37.775 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:37.775 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:37.775 +05:30 INF] RequestBody: {"departmentId":29,"departmentName":"React"}
[2022-07-26 09:54:37.777 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:37.778 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:54:37.779 +05:30 ERR] Location service : RemoveLocation(int locationId) : Department already deleted
[2022-07-26 09:54:37.779 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :3ms
[2022-07-26 09:54:37.779 +05:30 ERR] Department Controller : RemoveDepartment(int departmentId) : Department already deleted
[2022-07-26 09:54:37.780 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-26 09:54:37.780 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-26 09:54:37.780 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 5.0734ms
[2022-07-26 09:54:37.780 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:54:37.780 +05:30 INF] ResponseBody: Department already deleted
[2022-07-26 09:54:37.780 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 400 - text/plain;+charset=utf-8 17.0706ms
[2022-07-26 09:54:53.261 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:54:53.261 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:53.266 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:54:53.266 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:54:53.266 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:54:53.266 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:54:53.266 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:54:53.267 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:54:53.269 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:54:53.269 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 09:54:53.269 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 09:54:53.269 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:54:53.269 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:54:53.269 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 3.0619ms
[2022-07-26 09:54:53.269 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:54:53.269 +05:30 INF] RequestBody: 
[2022-07-26 09:54:53.269 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:54:53.270 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 3.7723ms
[2022-07-26 09:54:53.264 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.7274ms
[2022-07-26 09:55:17.323 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:55:17.323 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:55:17.323 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.3916ms
[2022-07-26 09:55:17.325 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:55:17.325 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:55:17.335 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:55:17.335 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:55:17.335 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:55:17.336 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:55:17.339 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:55:17.339 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :3ms
[2022-07-26 09:55:17.339 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-26 09:55:17.339 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:55:17.341 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:55:17.341 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 5.8698ms
[2022-07-26 09:55:17.341 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:55:17.341 +05:30 INF] RequestBody: 
[2022-07-26 09:55:17.341 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:55:17.341 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 16.4737ms
[2022-07-26 09:55:23.791 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:55:23.791 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:55:23.792 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.6973ms
[2022-07-26 09:55:23.793 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:55:23.793 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:55:23.794 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:55:23.794 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:55:23.794 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:55:23.795 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:55:23.798 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:55:23.798 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :3ms
[2022-07-26 09:55:23.798 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-26 09:55:23.798 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:55:23.798 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:55:23.799 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.5441ms
[2022-07-26 09:55:23.799 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:55:23.799 +05:30 INF] RequestBody: 
[2022-07-26 09:55:23.799 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:55:23.799 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5.6451ms
[2022-07-26 09:55:38.691 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingInterview application/json -
[2022-07-26 09:55:38.691 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:55:38.691 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:55:38.691 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingInterview (Source)'
[2022-07-26 09:55:38.694 +05:30 INF] Route matched with {action = "ViewUpcomingInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:55:38.700 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:55:38.701 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:55:38.701 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:55:38.702 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:55:38.707 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:55:38.738 +05:30 INF] Executed DbCommand (35ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:55:38.739 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :37ms
[2022-07-26 09:55:38.739 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :37ms
[2022-07-26 09:55:38.739 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:55:38.739 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 09:55:38.739 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 38.2486ms
[2022-07-26 09:55:38.739 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:55:38.739 +05:30 INF] RequestBody: 
[2022-07-26 09:55:38.740 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 09:55:38.740 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 49.0102ms
[2022-07-26 09:55:38.760 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE ((((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([d].[IsScheduled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(0 AS bit))
[2022-07-26 09:55:38.760 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :53ms
[2022-07-26 09:55:38.760 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingInterview(int employeeId) :57ms
[2022-07-26 09:55:38.760 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType30`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:55:38.767 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 899
[2022-07-26 09:55:38.768 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingInterview (Source) in 74.0821ms
[2022-07-26 09:55:38.768 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingInterview (Source)'
[2022-07-26 09:55:38.768 +05:30 INF] RequestBody: 
[2022-07-26 09:55:38.768 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":66,"fromTime":"10:00 AM","toTime":"11:00 AM","driveName":"DevOps ","driveId":56,"poolName":"Draco NET","interviewDate":"2022-08-15","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":96,"fromTime":"10:00 AM","toTime":"10:30 AM","driveName":"Capella Drive 1","driveId":71,"poolName":"Capella Minor","interviewDate":"2022-08-02","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":97,"fromTime":"9:00 AM","toTime":"9:30 AM","driveName":"Capella Drive 1","driveId":71,"poolName":"Capella Minor","interviewDate":"2022-08-03","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":98,"fromTime":"11:00 AM","toTime":"11:30 AM","driveName":"Capella Drive 1","driveId":71,"poolName":"Capella Minor","interviewDate":"2022-08-04","mode":"Offline","locationName":"Chennai","status":false}]
[2022-07-26 09:55:38.768 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingInterview application/json - - 200 899 application/json;+charset=utf-8 77.4696ms
[2022-07-26 09:55:59.553 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json -
[2022-07-26 09:55:59.554 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:55:59.554 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:55:59.554 +05:30 INF] Route matched with {action = "ViewDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:55:59.556 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:55:59.571 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] = @__driveId_0
[2022-07-26 09:55:59.572 +05:30 INF] Drive DAL Time elapsed for ViewDrive(int driveId)  :16ms
[2022-07-26 09:55:59.572 +05:30 INF] Drive Service Time elapsed for  ViewDrive(int driveId) :16ms
[2022-07-26 09:55:59.572 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType26`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:55:59.572 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 209
[2022-07-26 09:55:59.572 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDrive (Source) in 18.0724ms
[2022-07-26 09:55:59.572 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:55:59.572 +05:30 INF] RequestBody: 
[2022-07-26 09:55:59.572 +05:30 INF] ResponseBody: {"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","slotTiming":30.0,"driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"}
[2022-07-26 09:55:59.573 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json - - 200 209 application/json;+charset=utf-8 19.1251ms
[2022-07-26 09:56:02.442 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:56:02.442 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:56:02.442 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.2928ms
[2022-07-26 09:56:02.443 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:56:02.443 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:56:02.453 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:56:02.453 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:56:02.453 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:56:02.455 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:56:02.462 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:56:02.462 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-26 09:56:02.462 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-26 09:56:02.462 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:56:02.463 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:56:02.463 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.8695ms
[2022-07-26 09:56:02.463 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:56:02.463 +05:30 INF] RequestBody: 
[2022-07-26 09:56:02.463 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:56:02.464 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 20.1332ms
[2022-07-26 09:56:54.659 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Drive/CancelInterview?employeeAvailabilityId=97&cancellationReason=Interviewer%20Not%20Available&comments=Medical%20emergency. application/json -
[2022-07-26 09:56:54.659 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:56:54.661 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Drive/CancelInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:56:54.661 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.CancelInterview (Source)'
[2022-07-26 09:56:54.666 +05:30 INF] Route matched with {action = "CancelInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CancelInterview(Int32, System.String, System.String) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:56:54.674 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:56:54.689 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To]
FROM [EmployeeAvailability] AS [e]
WHERE [e].[EmployeeAvailabilityId] = @__p_0
[2022-07-26 09:56:54.705 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@p9='?' (DbType = Int32), @p0='?' (Size = 40), @p1='?' (Size = 40), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = DateTime2), @p6='?' (DbType = Boolean), @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [EmployeeAvailability] SET [CancellationReason] = @p0, [Comments] = @p1, [DriveId] = @p2, [EmployeeId] = @p3, [From] = @p4, [InterviewDate] = @p5, [IsInterviewCancelled] = @p6, [IsInterviewScheduled] = @p7, [To] = @p8
WHERE [EmployeeAvailabilityId] = @p9;
SELECT @@ROWCOUNT;
[2022-07-26 09:56:54.706 +05:30 INF] Drive DAL Time elapsed for CancelInterview(int employeeAvailabilityId, string cancellationReason, string? comments)  :34ms
[2022-07-26 09:56:54.706 +05:30 INF] Drive Service Time elapsed for  CancelInterview(int employeeAvailabilityId, string cancellationReason, string? comments) :36ms
[2022-07-26 09:56:54.706 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:56:54.707 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 48
[2022-07-26 09:56:54.707 +05:30 INF] Executed action IMS.Controllers.DriveController.CancelInterview (Source) in 41.4539ms
[2022-07-26 09:56:54.707 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.CancelInterview (Source)'
[2022-07-26 09:56:54.707 +05:30 INF] RequestBody: 
[2022-07-26 09:56:54.707 +05:30 INF] ResponseBody: {"message":"Availability Cancelled Sucessfully"}
[2022-07-26 09:56:54.708 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Drive/CancelInterview?employeeAvailabilityId=97&cancellationReason=Interviewer%20Not%20Available&comments=Medical%20emergency. application/json - - 200 48 application/json;+charset=utf-8 49.1995ms
[2022-07-26 09:56:55.775 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:56:55.776 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingInterview application/json -
[2022-07-26 09:56:55.785 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:56:55.785 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingInterview (Source)'
[2022-07-26 09:56:55.785 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:56:55.785 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:56:55.785 +05:30 INF] Route matched with {action = "ViewUpcomingInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:56:55.786 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:56:55.787 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:56:55.787 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:56:55.796 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:56:55.797 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :10ms
[2022-07-26 09:56:55.797 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :10ms
[2022-07-26 09:56:55.797 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:56:55.797 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 09:56:55.797 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 11.8253ms
[2022-07-26 09:56:55.797 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:56:55.797 +05:30 INF] RequestBody: 
[2022-07-26 09:56:55.797 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 09:56:55.798 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 22.4003ms
[2022-07-26 09:56:55.804 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE ((((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([d].[IsScheduled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(0 AS bit))
[2022-07-26 09:56:55.805 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :18ms
[2022-07-26 09:56:55.805 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingInterview(int employeeId) :18ms
[2022-07-26 09:56:55.805 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType30`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:56:55.805 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 673
[2022-07-26 09:56:55.806 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingInterview (Source) in 20.0046ms
[2022-07-26 09:56:55.806 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingInterview (Source)'
[2022-07-26 09:56:55.806 +05:30 INF] RequestBody: 
[2022-07-26 09:56:55.806 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":66,"fromTime":"10:00 AM","toTime":"11:00 AM","driveName":"DevOps ","driveId":56,"poolName":"Draco NET","interviewDate":"2022-08-15","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":96,"fromTime":"10:00 AM","toTime":"10:30 AM","driveName":"Capella Drive 1","driveId":71,"poolName":"Capella Minor","interviewDate":"2022-08-02","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":98,"fromTime":"11:00 AM","toTime":"11:30 AM","driveName":"Capella Drive 1","driveId":71,"poolName":"Capella Minor","interviewDate":"2022-08-04","mode":"Offline","locationName":"Chennai","status":false}]
[2022-07-26 09:56:55.806 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingInterview application/json - - 200 673 application/json;+charset=utf-8 30.0816ms
[2022-07-26 09:57:21.218 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:57:21.218 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:57:21.219 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.8911ms
[2022-07-26 09:57:21.220 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:57:21.221 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:57:21.221 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:57:21.222 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:57:21.222 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:57:21.223 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:21.230 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:57:21.230 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-26 09:57:21.230 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-26 09:57:21.230 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:57:21.230 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:57:21.231 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.0319ms
[2022-07-26 09:57:21.231 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:57:21.231 +05:30 INF] RequestBody: 
[2022-07-26 09:57:21.231 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:57:21.231 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.6159ms
[2022-07-26 09:57:26.497 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewTodaysInterview application/json -
[2022-07-26 09:57:26.499 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewTodaysInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:57:26.499 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewTodaysInterview (Source)'
[2022-07-26 09:57:26.502 +05:30 INF] Route matched with {action = "ViewTodaysInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewTodaysInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:57:26.500 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:57:26.510 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:26.510 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:57:26.511 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:57:26.511 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:57:26.513 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:26.534 +05:30 INF] Executed DbCommand (20ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:57:26.535 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :22ms
[2022-07-26 09:57:26.535 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :22ms
[2022-07-26 09:57:26.535 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:57:26.535 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 09:57:26.536 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 25.0373ms
[2022-07-26 09:57:26.536 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:57:26.536 +05:30 INF] RequestBody: 
[2022-07-26 09:57:26.536 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 09:57:26.536 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 36.2195ms
[2022-07-26 09:57:26.573 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) = CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(1 AS bit))
[2022-07-26 09:57:26.573 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :63ms
[2022-07-26 09:57:26.573 +05:30 INF] Drive Service Time elapsed for  ViewTodayInterviews(int employeeId) :68ms
[2022-07-26 09:57:26.573 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType29`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:57:26.577 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-26 09:57:26.577 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewTodaysInterview (Source) in 75.2016ms
[2022-07-26 09:57:26.577 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewTodaysInterview (Source)'
[2022-07-26 09:57:26.577 +05:30 INF] RequestBody: 
[2022-07-26 09:57:26.577 +05:30 INF] ResponseBody: []
[2022-07-26 09:57:26.577 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewTodaysInterview application/json - - 200 2 application/json;+charset=utf-8 79.7219ms
[2022-07-26 09:57:30.182 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json -
[2022-07-26 09:57:30.182 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 09:57:30.183 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewScheduledInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:57:30.183 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 09:57:30.183 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:57:30.183 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:57:30.183 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:57:30.184 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:30.195 +05:30 INF] Route matched with {action = "ViewScheduledInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewScheduledInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:57:30.199 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 09:57:30.200 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :16ms
[2022-07-26 09:57:30.200 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :16ms
[2022-07-26 09:57:30.200 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:57:30.200 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 09:57:30.200 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 17.2098ms
[2022-07-26 09:57:30.200 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 09:57:30.200 +05:30 INF] RequestBody: 
[2022-07-26 09:57:30.200 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 09:57:30.201 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 18.9619ms
[2022-07-26 09:57:30.203 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:30.260 +05:30 INF] Executed DbCommand (20ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(1 AS bit))
[2022-07-26 09:57:30.260 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :58ms
[2022-07-26 09:57:30.260 +05:30 INF] Drive Service Time elapsed for  ViewScheduledInterview(int employeeId) :62ms
[2022-07-26 09:57:30.261 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType29`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:57:30.264 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 644
[2022-07-26 09:57:30.264 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewScheduledInterview (Source) in 69.2027ms
[2022-07-26 09:57:30.264 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 09:57:30.264 +05:30 INF] RequestBody: 
[2022-07-26 09:57:30.264 +05:30 INF] ResponseBody: [{"driveId":56,"employeeAvailabilityId":62,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-10","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":63,"fromTime":"10:00 AM","toTime":"11:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-11","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":65,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-12","mode":"Offline","locationName":"Chennai","status":true}]
[2022-07-26 09:57:30.264 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json - - 200 644 application/json;+charset=utf-8 82.6713ms
[2022-07-26 09:57:59.894 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:57:59.894 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:57:59.895 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:57:59.895 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:57:59.895 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:57:59.895 +05:30 INF] RequestBody: {"emailId":"tommy@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:57:59.897 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:57:59.903 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:57:59.907 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:57:59.912 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:57:59.917 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:57:59.930 +05:30 INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:57:59.931 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :34ms
[2022-07-26 09:57:59.931 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :34ms
[2022-07-26 09:57:59.932 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :36ms
[2022-07-26 09:57:59.932 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:57:59.932 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 880
[2022-07-26 09:57:59.932 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 37.2347ms
[2022-07-26 09:57:59.932 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:57:59.932 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..fu4UQxudbLy9kNc9dUARWw.eZuDI44OHyBmJaE8AOYWu-9hL173bCWaeybh9TaRwuuzoOokl4jRpGUIke1Z4B6x7E1Fa-wC1Sx99piwcXEzCKtIWbpZvSfXKi-NZT0bjnkP7E-xESF8n_g5dob1xpI0jOEpw7TI25naKgPEMp8ytftck19cZgQYVc7fZRt-pqdilAkoMbl8OaM8sO9LsN_Tq-pAOX4wcKvGfwxPVxqeXtCTLPwOlFeoI8iNxeth7_mMOhvetDajBePrHyu3ZjEns7GNJsVLQgliAs6Ku9PQrNbagwm8OnX-UvdBwr7-Yq1sLOaGMJ7VVPSicSej0yrklEct0igmBtyQgjaQXfQAQuUOmhrND-rRzywYD0dpuHo5dx-L5oINe4AdrbtCx3ZgKrtmM-nPY2y6S6Zc2a6eHnBisDrRMhxDHj9YsL-qbE5MmIQChnVDAiN03sW1x9ZRSZO5JIzsl4gzuAj4Bmb-gtmr9OcjCjZDhy_V9RwSk9zzHpMaPeLIx6qgRYzGU-pvmuslggswRdgYDefUDmr9AtBH6xT5lxduiRKYyE927e6MtYgGMyOBx90etsLwssnMpg8k71GznyszW21jLc_5exYZP1MQ1cgmSwIe_HaTlYk.NshBcW5JvrpPtTYh1HHAQPEsrq7A7qARXluS57O9WM0","expiryInMinutes":360,"userHash":"a378b5658dbdcaf167e945242572bd3339f540af202acf0ab70741e411d861b7","userName":"Tom"}
[2022-07-26 09:57:59.932 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 880 application/json;+charset=utf-8 38.5526ms
[2022-07-26 09:58:04.485 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json -
[2022-07-26 09:58:04.486 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:58:04.486 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:58:04.486 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 09:58:04.486 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:58:04.486 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:58:04.487 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:58:04.488 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:04.488 +05:30 INF] Route matched with {action = "ViewUpcomingDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:58:04.497 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:04.498 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:58:04.498 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :11ms
[2022-07-26 09:58:04.498 +05:30 INF] Pool Service Time elapsed for  ViewPools() :11ms
[2022-07-26 09:58:04.499 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:04.499 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:58:04.499 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 12.7645ms
[2022-07-26 09:58:04.499 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:58:04.499 +05:30 INF] RequestBody: 
[2022-07-26 09:58:04.500 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:58:04.500 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 14.0856ms
[2022-07-26 09:58:04.500 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:04.501 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:58:04.501 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:04.501 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:04.503 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:04.513 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:04.513 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :11ms
[2022-07-26 09:58:04.513 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :11ms
[2022-07-26 09:58:04.513 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:04.514 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:58:04.514 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 12.5412ms
[2022-07-26 09:58:04.514 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:04.514 +05:30 INF] RequestBody: 
[2022-07-26 09:58:04.514 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:04.514 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 13.9174ms
[2022-07-26 09:58:04.550 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND (CONVERT(date, [d].[FromDate]) <> CONVERT(date, GETDATE()))) AND ([d].[IsScheduled] = CAST(0 AS bit))
[2022-07-26 09:58:04.551 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :55ms
[2022-07-26 09:58:04.552 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingDrives() :59ms
[2022-07-26 09:58:04.552 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:04.558 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2640
[2022-07-26 09:58:04.559 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingDrives (Source) in 70.2205ms
[2022-07-26 09:58:04.559 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 09:58:04.559 +05:30 INF] RequestBody: 
[2022-07-26 09:58:04.559 +05:30 INF] ResponseBody: [{"driveId":49,"driveName":"WaterLoo Freshers","fromDate":"2022-07-30","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":51,"driveName":"Stanford University","fromDate":"2022-07-28","toDate":"2022-07-28","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":52,"driveName":"MIT Freshers","fromDate":"2022-08-08","toDate":"2022-08-10","driveDepartment":"BFS","driveLocation":"Online","drivePool":"Caleum BFS","driveMode":"Online"},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":56,"driveName":"DevOps ","fromDate":"2022-08-10","toDate":"2022-08-15","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":58,"driveName":"Scrum Master ","fromDate":"2022-08-01","toDate":"2022-08-07","driveDepartment":".NET","driveLocation":"Hyderabad","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveDepartment":".NET","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":68,"driveName":"Draco drive .NET","fromDate":"2022-08-01","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":69,"driveName":"Capella Drive","fromDate":"2022-08-12","toDate":"2022-08-27","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":70,"driveName":"PSNA java","fromDate":"2022-08-01","toDate":"2022-08-17","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"},{"driveId":72,"driveName":"Capella Drive 2","fromDate":"2022-08-03","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Capella Minor","driveMode":"Online"}]
[2022-07-26 09:58:04.559 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json - - 200 2640 application/json;+charset=utf-8 73.9561ms
[2022-07-26 09:58:08.705 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:58:08.705 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:08.705 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.3204ms
[2022-07-26 09:58:08.709 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43
[2022-07-26 09:58:08.709 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:08.710 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:08.710 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:58:08.710 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:08.711 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"Meaav"}
[2022-07-26 09:58:08.711 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:08.715 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:08.722 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Departments] ([AddedBy], [AddedOn], [DepartmentName], [IsActive], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [DepartmentId]
FROM [Departments]
WHERE @@ROWCOUNT = 1 AND [DepartmentId] = scope_identity();
[2022-07-26 09:58:08.722 +05:30 INF] Department DAL Time elapsed for  createDeaprtment(string departmentName) :11ms
[2022-07-26 09:58:08.722 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :11ms
[2022-07-26 09:58:08.722 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:58:08.723 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 43
[2022-07-26 09:58:08.723 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 12.5002ms
[2022-07-26 09:58:08.723 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:58:08.723 +05:30 INF] ResponseBody: {"message":"Department Added Successfully"}
[2022-07-26 09:58:08.723 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43 - 200 43 application/json;+charset=utf-8 13.6822ms
[2022-07-26 09:58:13.049 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:58:13.050 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:13.050 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.7070ms
[2022-07-26 09:58:13.052 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:13.052 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:13.052 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:13.052 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:13.053 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:13.053 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:13.069 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:13.069 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :16ms
[2022-07-26 09:58:13.069 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :16ms
[2022-07-26 09:58:13.069 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:13.070 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1498
[2022-07-26 09:58:13.070 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 17.8017ms
[2022-07-26 09:58:13.071 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:13.071 +05:30 INF] RequestBody: 
[2022-07-26 09:58:13.071 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":32,"departmentName":"Meaav","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:58:08.7112875","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:13.071 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1498 application/json;+charset=utf-8 19.0631ms
[2022-07-26 09:58:16.456 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:58:16.456 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:16.457 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.6163ms
[2022-07-26 09:58:16.461 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:58:16.461 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:16.471 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:16.471 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:58:16.472 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:16.472 +05:30 INF] RequestBody: {"departmentId":32,"departmentName":"Meaav"}
[2022-07-26 09:58:16.473 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:16.477 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:16.483 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:16.488 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[DepartmentId] = @__deparmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:16.489 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :16ms
[2022-07-26 09:58:16.492 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__department_DepartmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:16.498 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@p6='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Departments] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentName] = @p2, [IsActive] = @p3, [UpdatedBy] = @p4, [UpdatedOn] = @p5
WHERE [DepartmentId] = @p6;
SELECT @@ROWCOUNT;
[2022-07-26 09:58:16.499 +05:30 INF] Department DAL Time elapsed for RemoveDepartmentFromDatabase(int departmentId)  :16ms
[2022-07-26 09:58:16.499 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :26ms
[2022-07-26 09:58:16.499 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:58:16.499 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:58:16.500 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 28.0113ms
[2022-07-26 09:58:16.500 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:58:16.500 +05:30 INF] ResponseBody: {"message":"Department Removed Successfully"}
[2022-07-26 09:58:16.500 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 200 45 application/json;+charset=utf-8 38.9391ms
[2022-07-26 09:58:16.507 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:16.508 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:16.508 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:16.508 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:16.508 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:16.509 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:16.511 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:16.511 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 09:58:16.511 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-26 09:58:16.511 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:16.511 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:58:16.512 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 3.9697ms
[2022-07-26 09:58:16.513 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:16.513 +05:30 INF] RequestBody: 
[2022-07-26 09:58:16.513 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:16.513 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5.8283ms
[2022-07-26 09:58:27.050 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json -
[2022-07-26 09:58:27.051 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailableMembersForDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:58:27.051 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:58:27.055 +05:30 INF] Route matched with {action = "ViewAvailableMembersForDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailableMembersForDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:58:27.058 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:27.059 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json -
[2022-07-26 09:58:27.062 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:58:27.063 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:58:27.063 +05:30 INF] Route matched with {action = "ViewDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:58:27.063 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:27.068 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:58:27.076 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] = @__driveId_0
[2022-07-26 09:58:27.076 +05:30 INF] Drive DAL Time elapsed for ViewDrive(int driveId)  :13ms
[2022-07-26 09:58:27.076 +05:30 INF] Drive Service Time elapsed for  ViewDrive(int driveId) :13ms
[2022-07-26 09:58:27.076 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType26`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:58:27.077 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 209
[2022-07-26 09:58:27.077 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDrive (Source) in 14.446ms
[2022-07-26 09:58:27.077 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:58:27.077 +05:30 INF] RequestBody: 
[2022-07-26 09:58:27.077 +05:30 INF] ResponseBody: {"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","slotTiming":30.0,"driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"}
[2022-07-26 09:58:27.077 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json - - 200 209 application/json;+charset=utf-8 18.3861ms
[2022-07-26 09:58:27.104 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [e0].[EmployeeId], [e0].[DepartmentId], [e0].[EmailId], [e0].[EmployeeAceNumber], [e0].[IsActive], [e0].[IsAdminAccepted], [e0].[IsAdminResponded], [e0].[Name], [e0].[Password], [e0].[ProjectId], [e0].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Employees] AS [e0] ON [e].[EmployeeId] = [e0].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e0].[RoleId] = [r].[RoleId]
INNER JOIN [Departments] AS [d] ON [e0].[DepartmentId] = [d].[DepartmentId]
WHERE (([e].[DriveId] = @__driveId_0) AND ([e].[IsInterviewScheduled] = CAST(0 AS bit))) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))
[2022-07-26 09:58:27.105 +05:30 INF] Drive DAL Time elapsed for ViewAvailableMembersForDrive(int driveId)  :47ms
[2022-07-26 09:58:27.105 +05:30 INF] Drive Service Time elapsed for  ViewAvailableMembersForDrive(int driveId) :48ms
[2022-07-26 09:58:27.105 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType32`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:27.110 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 507
[2022-07-26 09:58:27.111 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source) in 56.0699ms
[2022-07-26 09:58:27.111 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:58:27.111 +05:30 INF] RequestBody: 
[2022-07-26 09:58:27.111 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":96,"employeeId":74,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeRole":"Senior Software Developer","employeeSlotDate":"8/2/2022","employeeFromTime":"10:00","employeeToTime":"10:30"},{"employeeAvailabilityId":98,"employeeId":74,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeRole":"Senior Software Developer","employeeSlotDate":"8/4/2022","employeeFromTime":"11:00","employeeToTime":"11:30"}]
[2022-07-26 09:58:27.111 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json - - 200 507 application/json;+charset=utf-8 60.8610ms
[2022-07-26 09:58:29.451 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:58:29.451 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:29.452 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.3954ms
[2022-07-26 09:58:29.470 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:29.470 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:29.470 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:29.470 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:29.470 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:29.470 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:29.501 +05:30 INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:29.502 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :31ms
[2022-07-26 09:58:29.502 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :31ms
[2022-07-26 09:58:29.502 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:29.502 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:58:29.502 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 32.0789ms
[2022-07-26 09:58:29.502 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:29.502 +05:30 INF] RequestBody: 
[2022-07-26 09:58:29.502 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:29.502 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 32.7491ms
[2022-07-26 09:58:47.083 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:58:47.083 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:47.084 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 3.4210ms
[2022-07-26 09:58:47.151 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:47.151 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:47.152 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:47.152 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:47.152 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:47.157 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:47.230 +05:30 INF] Executed DbCommand (67ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:47.230 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :73ms
[2022-07-26 09:58:47.230 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :74ms
[2022-07-26 09:58:47.230 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:47.230 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:58:47.232 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 79.9936ms
[2022-07-26 09:58:47.232 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:47.232 +05:30 INF] RequestBody: 
[2022-07-26 09:58:47.232 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:47.232 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 80.7808ms
[2022-07-26 09:58:50.002 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:50.003 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:50.003 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:50.003 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:50.003 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:50.008 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:50.087 +05:30 INF] Executed DbCommand (66ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:50.088 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :80ms
[2022-07-26 09:58:50.088 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :80ms
[2022-07-26 09:58:50.088 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:50.088 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:58:50.088 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 85.2959ms
[2022-07-26 09:58:50.088 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:50.088 +05:30 INF] RequestBody: 
[2022-07-26 09:58:50.088 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:50.089 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 86.1003ms
[2022-07-26 09:58:55.289 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - -
[2022-07-26 09:58:55.289 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:55.290 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/CreateNewDepartment - - - 204 - - 0.7533ms
[2022-07-26 09:58:55.293 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43
[2022-07-26 09:58:55.293 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:55.293 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Department/CreateNewDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 43
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:55.293 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:58:55.294 +05:30 INF] Route matched with {action = "CreateNewDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:55.295 +05:30 INF] RequestBody: {"departmentId":0,"departmentName":"React"}
[2022-07-26 09:58:55.296 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:55.301 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__department_DepartmentName_0='?' (Size = 30)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentName] = @__department_DepartmentName_0) AND ([d].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:55.306 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Departments] ([AddedBy], [AddedOn], [DepartmentName], [IsActive], [UpdatedBy], [UpdatedOn])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT [DepartmentId]
FROM [Departments]
WHERE @@ROWCOUNT = 1 AND [DepartmentId] = scope_identity();
[2022-07-26 09:58:55.307 +05:30 INF] Department DAL Time elapsed for  createDeaprtment(string departmentName) :11ms
[2022-07-26 09:58:55.307 +05:30 INF] Department Service Time elapsed for  createDeaprtment(string departmentName) :11ms
[2022-07-26 09:58:55.307 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:58:55.307 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 43
[2022-07-26 09:58:55.307 +05:30 INF] Executed action IMS.Controllers.DepartmentController.CreateNewDepartment (Source) in 13.419ms
[2022-07-26 09:58:55.307 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.CreateNewDepartment (Source)'
[2022-07-26 09:58:55.307 +05:30 INF] ResponseBody: {"message":"Department Added Successfully"}
[2022-07-26 09:58:55.307 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Department/CreateNewDepartment application/json 43 - 200 43 application/json;+charset=utf-8 14.3983ms
[2022-07-26 09:58:57.440 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-26 09:58:57.440 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:57.440 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.4614ms
[2022-07-26 09:58:57.441 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:58:57.442 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:57.442 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:58:57.442 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:57.442 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:58:57.443 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:57.448 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:58:57.448 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :5ms
[2022-07-26 09:58:57.448 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :5ms
[2022-07-26 09:58:57.448 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:58:57.448 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1498
[2022-07-26 09:58:57.448 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 5.961ms
[2022-07-26 09:58:57.448 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:58:57.448 +05:30 INF] RequestBody: 
[2022-07-26 09:58:57.448 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":33,"departmentName":"React","isActive":true,"addedBy":12,"addedOn":"2022-07-26T09:58:55.2954633","updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:58:57.449 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1498 application/json;+charset=utf-8 7.0222ms
[2022-07-26 09:58:57.984 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 09:58:57.984 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:58:57.984 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:58:57.985 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:58:57.985 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 09:58:57.985 +05:30 INF] RequestBody: {"emailId":"tommy@aspiresys.com","password":"Pass@12345"}
[2022-07-26 09:58:57.986 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:58:57.991 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:57.996 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:58.000 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:58.004 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:58:58.017 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 09:58:58.018 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :33ms
[2022-07-26 09:58:58.018 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :33ms
[2022-07-26 09:58:58.019 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :33ms
[2022-07-26 09:58:58.019 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:58:58.019 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 880
[2022-07-26 09:58:58.019 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 34.2307ms
[2022-07-26 09:58:58.019 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 09:58:58.019 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..KXbJtsbBha06ePRjmsrF6w.MatmB9I2U6XdiW5KJ4AmbO_OHX0YcBDFbF3E6cVvVkHHDYDptOJjKjE_4O2yYuVNA0eSvL4oIxTqc6Tx52RTmeY1t3n279cJuPYbv5ZxN7k-J56WrCQ0xxUvglxYkseYqfEXAUhGhyPPlwUa9694ZCXSCgQ0t5Oq7FkbjXbfie074ZooPuWEg3zKgMAE7sgKGgWV4XHs-aMA0kAlVQmQVbGWj-iUoIx77K-I4Muvw2mgSo6Gtar86lTnDzLBeOOGvOqfVIlp5t341ZSI92STyq-HkYmylEoqxWa3j-B-ZquUF2aM71TcVrtpGOSK9WvqU5y5PYmoeCa3-3ekl7vDiJtup3y7Z88BWClwsuHLaLr4AmZDAggmFNWzP5QrMxbBcZRkJ59EdyLBrwnucBgoLwr2-24sT96stPK8XtiR1MIEza7ya8682uoNKQwEHIX3a--aVpOcvWwTYsjsofeDkFxyZ08Ut4mlUTvcbPZzqNpKxtU5rW8G2nUlU-xznh_qc5u0vp8Z6WzJA94C6vXLsnqMa4ewT3ASrGCZn6KDPYaOjuX4CSuXb1mlaGO_tiCRhlrDLCDIh3AaeLDZGTZiCRkWW9b35z1KnOPS5WwtbFE.driPRk5QwND-T1eaVdvIfoD_q_sf9qi5Q-dI0K1-w8c","expiryInMinutes":360,"userHash":"a378b5658dbdcaf167e945242572bd3339f540af202acf0ab70741e411d861b7","userName":"Tom"}
[2022-07-26 09:58:58.019 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 880 application/json;+charset=utf-8 35.3461ms
[2022-07-26 09:59:01.444 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - -
[2022-07-26 09:59:01.444 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:59:01.444 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/RemoveDepartment - - - 204 - - 0.4336ms
[2022-07-26 09:59:01.448 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44
[2022-07-26 09:59:01.448 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:59:01.449 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Department/RemoveDepartment
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 44
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:59:01.449 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:59:01.449 +05:30 INF] Route matched with {action = "RemoveDepartment", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult RemoveDepartment(IMS.Models.Department) on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:59:01.450 +05:30 INF] RequestBody: {"departmentId":33,"departmentName":"React"}
[2022-07-26 09:59:01.455 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:01.461 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE ([d].[DepartmentId] = @__department_DepartmentId_0) AND ([d].[IsActive] = CAST(0 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:59:01.466 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Pools] AS [p]
        WHERE ([p].[DepartmentId] = @__deparmentId_0) AND ([p].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:59:01.473 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__deparmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[DepartmentId] = @__deparmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:59:01.473 +05:30 INF] department DAL Time elapsed for hasActiveDrives(int department)  :23ms
[2022-07-26 09:59:01.476 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__department_DepartmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__department_DepartmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 09:59:01.490 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@p6='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = DateTime2), @p2='?' (Size = 30), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Departments] SET [AddedBy] = @p0, [AddedOn] = @p1, [DepartmentName] = @p2, [IsActive] = @p3, [UpdatedBy] = @p4, [UpdatedOn] = @p5
WHERE [DepartmentId] = @p6;
SELECT @@ROWCOUNT;
[2022-07-26 09:59:01.491 +05:30 INF] Department DAL Time elapsed for RemoveDepartmentFromDatabase(int departmentId)  :23ms
[2022-07-26 09:59:01.491 +05:30 INF] Department Service Time elapsed for  RemoveDepartment(int departmentId) :41ms
[2022-07-26 09:59:01.491 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:59:01.491 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:59:01.491 +05:30 INF] Executed action IMS.Controllers.DepartmentController.RemoveDepartment (Source) in 42.2582ms
[2022-07-26 09:59:01.491 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.RemoveDepartment (Source)'
[2022-07-26 09:59:01.491 +05:30 INF] ResponseBody: {"message":"Department Removed Successfully"}
[2022-07-26 09:59:01.492 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Department/RemoveDepartment application/json 44 - 200 45 application/json;+charset=utf-8 43.7820ms
[2022-07-26 09:59:01.496 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:59:01.496 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:59:01.497 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-26 09:59:01.497 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:59:01.497 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:59:01.498 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:01.503 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:59:01.504 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :6ms
[2022-07-26 09:59:01.504 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :6ms
[2022-07-26 09:59:01.504 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:01.504 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:59:01.504 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 7.3865ms
[2022-07-26 09:59:01.504 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:59:01.504 +05:30 INF] RequestBody: 
[2022-07-26 09:59:01.504 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:59:01.505 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 8.3935ms
[2022-07-26 09:59:02.137 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 09:59:02.137 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 09:59:02.138 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json -
[2022-07-26 09:59:02.138 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:02.138 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:02.138 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:59:02.138 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:59:02.138 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:02.138 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 09:59:02.138 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 09:59:02.138 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 09:59:02.138 +05:30 INF] Route matched with {action = "ViewUpcomingDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:59:02.139 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:02.139 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:02.139 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:02.146 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 09:59:02.146 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 09:59:02.146 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-26 09:59:02.146 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:02.146 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 09:59:02.147 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 8.4455ms
[2022-07-26 09:59:02.147 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 09:59:02.147 +05:30 INF] RequestBody: 
[2022-07-26 09:59:02.147 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 09:59:02.147 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.4066ms
[2022-07-26 09:59:02.160 +05:30 INF] Executed DbCommand (20ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND (CONVERT(date, [d].[FromDate]) <> CONVERT(date, GETDATE()))) AND ([d].[IsScheduled] = CAST(0 AS bit))
[2022-07-26 09:59:02.161 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :21ms
[2022-07-26 09:59:02.161 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingDrives() :21ms
[2022-07-26 09:59:02.161 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:02.161 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2640
[2022-07-26 09:59:02.162 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingDrives (Source) in 23.1458ms
[2022-07-26 09:59:02.162 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 09:59:02.162 +05:30 INF] RequestBody: 
[2022-07-26 09:59:02.162 +05:30 INF] ResponseBody: [{"driveId":49,"driveName":"WaterLoo Freshers","fromDate":"2022-07-30","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":51,"driveName":"Stanford University","fromDate":"2022-07-28","toDate":"2022-07-28","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":52,"driveName":"MIT Freshers","fromDate":"2022-08-08","toDate":"2022-08-10","driveDepartment":"BFS","driveLocation":"Online","drivePool":"Caleum BFS","driveMode":"Online"},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":56,"driveName":"DevOps ","fromDate":"2022-08-10","toDate":"2022-08-15","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":58,"driveName":"Scrum Master ","fromDate":"2022-08-01","toDate":"2022-08-07","driveDepartment":".NET","driveLocation":"Hyderabad","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveDepartment":".NET","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":68,"driveName":"Draco drive .NET","fromDate":"2022-08-01","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":69,"driveName":"Capella Drive","fromDate":"2022-08-12","toDate":"2022-08-27","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":70,"driveName":"PSNA java","fromDate":"2022-08-01","toDate":"2022-08-17","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"},{"driveId":72,"driveName":"Capella Drive 2","fromDate":"2022-08-03","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Capella Minor","driveMode":"Online"}]
[2022-07-26 09:59:02.162 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json - - 200 2640 application/json;+charset=utf-8 24.0479ms
[2022-07-26 09:59:02.166 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 09:59:02.167 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :28ms
[2022-07-26 09:59:02.167 +05:30 INF] Pool Service Time elapsed for  ViewPools() :28ms
[2022-07-26 09:59:02.167 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:02.167 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 09:59:02.167 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 29.1264ms
[2022-07-26 09:59:02.167 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 09:59:02.167 +05:30 INF] RequestBody: 
[2022-07-26 09:59:02.167 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 09:59:02.168 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 30.0979ms
[2022-07-26 09:59:16.984 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json -
[2022-07-26 09:59:16.984 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json -
[2022-07-26 09:59:16.985 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailableMembersForDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:16.985 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:16.985 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:59:16.986 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:59:16.986 +05:30 INF] Route matched with {action = "ViewDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:59:16.986 +05:30 INF] Route matched with {action = "ViewAvailableMembersForDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailableMembersForDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:59:16.987 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:16.987 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:16.992 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:59:17.001 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] = @__driveId_0
[2022-07-26 09:59:17.002 +05:30 INF] Drive DAL Time elapsed for ViewDrive(int driveId)  :15ms
[2022-07-26 09:59:17.002 +05:30 INF] Drive Service Time elapsed for  ViewDrive(int driveId) :15ms
[2022-07-26 09:59:17.002 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType26`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:59:17.002 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 209
[2022-07-26 09:59:17.002 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDrive (Source) in 16.5194ms
[2022-07-26 09:59:17.002 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 09:59:17.002 +05:30 INF] RequestBody: 
[2022-07-26 09:59:17.002 +05:30 INF] ResponseBody: {"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","slotTiming":30.0,"driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"}
[2022-07-26 09:59:17.002 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json - - 200 209 application/json;+charset=utf-8 17.9975ms
[2022-07-26 09:59:17.006 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [e0].[EmployeeId], [e0].[DepartmentId], [e0].[EmailId], [e0].[EmployeeAceNumber], [e0].[IsActive], [e0].[IsAdminAccepted], [e0].[IsAdminResponded], [e0].[Name], [e0].[Password], [e0].[ProjectId], [e0].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Employees] AS [e0] ON [e].[EmployeeId] = [e0].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e0].[RoleId] = [r].[RoleId]
INNER JOIN [Departments] AS [d] ON [e0].[DepartmentId] = [d].[DepartmentId]
WHERE (([e].[DriveId] = @__driveId_0) AND ([e].[IsInterviewScheduled] = CAST(0 AS bit))) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))
[2022-07-26 09:59:17.006 +05:30 INF] Drive DAL Time elapsed for ViewAvailableMembersForDrive(int driveId)  :19ms
[2022-07-26 09:59:17.006 +05:30 INF] Drive Service Time elapsed for  ViewAvailableMembersForDrive(int driveId) :19ms
[2022-07-26 09:59:17.006 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType32`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:17.006 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 507
[2022-07-26 09:59:17.006 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source) in 20.6474ms
[2022-07-26 09:59:17.006 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:59:17.006 +05:30 INF] RequestBody: 
[2022-07-26 09:59:17.006 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":96,"employeeId":74,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeRole":"Senior Software Developer","employeeSlotDate":"8/2/2022","employeeFromTime":"10:00","employeeToTime":"10:30"},{"employeeAvailabilityId":98,"employeeId":74,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeRole":"Senior Software Developer","employeeSlotDate":"8/4/2022","employeeFromTime":"11:00","employeeToTime":"11:30"}]
[2022-07-26 09:59:17.007 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json - - 200 507 application/json;+charset=utf-8 22.1453ms
[2022-07-26 09:59:32.857 +05:30 INF] Request starting HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Drive/ScheduleInterview?employeeAvailabilityId=96 application/json -
[2022-07-26 09:59:32.857 +05:30 INF] CORS policy execution successful.
[2022-07-26 09:59:32.857 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: PATCH
Scheme: http
PathBase: /IMS-API
Path: /Drive/ScheduleInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 09:59:32.858 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ScheduleInterview (Source)'
[2022-07-26 09:59:32.860 +05:30 INF] Route matched with {action = "ScheduleInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ScheduleInterview(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:59:32.865 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:32.869 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To]
FROM [EmployeeAvailability] AS [e]
WHERE [e].[EmployeeAvailabilityId] = @__p_0
[2022-07-26 09:59:32.877 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@p9='?' (DbType = Int32), @p0='?' (Size = 40), @p1='?' (Size = 40), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime2), @p5='?' (DbType = DateTime2), @p6='?' (DbType = Boolean), @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [EmployeeAvailability] SET [CancellationReason] = @p0, [Comments] = @p1, [DriveId] = @p2, [EmployeeId] = @p3, [From] = @p4, [InterviewDate] = @p5, [IsInterviewCancelled] = @p6, [IsInterviewScheduled] = @p7, [To] = @p8
WHERE [EmployeeAvailabilityId] = @p9;
SELECT @@ROWCOUNT;
[2022-07-26 09:59:32.887 +05:30 INF] Drive DAL Time elapsed for ScheduleInterview(int employeeAvailabilityId)  :22ms
[2022-07-26 09:59:32.887 +05:30 INF] Drive Service Time elapsed for  ScheduleInterview(int employeeAvailabilityId) :23ms
[2022-07-26 09:59:32.887 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 09:59:32.887 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 45
[2022-07-26 09:59:32.887 +05:30 INF] Executed action IMS.Controllers.DriveController.ScheduleInterview (Source) in 26.881ms
[2022-07-26 09:59:32.887 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ScheduleInterview (Source)'
[2022-07-26 09:59:32.887 +05:30 INF] RequestBody: 
[2022-07-26 09:59:32.888 +05:30 INF] ResponseBody: {"message":"Interview Scheduled Sucessfully"}
[2022-07-26 09:59:32.888 +05:30 INF] Request finished HTTP/1.1 PATCH http://172.24.217.145/IMS-API/Drive/ScheduleInterview?employeeAvailabilityId=96 application/json - - 200 45 application/json;+charset=utf-8 31.0522ms
[2022-07-26 09:59:32.895 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json -
[2022-07-26 09:59:32.895 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAvailableMembersForDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 09:59:32.895 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:59:32.895 +05:30 INF] Route matched with {action = "ViewAvailableMembersForDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAvailableMembersForDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 09:59:32.896 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 09:59:32.900 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Drives] AS [d]
WHERE [d].[DriveId] = @__p_0
[2022-07-26 09:59:32.913 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [e0].[EmployeeId], [e0].[DepartmentId], [e0].[EmailId], [e0].[EmployeeAceNumber], [e0].[IsActive], [e0].[IsAdminAccepted], [e0].[IsAdminResponded], [e0].[Name], [e0].[Password], [e0].[ProjectId], [e0].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Employees] AS [e0] ON [e].[EmployeeId] = [e0].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e0].[RoleId] = [r].[RoleId]
INNER JOIN [Departments] AS [d] ON [e0].[DepartmentId] = [d].[DepartmentId]
WHERE (([e].[DriveId] = @__driveId_0) AND ([e].[IsInterviewScheduled] = CAST(0 AS bit))) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))
[2022-07-26 09:59:32.913 +05:30 INF] Drive DAL Time elapsed for ViewAvailableMembersForDrive(int driveId)  :17ms
[2022-07-26 09:59:32.913 +05:30 INF] Drive Service Time elapsed for  ViewAvailableMembersForDrive(int driveId) :17ms
[2022-07-26 09:59:32.913 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType32`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 09:59:32.914 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 254
[2022-07-26 09:59:32.914 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source) in 18.4145ms
[2022-07-26 09:59:32.914 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAvailableMembersForDrive (Source)'
[2022-07-26 09:59:32.914 +05:30 INF] RequestBody: 
[2022-07-26 09:59:32.914 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":98,"employeeId":74,"employeeAceNumber":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeRole":"Senior Software Developer","employeeSlotDate":"8/4/2022","employeeFromTime":"11:00","employeeToTime":"11:30"}]
[2022-07-26 09:59:32.914 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewAvailableMembersForDrive?driveId=71 application/json - - 200 254 application/json;+charset=utf-8 19.3959ms
[2022-07-26 10:00:10.133 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 10:00:10.134 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 10:00:10.134 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json -
[2022-07-26 10:00:10.134 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:00:10.135 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:00:10.135 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:00:10.135 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:00:10.135 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:00:10.135 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 10:00:10.135 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewUpcomingDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:00:10.135 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 10:00:10.135 +05:30 INF] Route matched with {action = "ViewUpcomingDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewUpcomingDrives() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:00:10.136 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:10.136 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:10.136 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:10.143 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 10:00:10.143 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 10:00:10.143 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-26 10:00:10.144 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:00:10.144 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 10:00:10.144 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.3239ms
[2022-07-26 10:00:10.144 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:00:10.145 +05:30 INF] RequestBody: 
[2022-07-26 10:00:10.145 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 10:00:10.145 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.6514ms
[2022-07-26 10:00:10.145 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 10:00:10.146 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :10ms
[2022-07-26 10:00:10.146 +05:30 INF] Pool Service Time elapsed for  ViewPools() :10ms
[2022-07-26 10:00:10.146 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:00:10.146 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 10:00:10.146 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.2972ms
[2022-07-26 10:00:10.146 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:00:10.146 +05:30 INF] RequestBody: 
[2022-07-26 10:00:10.146 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 10:00:10.146 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 12.9446ms
[2022-07-26 10:00:10.156 +05:30 INF] Executed DbCommand (19ms) [Parameters=[@__status_0='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND (CONVERT(date, [d].[FromDate]) <> CONVERT(date, GETDATE()))) AND ([d].[IsScheduled] = CAST(0 AS bit))
[2022-07-26 10:00:10.157 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :21ms
[2022-07-26 10:00:10.157 +05:30 INF] Drive Service Time elapsed for  ViewUpcomingDrives() :21ms
[2022-07-26 10:00:10.157 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:00:10.157 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2640
[2022-07-26 10:00:10.158 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewUpcomingDrives (Source) in 22.1706ms
[2022-07-26 10:00:10.158 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewUpcomingDrives (Source)'
[2022-07-26 10:00:10.158 +05:30 INF] RequestBody: 
[2022-07-26 10:00:10.158 +05:30 INF] ResponseBody: [{"driveId":49,"driveName":"WaterLoo Freshers","fromDate":"2022-07-30","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":51,"driveName":"Stanford University","fromDate":"2022-07-28","toDate":"2022-07-28","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":52,"driveName":"MIT Freshers","fromDate":"2022-08-08","toDate":"2022-08-10","driveDepartment":"BFS","driveLocation":"Online","drivePool":"Caleum BFS","driveMode":"Online"},{"driveId":55,"driveName":"Full Stack Developer","fromDate":"2022-07-28","toDate":"2022-07-31","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":56,"driveName":"DevOps ","fromDate":"2022-08-10","toDate":"2022-08-15","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":57,"driveName":"Software Engineer","fromDate":"2022-08-01","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":58,"driveName":"Scrum Master ","fromDate":"2022-08-01","toDate":"2022-08-07","driveDepartment":".NET","driveLocation":"Hyderabad","drivePool":"Draco NET","driveMode":"Offline"},{"driveId":65,"driveName":"PSNA 1 Drive","fromDate":"2022-08-16","toDate":"2022-08-30","driveDepartment":".NET","driveLocation":"Kochin","drivePool":"Corvus NET","driveMode":"Offline"},{"driveId":67,"driveName":"Drive freshers22to23","fromDate":"2022-08-10","toDate":"2022-08-24","driveDepartment":".NET","driveLocation":"Online","drivePool":"Corvus NET","driveMode":"Online"},{"driveId":68,"driveName":"Draco drive .NET","fromDate":"2022-08-01","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":69,"driveName":"Capella Drive","fromDate":"2022-08-12","toDate":"2022-08-27","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":70,"driveName":"PSNA java","fromDate":"2022-08-01","toDate":"2022-08-17","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor Net","driveMode":"Online"},{"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"},{"driveId":72,"driveName":"Capella Drive 2","fromDate":"2022-08-03","toDate":"2022-08-03","driveDepartment":".NET","driveLocation":"Online","drivePool":"Capella Minor","driveMode":"Online"}]
[2022-07-26 10:00:10.158 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewUpcomingDrives application/json - - 200 2640 application/json;+charset=utf-8 23.4971ms
[2022-07-26 10:00:22.321 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 10:00:22.321 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:00:22.322 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:00:22.322 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:00:22.322 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 10:00:22.322 +05:30 INF] RequestBody: {"emailId":"arnold@aspiresys.com","password":"Pass@12345"}
[2022-07-26 10:00:22.323 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:22.328 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:00:22.333 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:00:22.337 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:00:22.341 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:00:22.354 +05:30 INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 10:00:22.356 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :32ms
[2022-07-26 10:00:22.356 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :32ms
[2022-07-26 10:00:22.356 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :33ms
[2022-07-26 10:00:22.356 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:00:22.357 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 883
[2022-07-26 10:00:22.357 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 34.6861ms
[2022-07-26 10:00:22.357 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:00:22.357 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..MntCWq-DIqYSyX-8xpZB2A.nlwzJ_4UQ4pUKTlBIj0lF-fIOUHzsWRYnS2OOKW65iE6AkU79LPPfn72mpkxTMtNonJ3pfp6nIu0F1RedXrWfc0E8wvG72YqeJeEC8UFt5gXqf9V4GsK_bX9f10VZUHjkRT5Kc_Ou4m-MJig7yTzhQl_gJvZgzgLcJL_oe3OtZVEYfAtxCxj65zj30z_DFtDyik-gB1rmd5fBgm-JOK5ApHCQ7Y_H9UthsuIFdxVqFqvzMq2KR8btMnhrusBSombuY70P47iuzQkJ-pAtCiuqKPo9QyS5cVQ0Ove3X-x__bvNSLbhZZzcL72AeXjfGh1zt6njnanIF19nZlWEE2pvtTMUceYtqiETpbvgJMUEPJhx3K36d9zi9_tSX4W_gXmQVhL7gCareUhetzCwM-OR5onEiHmC5t6c02JivRMuYA5NJAqAgTIyESRpwstgXfxtttE5BvwHiE0bkCfKuVk2wIdXUckX-7auMR1nQXN2Pk0-sFQiTQTlwWXJMTfOKo95uG9aBIdKPvdYnqWYcSd08g2MLtlQr6z9yFYI34JMnVPKI4s4hZnjyzM4W3MktHT-549Rj9pxsL0OeZQtdiH1aDJPLuJ5IkDsW8C1I07_ok.9fb7qlx97cvXq7puD3gN3Kg0yGn3LKIXfd1ljtBQzCU","expiryInMinutes":360,"userHash":"3fc90e88bbe900077c96b0253ce7d279ac5646ac5d8335dea8ea9e4f98c6c582","userName":"Arnold"}
[2022-07-26 10:00:22.357 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 883 application/json;+charset=utf-8 35.9661ms
[2022-07-26 10:00:31.430 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 10:00:31.430 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json -
[2022-07-26 10:00:31.431 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:00:31.431 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:00:31.431 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewScheduledInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:00:31.431 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 10:00:31.431 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:00:31.431 +05:30 INF] Route matched with {action = "ViewScheduledInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewScheduledInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:00:31.432 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:31.432 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:00:31.441 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:00:31.441 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :9ms
[2022-07-26 10:00:31.441 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :9ms
[2022-07-26 10:00:31.441 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:00:31.442 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 10:00:31.442 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 10.6566ms
[2022-07-26 10:00:31.442 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:00:31.442 +05:30 INF] RequestBody: 
[2022-07-26 10:00:31.442 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 10:00:31.442 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 11.9533ms
[2022-07-26 10:00:31.449 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(1 AS bit))
[2022-07-26 10:00:31.449 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :17ms
[2022-07-26 10:00:31.449 +05:30 INF] Drive Service Time elapsed for  ViewScheduledInterview(int employeeId) :17ms
[2022-07-26 10:00:31.449 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType29`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:00:31.450 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 871
[2022-07-26 10:00:31.450 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewScheduledInterview (Source) in 18.6118ms
[2022-07-26 10:00:31.450 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 10:00:31.450 +05:30 INF] RequestBody: 
[2022-07-26 10:00:31.450 +05:30 INF] ResponseBody: [{"driveId":56,"employeeAvailabilityId":62,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-10","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":63,"fromTime":"10:00 AM","toTime":"11:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-11","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":65,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-12","mode":"Offline","locationName":"Chennai","status":true},{"driveId":71,"employeeAvailabilityId":96,"fromTime":"10:00 AM","toTime":"10:30 AM","driveName":"Capella Drive 1","poolName":"Capella Minor","interviewDate":"2022-08-02","mode":"Offline","locationName":"Chennai","status":true}]
[2022-07-26 10:00:31.450 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json - - 200 871 application/json;+charset=utf-8 19.7597ms
[2022-07-26 10:01:11.264 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 10:01:11.264 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:01:11.265 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:01:11.265 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:01:11.265 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 10:01:11.265 +05:30 INF] RequestBody: {"emailId":"arnold@aspiresys.com","password":"Pass@12345"}
[2022-07-26 10:01:11.266 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:01:11.272 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:01:11.276 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:01:11.281 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:01:11.285 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:01:11.298 +05:30 INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 10:01:11.299 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :33ms
[2022-07-26 10:01:11.299 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :33ms
[2022-07-26 10:01:11.299 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :33ms
[2022-07-26 10:01:11.299 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:01:11.299 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 883
[2022-07-26 10:01:11.300 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 34.7073ms
[2022-07-26 10:01:11.300 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:01:11.300 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..h3WdUY1OivLv_yr2kGvYdw.6BvH1e0ZzEK_D0NUK4GqMN3j9p4R25JHHcl6JROFXuqSWPHc7AheJABjpw5RhXaWtLpZ2XdqNPB5MtzviSM6pmZ-JqtLpBpV8yIH3OOcsrbVEBZG3F6seQOPVtiNyKMnwb_04z7WYjc3yDDnd4R2Dt5eeLBMJNgf0M7hQMEotlOvgxXwBNVULljJ6m3e9PfcmvkSfJDVTO39THHdnZwqR_sVtnAQTdOfqG85-00aNjSWYlAHfW9t-MEGTPFs-9vhzdzaUu_iZKbGJNZQux5hB6wc0gBrR9_riWmqZeg15Ds3jJIZDBMh2pfNi3mr1_DBYKGS026XJB4YtiXMjIMWiIkhcTkxcHxg4_KFC6B9Foq1DgQvnPedcL2dyNCnRUvjv5jNf4kl0tf4-D6-l20a1pPCe1mjXQljJIEjT9M8myAlBs0xSLrZb3U6DDmS4Vb8keDi5mLPnThcbne8XJJCqzoSFNrly4KHnQ5FPNRzSRPry-Qx6Emk32qKXuhw3TbXa_-LMbcpI7IjPWzO0ymGvmD74XGlWrqRds6-vMGTQCT48PqeYpK6no4QA4Ih2IMIUuPaQ-MnGuLLzj52fTYFKkZ7_XZ4XqNGoCZN9Tmy2Uc.O_QltR7Ily5LHHLLVpTUA77VopdmGdslWrvQGApeQw4","expiryInMinutes":360,"userHash":"3fc90e88bbe900077c96b0253ce7d279ac5646ac5d8335dea8ea9e4f98c6c582","userName":"Arnold"}
[2022-07-26 10:01:11.300 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 883 application/json;+charset=utf-8 35.8967ms
[2022-07-26 10:01:15.154 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json -
[2022-07-26 10:01:15.155 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 10:01:15.155 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewScheduledInterview
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:01:15.155 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 10:01:15.155 +05:30 INF] Route matched with {action = "ViewScheduledInterview", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewScheduledInterview() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:01:15.155 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:01:15.155 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:01:15.156 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:01:15.156 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:01:15.156 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:01:15.166 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:01:15.166 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :10ms
[2022-07-26 10:01:15.166 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :10ms
[2022-07-26 10:01:15.166 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:01:15.166 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 10:01:15.167 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 11.0188ms
[2022-07-26 10:01:15.167 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:01:15.167 +05:30 INF] RequestBody: 
[2022-07-26 10:01:15.167 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 10:01:15.167 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 12.3083ms
[2022-07-26 10:01:15.172 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND ([e].[IsInterviewScheduled] = CAST(1 AS bit))
[2022-07-26 10:01:15.172 +05:30 INF] Drive DAL Time elapsed for ViewInterviewsByStatus(bool status, int employeeId)  :16ms
[2022-07-26 10:01:15.172 +05:30 INF] Drive Service Time elapsed for  ViewScheduledInterview(int employeeId) :16ms
[2022-07-26 10:01:15.172 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType29`10[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:01:15.173 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 871
[2022-07-26 10:01:15.173 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewScheduledInterview (Source) in 17.6383ms
[2022-07-26 10:01:15.173 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewScheduledInterview (Source)'
[2022-07-26 10:01:15.173 +05:30 INF] RequestBody: 
[2022-07-26 10:01:15.173 +05:30 INF] ResponseBody: [{"driveId":56,"employeeAvailabilityId":62,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-10","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":63,"fromTime":"10:00 AM","toTime":"11:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-11","mode":"Offline","locationName":"Chennai","status":true},{"driveId":56,"employeeAvailabilityId":65,"fromTime":"9:00 AM","toTime":"10:00 AM","driveName":"DevOps ","poolName":"Draco NET","interviewDate":"2022-08-12","mode":"Offline","locationName":"Chennai","status":true},{"driveId":71,"employeeAvailabilityId":96,"fromTime":"10:00 AM","toTime":"10:30 AM","driveName":"Capella Drive 1","poolName":"Capella Minor","interviewDate":"2022-08-02","mode":"Offline","locationName":"Chennai","status":true}]
[2022-07-26 10:01:15.173 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewScheduledInterview application/json - - 200 871 application/json;+charset=utf-8 18.8497ms
[2022-07-26 10:01:49.972 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json -
[2022-07-26 10:01:49.973 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDrive
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:01:49.973 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 10:01:49.973 +05:30 INF] Route matched with {action = "ViewDrive", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDrive(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:01:49.974 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:01:49.985 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE [d].[DriveId] = @__driveId_0
[2022-07-26 10:01:49.986 +05:30 INF] Drive DAL Time elapsed for ViewDrive(int driveId)  :12ms
[2022-07-26 10:01:49.986 +05:30 INF] Drive Service Time elapsed for  ViewDrive(int driveId) :12ms
[2022-07-26 10:01:49.986 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType26`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:01:49.986 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 209
[2022-07-26 10:01:49.986 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDrive (Source) in 13.2835ms
[2022-07-26 10:01:49.986 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDrive (Source)'
[2022-07-26 10:01:49.986 +05:30 INF] RequestBody: 
[2022-07-26 10:01:49.986 +05:30 INF] ResponseBody: {"driveId":71,"driveName":"Capella Drive 1","fromDate":"2022-08-02","toDate":"2022-08-05","slotTiming":30.0,"driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Capella Minor","driveMode":"Offline"}
[2022-07-26 10:01:49.987 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDrive?driveId=71 application/json - - 200 209 application/json;+charset=utf-8 14.5367ms
[2022-07-26 10:02:03.181 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeProfile application/json -
[2022-07-26 10:02:03.182 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeProfile
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:02:03.182 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source)'
[2022-07-26 10:02:03.184 +05:30 INF] Route matched with {action = "ViewEmployeeProfile", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeProfile() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-26 10:02:03.190 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:02:03.337 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[EmployeeId], [t].[DepartmentId], [t].[EmailId], [t].[EmployeeAceNumber], [t].[IsActive], [t].[IsAdminAccepted], [t].[IsAdminResponded], [t].[Name], [t].[Password], [t].[ProjectId], [t].[RoleId], [t].[ProjectId0], [t].[DepartmentId0], [t].[IsActive0], [t].[ProjectName], [t].[DepartmentId1], [t].[AddedBy], [t].[AddedOn], [t].[DepartmentName], [t].[IsActive1], [t].[UpdatedBy], [t].[UpdatedOn], [t].[RoleId0], [p0].[PoolMembersId], [p0].[EmployeeId], [p0].[IsActive], [p0].[PoolId], [t].[AddedBy0], [t].[AddedOn0], [t].[IsActive2], [t].[IsManagement], [t].[RoleName], [t].[UpdatedBy0], [t].[UpdatedOn0]
FROM (
    SELECT TOP(1) [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p].[ProjectId] AS [ProjectId0], [p].[DepartmentId] AS [DepartmentId0], [p].[IsActive] AS [IsActive0], [p].[ProjectName], [d].[DepartmentId] AS [DepartmentId1], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive] AS [IsActive1], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId] AS [RoleId0], [r].[AddedBy] AS [AddedBy0], [r].[AddedOn] AS [AddedOn0], [r].[IsActive] AS [IsActive2], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy] AS [UpdatedBy0], [r].[UpdatedOn] AS [UpdatedOn0]
    FROM [Employees] AS [e]
    INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
    INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
    INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
    WHERE [e].[EmployeeId] = @__employeeId_0
) AS [t]
LEFT JOIN [PoolMembers] AS [p0] ON [t].[EmployeeId] = [p0].[EmployeeId]
ORDER BY [t].[EmployeeId], [t].[ProjectId0], [t].[DepartmentId1], [t].[RoleId0]
[2022-07-26 10:02:03.340 +05:30 INF] Employee DAL Time elapsed for  ViewProfile(int employeeId)  :151ms
[2022-07-26 10:02:03.340 +05:30 INF] Employee Service Time elapsed for  ViewProfile(int employeeId) :153ms
[2022-07-26 10:02:03.340 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType41`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:02:03.343 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 208
[2022-07-26 10:02:03.343 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source) in 158.4783ms
[2022-07-26 10:02:03.343 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeProfile (Source)'
[2022-07-26 10:02:03.343 +05:30 INF] RequestBody: 
[2022-07-26 10:02:03.343 +05:30 INF] ResponseBody: {"employeeACEId":"ACE0013","employeeName":"Arnold","employeeDepartment":".NET","employeeProject":"Interview_Management_NET","employeeRole":"Senior Software Developer","employeeEmailID":"arnold@aspiresys.com"}
[2022-07-26 10:02:03.343 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeProfile application/json - - 200 208 application/json;+charset=utf-8 161.8393ms
[2022-07-26 10:02:28.066 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 10:02:28.066 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:02:28.067 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:02:28.067 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:02:28.067 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:02:28.068 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:02:28.069 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:02:28.084 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:02:28.085 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-26 10:02:28.086 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:02:28.086 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:02:28.087 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:02:28.088 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-26 10:02:28.102 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:02:28.103 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-26 10:02:28.104 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:02:28.104 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-26 10:02:28.118 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:02:28.118 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :49ms
[2022-07-26 10:02:28.118 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :50ms
[2022-07-26 10:02:28.119 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:02:28.119 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 10:02:28.119 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 51.5391ms
[2022-07-26 10:02:28.119 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:02:28.119 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 10:02:28.119 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 53.1699ms
[2022-07-26 10:03:36.469 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39
[2022-07-26 10:03:36.469 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:03:36.470 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:03:36.470 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:03:36.470 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:03:36.470 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-26"}
[2022-07-26 10:03:36.472 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:03:36.488 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:03:36.488 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:03:36.490 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:03:36.490 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-26 10:03:36.491 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:03:36.491 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-26 10:03:36.506 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:03:36.506 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-26 10:03:36.508 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:03:36.508 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :37ms
[2022-07-26 10:03:36.522 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 63)
[2022-07-26 10:03:36.523 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :51ms
[2022-07-26 10:03:36.523 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :51ms
[2022-07-26 10:03:36.523 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:03:36.523 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-26 10:03:36.523 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 53.3106ms
[2022-07-26 10:03:36.523 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:03:36.523 +05:30 INF] ResponseBody: {"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":1,"UtilizedInterviews":5,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":5,"TotalAvailability":5}
[2022-07-26 10:03:36.523 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39 - 200 190 application/json;+charset=utf-8 54.9125ms
[2022-07-26 10:04:09.645 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39
[2022-07-26 10:04:09.646 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:04:09.646 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:04:09.646 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:09.646 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:04:09.647 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-25"}
[2022-07-26 10:04:09.648 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:04:09.663 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:09.664 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-26 10:04:09.665 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:09.665 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:04:09.666 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:09.666 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-26 10:04:09.681 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:04:09.681 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-26 10:04:09.682 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:04:09.683 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-26 10:04:09.698 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 63)
[2022-07-26 10:04:09.698 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :50ms
[2022-07-26 10:04:09.698 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :51ms
[2022-07-26 10:04:09.698 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:04:09.698 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-26 10:04:09.698 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 52.1472ms
[2022-07-26 10:04:09.699 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:09.699 +05:30 INF] ResponseBody: {"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":1,"UtilizedInterviews":5,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":5,"TotalAvailability":5}
[2022-07-26 10:04:09.699 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39 - 200 190 application/json;+charset=utf-8 53.4019ms
[2022-07-26 10:04:18.349 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39
[2022-07-26 10:04:18.350 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:04:18.350 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:04:18.350 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:18.350 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:04:18.351 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-20"}
[2022-07-26 10:04:18.352 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:04:18.367 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:18.368 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-26 10:04:18.369 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:18.369 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:04:18.370 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:18.370 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-26 10:04:18.383 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:04:18.384 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :32ms
[2022-07-26 10:04:18.385 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:04:18.385 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :33ms
[2022-07-26 10:04:18.386 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:04:18.386 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-26 10:04:18.386 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :35ms
[2022-07-26 10:04:18.386 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:04:18.387 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-26 10:04:18.387 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 36.4472ms
[2022-07-26 10:04:18.387 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:18.387 +05:30 INF] ResponseBody: {"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0}
[2022-07-26 10:04:18.387 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39 - 200 190 application/json;+charset=utf-8 37.7020ms
[2022-07-26 10:04:39.445 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39
[2022-07-26 10:04:39.445 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:04:39.445 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:04:39.446 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:39.446 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:04:39.446 +05:30 INF] RequestBody: {"From":"2022-07-01","To":"2022-07-26"}
[2022-07-26 10:04:39.447 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:04:39.449 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:39.449 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :3ms
[2022-07-26 10:04:39.451 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:39.451 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-26 10:04:39.452 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:04:39.452 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :5ms
[2022-07-26 10:04:39.467 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:04:39.468 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :21ms
[2022-07-26 10:04:39.469 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:04:39.469 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :22ms
[2022-07-26 10:04:39.486 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:04:39.486 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-26 10:04:39.486 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :39ms
[2022-07-26 10:04:39.486 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:04:39.486 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 10:04:39.486 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 40.7588ms
[2022-07-26 10:04:39.487 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:04:39.487 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 10:04:39.487 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 39 - 200 193 application/json;+charset=utf-8 42.0636ms
[2022-07-26 10:07:00.552 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNotUtilizedInterviews application/json 19
[2022-07-26 10:07:00.552 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:07:00.553 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewNotUtilizedInterviews
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:07:00.553 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewNotUtilizedInterviews (Source)'
[2022-07-26 10:07:00.556 +05:30 INF] Route matched with {action = "ViewNotUtilizedInterviews", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewNotUtilizedInterviews(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:07:00.556 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:07:00.560 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:07:00.576 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:07:00.576 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:07:00.591 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:07:00.591 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :32ms
[2022-07-26 10:07:00.591 +05:30 INF] Drive Service Time elapsed for  ViewNotUtilizedInterviews(int employeeId) :32ms
[2022-07-26 10:07:00.592 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeAvailability, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType36`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.TimeSpan, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.TimeSpan, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:07:00.593 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 429
[2022-07-26 10:07:00.594 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewNotUtilizedInterviews (Source) in 37.9534ms
[2022-07-26 10:07:00.594 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewNotUtilizedInterviews (Source)'
[2022-07-26 10:07:00.594 +05:30 INF] ResponseBody: [{"employeeAvailabilityId":72,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-01","fromTime":"14:30:00","toTime":"15:00:00","mode":"Offline","locationName":"Chennai","status":false},{"employeeAvailabilityId":73,"driveName":"Docker Drive","poolName":"Draco Minor NET","interviewDate":"2022-07-01","fromTime":"15:45:00","toTime":"16:15:00","mode":"Offline","locationName":"Chennai","status":false}]
[2022-07-26 10:07:00.594 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNotUtilizedInterviews application/json 19 - 200 429 application/json;+charset=utf-8 41.7924ms
[2022-07-26 10:07:00.658 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json -
[2022-07-26 10:07:00.658 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolsByID
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:07:00.658 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:07:00.658 +05:30 INF] Route matched with {action = "ViewPoolsByID", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolsByID() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:07:00.659 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:07:00.669 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeID_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [p0].[PoolId], [p0].[AddedBy], [p0].[AddedOn], [p0].[DepartmentId], [p0].[IsActive], [p0].[PoolName], [p0].[UpdatedBy], [p0].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Pools] AS [p0] ON [p].[PoolId] = [p0].[PoolId]
WHERE ([p].[EmployeeId] = @__employeeID_0) AND ([p].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:07:00.669 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase(int employeeID) :10ms
[2022-07-26 10:07:00.669 +05:30 INF] Pool Service Time elapsed for  ViewPoolsByID(int employeeId) :10ms
[2022-07-26 10:07:00.669 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType44`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:07:00.669 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 160
[2022-07-26 10:07:00.670 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolsByID (Source) in 11.1568ms
[2022-07-26 10:07:00.670 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolsByID (Source)'
[2022-07-26 10:07:00.670 +05:30 INF] RequestBody: 
[2022-07-26 10:07:00.670 +05:30 INF] ResponseBody: [{"poolName":"Draco NET","poolId":26},{"poolName":"Corvus NET","poolId":25},{"poolName":"Draco Minor NET","poolId":32},{"poolName":"Capella Minor","poolId":35}]
[2022-07-26 10:07:00.670 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolsByID application/json - - 200 160 application/json;+charset=utf-8 12.2868ms
[2022-07-26 10:07:17.551 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-26 10:07:17.551 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:07:17.552 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:07:17.552 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:07:17.552 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:07:17.553 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:07:17.553 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:07:17.569 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:07:17.569 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-26 10:07:17.571 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:07:17.571 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-26 10:07:17.572 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:07:17.573 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-26 10:07:17.587 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:07:17.588 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-26 10:07:17.589 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:07:17.589 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :36ms
[2022-07-26 10:07:17.603 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:07:17.604 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :50ms
[2022-07-26 10:07:17.604 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :50ms
[2022-07-26 10:07:17.604 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:07:17.604 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 193
[2022-07-26 10:07:17.604 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 51.8076ms
[2022-07-26 10:07:17.604 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-26 10:07:17.604 +05:30 INF] ResponseBody: {"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14}
[2022-07-26 10:07:17.604 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 193 application/json;+charset=utf-8 53.1335ms
[2022-07-26 10:08:12.234 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-26 10:08:12.235 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:12.235 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:12.236 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:08:12.236 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 10:08:12.236 +05:30 INF] RequestBody: {"emailId":"tommy@aspiresys.com","password":"Pass@12345"}
[2022-07-26 10:08:12.238 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:12.243 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:08:12.247 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:08:12.251 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:08:12.255 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:08:12.268 +05:30 INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 10:08:12.269 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :32ms
[2022-07-26 10:08:12.269 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :32ms
[2022-07-26 10:08:12.269 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :32ms
[2022-07-26 10:08:12.269 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:08:12.270 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 880
[2022-07-26 10:08:12.270 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 34.1841ms
[2022-07-26 10:08:12.270 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:08:12.270 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..06zsRzjG3vTJuD_s1FrSwQ.McXWLUOdQrhDPT0fUSAZh6aFrBv-3h885KI-alREYqsTw1O66s0vwxIA8dKFq48t4c02hA7CsDB-tTR8UwN6Gs567WBEBAEitIRFAEH_qPw-jpnPhKAEvIV6IyyO1Pxt-TR7OzYqa3dHsV23lsZGZyo2AFvWnf2H5pfGQS_q56gkoG_Zxmpk9xgo-6u1FldjEDoSPml9iUa8PPbqmzu93ygVOVWe5ljUKR-JxYqrFZgH6dq5NpHZuKHpVCz_m37EuQKjnI-wqf9USLYdOSuddrFojtUYEWKI1yon2ADniY_YhnUKiT_o77IdjtQAeqzP_jMC3ahRgeKtEdNWx_7bTEAM_VC1UfdESGwyEekdHOSAN4JV8liVOPdh1aNrVBBACmEa-VDoXgGYB9XiLZ1Qzz9ydZ5sI-4rSbvCfER-NuFGryqnPwovIFpnBBfbn4ZVJh4c6G2u9ztBeRFCtelaRQACGK3vOiZ1dLtUHUV0af9V1fjxAnabjPNzq8xcsPEaXaU9JOAYMLhW2KV5vMVMC0QJgXydL-2L3G5_EWbdxJXni5BV-JxYm3hSE7I5elqtqQxOmqJCG-jcccJhc1MbjcdvnkZ56Z2r3muKWN5vu2g.jqb8gROjY4wTxLP9PO61jQZPswR3-bFkG1tn-3qwLwc","expiryInMinutes":360,"userHash":"a378b5658dbdcaf167e945242572bd3339f540af202acf0ab70741e411d861b7","userName":"Tom"}
[2022-07-26 10:08:12.270 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 880 application/json;+charset=utf-8 35.8558ms
[2022-07-26 10:08:19.298 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19
[2022-07-26 10:08:19.298 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:19.299 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:19.299 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:19.301 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:19.302 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:08:19.310 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:19.356 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:19.356 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :47ms
[2022-07-26 10:08:19.357 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:19.358 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :48ms
[2022-07-26 10:08:19.358 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :53ms
[2022-07-26 10:08:19.358 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:08:19.358 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 10:08:19.358 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 56.8781ms
[2022-07-26 10:08:19.358 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:19.358 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 10:08:19.358 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19 - 200 42 application/json;+charset=utf-8 60.5333ms
[2022-07-26 10:08:36.911 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 39
[2022-07-26 10:08:36.911 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:36.912 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:36.912 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:36.912 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:36.913 +05:30 INF] RequestBody: {"From":"2022-07-01","To":"2022-07-26"}
[2022-07-26 10:08:36.914 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:36.936 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:36.936 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :23ms
[2022-07-26 10:08:36.938 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:36.938 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :24ms
[2022-07-26 10:08:36.938 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :24ms
[2022-07-26 10:08:36.938 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:08:36.938 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 10:08:36.938 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 26.0147ms
[2022-07-26 10:08:36.938 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:36.938 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 10:08:36.939 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 39 - 200 42 application/json;+charset=utf-8 27.2763ms
[2022-07-26 10:08:45.410 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 39
[2022-07-26 10:08:45.410 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:45.411 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:45.411 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:45.411 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:45.412 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-26"}
[2022-07-26 10:08:45.412 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:45.414 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:45.415 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :2ms
[2022-07-26 10:08:45.416 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:45.416 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :4ms
[2022-07-26 10:08:45.416 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :4ms
[2022-07-26 10:08:45.416 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:08:45.416 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 41
[2022-07-26 10:08:45.417 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 5.3566ms
[2022-07-26 10:08:45.417 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:45.417 +05:30 INF] ResponseBody: {"ScheduledDrives":1,"CancelledDrives":0}
[2022-07-26 10:08:45.417 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 39 - 200 41 application/json;+charset=utf-8 6.6221ms
[2022-07-26 10:08:52.987 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 39
[2022-07-26 10:08:52.987 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:52.987 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 10:08:52.988 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 10:08:52.988 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewNonCancelledDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:52.988 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 10:08:52.988 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:08:52.988 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:08:52.988 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:08:52.988 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:08:52.989 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:08:52.989 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 10:08:52.990 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:52.990 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:52.991 +05:30 INF] Route matched with {action = "ViewNonCancelledDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewNonCancelledDrives(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:52.992 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-26"}
[2022-07-26 10:08:52.996 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:52.997 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 10:08:52.997 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-26 10:08:52.997 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-26 10:08:52.997 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:52.997 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 10:08:52.998 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:52.998 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.202ms
[2022-07-26 10:08:52.998 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:08:52.998 +05:30 INF] RequestBody: 
[2022-07-26 10:08:52.998 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 10:08:52.998 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :2ms
[2022-07-26 10:08:52.998 +05:30 INF] Drive Service Time elapsed for  ViewNonCancelledDrives(int tacId) :3ms
[2022-07-26 10:08:52.998 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.4672ms
[2022-07-26 10:08:52.998 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:52.999 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 183
[2022-07-26 10:08:52.999 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewNonCancelledDrives (Source) in 7.8783ms
[2022-07-26 10:08:52.999 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 10:08:52.999 +05:30 INF] ResponseBody: [{"driveId":63,"driveName":"Aries Drive","fromDate":"2022-07-22","toDate":"2022-07-25","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"}]
[2022-07-26 10:08:52.999 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 39 - 200 183 application/json;+charset=utf-8 12.5322ms
[2022-07-26 10:08:53.009 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 10:08:53.010 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :20ms
[2022-07-26 10:08:53.010 +05:30 INF] Pool Service Time elapsed for  ViewPools() :20ms
[2022-07-26 10:08:53.010 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:53.010 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 10:08:53.010 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 21.6566ms
[2022-07-26 10:08:53.010 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:08:53.010 +05:30 INF] RequestBody: 
[2022-07-26 10:08:53.010 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 10:08:53.010 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 23.2320ms
[2022-07-26 10:08:57.902 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19
[2022-07-26 10:08:57.902 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:57.903 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:57.903 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:57.903 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:57.903 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:08:57.904 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:57.906 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:57.907 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :3ms
[2022-07-26 10:08:57.908 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:57.908 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :4ms
[2022-07-26 10:08:57.908 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :4ms
[2022-07-26 10:08:57.908 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:08:57.908 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 10:08:57.909 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 6.0151ms
[2022-07-26 10:08:57.909 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:08:57.909 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 10:08:57.909 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19 - 200 42 application/json;+charset=utf-8 7.2492ms
[2022-07-26 10:08:59.439 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 10:08:59.439 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 10:08:59.439 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 19
[2022-07-26 10:08:59.439 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:08:59.439 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:08:59.439 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:08:59.440 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:08:59.440 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:08:59.440 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 10:08:59.440 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewNonCancelledDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:08:59.440 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:08:59.440 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 10:08:59.440 +05:30 INF] Route matched with {action = "ViewNonCancelledDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewNonCancelledDrives(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:08:59.440 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:08:59.441 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:59.441 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:59.441 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:08:59.442 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 10:08:59.443 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 10:08:59.443 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-26 10:08:59.443 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-26 10:08:59.443 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-26 10:08:59.443 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:59.443 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-26 10:08:59.443 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:59.443 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 10:08:59.444 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 10:08:59.444 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.0347ms
[2022-07-26 10:08:59.444 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:08:59.444 +05:30 INF] RequestBody: 
[2022-07-26 10:08:59.444 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 10:08:59.444 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.3725ms
[2022-07-26 10:08:59.444 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:08:59.444 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 5.6794ms
[2022-07-26 10:08:59.444 +05:30 INF] RequestBody: 
[2022-07-26 10:08:59.444 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 10:08:59.444 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5.8927ms
[2022-07-26 10:08:59.459 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:08:59.460 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :19ms
[2022-07-26 10:08:59.460 +05:30 INF] Drive Service Time elapsed for  ViewNonCancelledDrives(int tacId) :19ms
[2022-07-26 10:08:59.460 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType24`8[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:08:59.460 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1876
[2022-07-26 10:08:59.460 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewNonCancelledDrives (Source) in 20.448ms
[2022-07-26 10:08:59.461 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewNonCancelledDrives (Source)'
[2022-07-26 10:08:59.461 +05:30 INF] ResponseBody: [{"driveId":42,"driveName":"Fresher NET","fromDate":"2022-07-12","toDate":"2022-07-13","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Freshers .NET","driveMode":"Offline"},{"driveId":44,"driveName":"Fresher Oracle","fromDate":"2022-07-10","toDate":"2022-07-12","driveDepartment":"ORACLE","driveLocation":"Chennai","drivePool":"Fresher ORACLE","driveMode":"Offline"},{"driveId":45,"driveName":"Testing Team","fromDate":"2022-07-12","toDate":"2022-07-13","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":46,"driveName":"Architect NET","fromDate":"2022-07-12","toDate":"2022-07-12","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":47,"driveName":"Freshers 2020","fromDate":"2022-07-14","toDate":"2022-07-15","driveDepartment":".NET","driveLocation":"Online","drivePool":"Freshers .NET","driveMode":"Online"},{"driveId":60,"driveName":"Docker Drive","fromDate":"2022-07-01","toDate":"2022-07-05","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco Minor NET","driveMode":"Offline"},{"driveId":61,"driveName":"Angular Drive","fromDate":"2022-07-06","toDate":"2022-07-07","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco Minor NET","driveMode":"Online"},{"driveId":62,"driveName":"Devops Drive","fromDate":"2022-07-03","toDate":"2022-07-05","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":63,"driveName":"Aries Drive","fromDate":"2022-07-22","toDate":"2022-07-25","driveDepartment":".NET","driveLocation":"Online","drivePool":"Draco NET","driveMode":"Online"},{"driveId":64,"driveName":"Hydra Drive","fromDate":"2022-07-10","toDate":"2022-07-16","driveDepartment":".NET","driveLocation":"Chennai","drivePool":"Draco NET","driveMode":"Offline"}]
[2022-07-26 10:08:59.461 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewNonCancelledDrives application/json 19 - 200 1876 application/json;+charset=utf-8 21.7604ms
[2022-07-26 10:09:11.829 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19
[2022-07-26 10:09:11.829 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:09:11.830 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:09:11.830 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:09:11.830 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:09:11.831 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:09:11.832 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:11.835 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:09:11.836 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :4ms
[2022-07-26 10:09:11.837 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:09:11.837 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :5ms
[2022-07-26 10:09:11.837 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :6ms
[2022-07-26 10:09:11.837 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:09:11.837 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 10:09:11.837 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 7.2277ms
[2022-07-26 10:09:11.837 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:09:11.837 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 10:09:11.838 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19 - 200 42 application/json;+charset=utf-8 8.6910ms
[2022-07-26 10:09:12.958 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 10:09:12.958 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-26 10:09:12.958 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewAllCancelledDrives application/json 19
[2022-07-26 10:09:12.958 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:09:12.959 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:09:12.959 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:09:12.959 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:09:12.959 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:09:12.959 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:09:12.959 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-26 10:09:12.959 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewAllCancelledDrives
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:09:12.959 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewAllCancelledDrives (Source)'
[2022-07-26 10:09:12.960 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:12.960 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:12.961 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 10:09:12.962 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-26 10:09:12.962 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-26 10:09:12.962 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:09:12.962 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 10:09:12.962 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.3099ms
[2022-07-26 10:09:12.962 +05:30 INF] Route matched with {action = "ViewAllCancelledDrives", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewAllCancelledDrives(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:09:12.962 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:09:12.962 +05:30 INF] RequestBody: 
[2022-07-26 10:09:12.962 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 10:09:12.963 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 4.9115ms
[2022-07-26 10:09:12.963 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:09:12.967 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:12.968 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:09:12.969 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :2ms
[2022-07-26 10:09:12.969 +05:30 INF] Drive Service Time elapsed for  ViewAllCancelledDrives(int tacId) :3ms
[2022-07-26 10:09:12.969 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Drive, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType25`9[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:09:12.972 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-26 10:09:12.972 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :12ms
[2022-07-26 10:09:12.972 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :12ms
[2022-07-26 10:09:12.972 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:09:12.972 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-26 10:09:12.972 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 13.4099ms
[2022-07-26 10:09:12.973 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-26 10:09:12.973 +05:30 INF] RequestBody: 
[2022-07-26 10:09:12.973 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-26 10:09:12.973 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 14.9460ms
[2022-07-26 10:09:12.976 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 215
[2022-07-26 10:09:12.977 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewAllCancelledDrives (Source) in 14.3963ms
[2022-07-26 10:09:12.977 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewAllCancelledDrives (Source)'
[2022-07-26 10:09:12.977 +05:30 INF] ResponseBody: [{"driveId":48,"driveName":"Freshers 2021","fromDate":"2022-07-18","toDate":"2022-07-19","driveDepartment":".NET","driveLocation":"Dubai","drivePool":"Freshers .NET","driveMode":"Offline","cancellationReason":null}]
[2022-07-26 10:09:12.977 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewAllCancelledDrives application/json 19 - 200 215 application/json;+charset=utf-8 18.6953ms
[2022-07-26 10:09:33.538 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19
[2022-07-26 10:09:33.539 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:09:33.539 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:09:33.539 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:09:33.539 +05:30 INF] Route matched with {action = "ViewDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:09:33.540 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:09:33.541 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:33.558 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:09:33.559 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :19ms
[2022-07-26 10:09:33.561 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__tacId_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d0].[DepartmentId], [d0].[AddedBy], [d0].[AddedOn], [d0].[DepartmentName], [d0].[IsActive], [d0].[UpdatedBy], [d0].[UpdatedOn]
FROM [Drives] AS [d]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Departments] AS [d0] ON [p].[DepartmentId] = [d0].[DepartmentId]
WHERE (([d].[IsCancelled] = @__status_0) AND ([d].[AddedBy] = @__tacId_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:09:33.561 +05:30 INF] Drive DAL Time elapsed for GetDrivesByStatus(bool status)  :21ms
[2022-07-26 10:09:33.561 +05:30 INF] Drive Service Time elapsed for  ViewTACDashboard(int employeeId) :21ms
[2022-07-26 10:09:33.561 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:09:33.561 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 42
[2022-07-26 10:09:33.562 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDashboard (Source) in 22.3872ms
[2022-07-26 10:09:33.562 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDashboard (Source)'
[2022-07-26 10:09:33.562 +05:30 INF] ResponseBody: {"ScheduledDrives":10,"CancelledDrives":1}
[2022-07-26 10:09:33.562 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 19 - 200 42 application/json;+charset=utf-8 23.6832ms
[2022-07-26 10:09:58.337 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-26 10:09:58.337 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:09:58.338 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:09:58.339 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:09:58.340 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-26 10:09:58.340 +05:30 INF] RequestBody: {"emailId":"john01@aspiresys.com","password":"Pass@12345"}
[2022-07-26 10:09:58.343 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:09:58.348 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:09:58.351 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:09:58.355 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:09:58.359 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:09:58.368 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-26 10:09:58.368 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :27ms
[2022-07-26 10:09:58.368 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :27ms
[2022-07-26 10:09:58.369 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :27ms
[2022-07-26 10:09:58.369 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`4[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:09:58.369 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 881
[2022-07-26 10:09:58.369 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 29.352ms
[2022-07-26 10:09:58.369 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-26 10:09:58.369 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..2HxY4xcjlmV9gy9riYN1LQ.2CxQwy7b5_plbw4RX3DaOivFTPqaIPOxpYZM1D4xc2MhcyR8Bv-p4HnPPMUiWZTn1DFLtJsg-OK3KYZ1YZIV8JY-j62DFwnMdbT9xoIG4f0EFkD4T_sEoigsDIiFlhgVKpNk9H5igK9HVEsvVNoo2f5CtnXWMUbQjXH3AHRIWP_sDaF_z2YOL03MGqB0LalIu3bdMICIyb7st0UjXOk2aRi8fEb0DvErs-DTpRANRMdCUDz9dLxHy6A7ty1rpGLFNSrOwMhkaB-usJHv9EuV6yyH67l0Ci0Uw_OMlEzeMVQ9ChaweRuDI4xG_g3Gws6E0IvBxpuhGUnVMzhp94R9TD7D5SIgfqP2Xw_XM9HQw0mg6hoWsABRw23B3iAN25nxaldfs6YGYNuSq9nPMli8x9JPA5LZqH_GOqEr7KlbhrSWtCdlYYhfnK89-QlcVVLHRZSzHbfLIo4zdcZ-Hc70SnpsNfYWCQuBa-M5ZwLPNuFMvnopqXdmLVVP_U7eWh-JLnI_9LKcnGMxiH5LXDng4CMMczqejFCbXvJYDYHZOh3NJac-oL6KC0ELP77jrDH8TT48yB7bCzb4hy_jfE_X5tiD7cMoEBta3ja5CYFR-nw.bSc08UtIDtuadxO5UWz-XwMdZ22_EhUx22R90WkbrNQ","expiryInMinutes":360,"userHash":"f0af9bc36847bc8334ffd57cab4cff0d080116b4463d788bce2fe22c5e8bc01f","userName":"John"}
[2022-07-26 10:09:58.369 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 881 application/json;+charset=utf-8 32.4656ms
[2022-07-26 10:10:12.182 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-26 10:10:12.182 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:10:12.182 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-26 10:10:12.182 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:10:12.182 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:10:12.182 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:10:12.182 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:10:12.182 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-26 10:10:12.183 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-26 10:10:12.183 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:10:12.184 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:10:12.184 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-26 10:10:12.185 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:10:12.186 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-26 10:10:12.186 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:10:12.193 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-26 10:10:12.193 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :10ms
[2022-07-26 10:10:12.193 +05:30 INF] Pool Service Time elapsed for  ViewPools() :10ms
[2022-07-26 10:10:12.193 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:10:12.193 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:10:12.194 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 808
[2022-07-26 10:10:12.194 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.4522ms
[2022-07-26 10:10:12.194 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-26 10:10:12.194 +05:30 INF] RequestBody: 
[2022-07-26 10:10:12.194 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Freshers .NET","departmentId":1,"departmentName":".NET"},{"poolId":25,"poolName":"Corvus NET","departmentId":1,"departmentName":".NET"},{"poolId":26,"poolName":"Draco NET","departmentId":1,"departmentName":".NET"},{"poolId":27,"poolName":"Sagitta lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":28,"poolName":"Libra JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":29,"poolName":"Phoenix oracle","departmentId":3,"departmentName":"ORACLE"},{"poolId":30,"poolName":"Auriga Lamp","departmentId":4,"departmentName":"LAMP"},{"poolId":31,"poolName":"Caleum BFS","departmentId":5,"departmentName":"BFS"},{"poolId":34,"poolName":"Draco Minor Net","departmentId":1,"departmentName":".NET"},{"poolId":35,"poolName":"Capella Minor","departmentId":1,"departmentName":".NET"}]
[2022-07-26 10:10:12.194 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 808 application/json;+charset=utf-8 11.9190ms
[2022-07-26 10:10:12.204 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:10:12.208 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:10:12.217 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DriveId] AS [driveId], [d].[Name] AS [driveName]
FROM [Drives] AS [d]
WHERE [d].[DepartmentId] = @__departmentId_0
[2022-07-26 10:10:12.217 +05:30 INF] Drive DAL Time elapsed for GetDrivesForCurrentUser(int departmentId)  :13ms
[2022-07-26 10:10:12.217 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :26ms
[2022-07-26 10:10:12.217 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType1`2[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:10:12.220 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:10:12.220 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1128
[2022-07-26 10:10:12.220 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :27ms
[2022-07-26 10:10:12.221 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 34.1531ms
[2022-07-26 10:10:12.221 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-26 10:10:12.221 +05:30 INF] RequestBody: 
[2022-07-26 10:10:12.221 +05:30 INF] ResponseBody: [{"driveId":42,"driveName":"Fresher NET"},{"driveId":45,"driveName":"Testing Team"},{"driveId":46,"driveName":"Architect NET"},{"driveId":47,"driveName":"Freshers 2020"},{"driveId":48,"driveName":"Freshers 2021"},{"driveId":49,"driveName":"WaterLoo Freshers"},{"driveId":51,"driveName":"Stanford University"},{"driveId":54,"driveName":"Cloud Developer"},{"driveId":55,"driveName":"Full Stack Developer"},{"driveId":56,"driveName":"DevOps "},{"driveId":57,"driveName":"Software Engineer"},{"driveId":58,"driveName":"Scrum Master "},{"driveId":59,"driveName":"Hydra Net"},{"driveId":60,"driveName":"Docker Drive"},{"driveId":61,"driveName":"Angular Drive"},{"driveId":62,"driveName":"Devops Drive"},{"driveId":63,"driveName":"Aries Drive"},{"driveId":64,"driveName":"Hydra Drive"},{"driveId":65,"driveName":"PSNA 1 Drive"},{"driveId":66,"driveName":"PSNA .NET"},{"driveId":67,"driveName":"Drive freshers22to23"},{"driveId":68,"driveName":"Draco drive .NET"},{"driveId":69,"driveName":"Capella Drive"},{"driveId":70,"driveName":"PSNA java"},{"driveId":71,"driveName":"Capella Drive 1"},{"driveId":72,"driveName":"Capella Drive 2"}]
[2022-07-26 10:10:12.221 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 200 1128 application/json;+charset=utf-8 38.2093ms
[2022-07-26 10:10:12.234 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.236 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :43ms
[2022-07-26 10:10:12.237 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.237 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-26 10:10:12.238 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.239 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :45ms
[2022-07-26 10:10:12.254 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (46, 47)
[2022-07-26 10:10:12.255 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :61ms
[2022-07-26 10:10:12.256 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (46, 47)
[2022-07-26 10:10:12.256 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :62ms
[2022-07-26 10:10:12.270 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (46, 47)
[2022-07-26 10:10:12.270 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :76ms
[2022-07-26 10:10:12.270 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :79ms
[2022-07-26 10:10:12.271 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.271 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :77ms
[2022-07-26 10:10:12.272 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.272 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :78ms
[2022-07-26 10:10:12.273 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.273 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :79ms
[2022-07-26 10:10:12.288 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 45)
[2022-07-26 10:10:12.288 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :94ms
[2022-07-26 10:10:12.288 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 45)
[2022-07-26 10:10:12.288 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :94ms
[2022-07-26 10:10:12.302 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 45)
[2022-07-26 10:10:12.303 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :109ms
[2022-07-26 10:10:12.303 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :112ms
[2022-07-26 10:10:12.304 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.304 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :109ms
[2022-07-26 10:10:12.304 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.304 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :110ms
[2022-07-26 10:10:12.305 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.305 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :111ms
[2022-07-26 10:10:12.307 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.307 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :113ms
[2022-07-26 10:10:12.308 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.308 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :113ms
[2022-07-26 10:10:12.308 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.308 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :114ms
[2022-07-26 10:10:12.308 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :117ms
[2022-07-26 10:10:12.309 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.309 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :114ms
[2022-07-26 10:10:12.309 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.309 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :115ms
[2022-07-26 10:10:12.310 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.310 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :116ms
[2022-07-26 10:10:12.310 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.310 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :116ms
[2022-07-26 10:10:12.311 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.311 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :116ms
[2022-07-26 10:10:12.311 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.311 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :117ms
[2022-07-26 10:10:12.311 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :120ms
[2022-07-26 10:10:12.311 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.311 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :117ms
[2022-07-26 10:10:12.312 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.312 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :117ms
[2022-07-26 10:10:12.312 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.312 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :118ms
[2022-07-26 10:10:12.312 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.312 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :118ms
[2022-07-26 10:10:12.313 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.313 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :118ms
[2022-07-26 10:10:12.313 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.313 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :119ms
[2022-07-26 10:10:12.313 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :122ms
[2022-07-26 10:10:12.313 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.313 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :119ms
[2022-07-26 10:10:12.314 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.314 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :119ms
[2022-07-26 10:10:12.314 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.314 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :120ms
[2022-07-26 10:10:12.314 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.314 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :120ms
[2022-07-26 10:10:12.315 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.315 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :120ms
[2022-07-26 10:10:12.315 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.315 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :120ms
[2022-07-26 10:10:12.315 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :124ms
[2022-07-26 10:10:12.315 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.315 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :121ms
[2022-07-26 10:10:12.316 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.316 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :121ms
[2022-07-26 10:10:12.316 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.316 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :121ms
[2022-07-26 10:10:12.316 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.316 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :122ms
[2022-07-26 10:10:12.317 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.317 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :122ms
[2022-07-26 10:10:12.317 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.317 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :122ms
[2022-07-26 10:10:12.317 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :126ms
[2022-07-26 10:10:12.317 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.317 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :123ms
[2022-07-26 10:10:12.318 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.318 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :123ms
[2022-07-26 10:10:12.318 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.318 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :123ms
[2022-07-26 10:10:12.318 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.318 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :124ms
[2022-07-26 10:10:12.319 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.319 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :124ms
[2022-07-26 10:10:12.319 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.319 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :124ms
[2022-07-26 10:10:12.319 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :128ms
[2022-07-26 10:10:12.319 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.319 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :125ms
[2022-07-26 10:10:12.320 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.320 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :125ms
[2022-07-26 10:10:12.320 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.320 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :125ms
[2022-07-26 10:10:12.320 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.320 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :126ms
[2022-07-26 10:10:12.321 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.321 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :126ms
[2022-07-26 10:10:12.321 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.321 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :126ms
[2022-07-26 10:10:12.321 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :130ms
[2022-07-26 10:10:12.322 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.322 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :127ms
[2022-07-26 10:10:12.322 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.322 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :127ms
[2022-07-26 10:10:12.322 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.322 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :128ms
[2022-07-26 10:10:12.335 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:10:12.335 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :140ms
[2022-07-26 10:10:12.336 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:10:12.336 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :141ms
[2022-07-26 10:10:12.354 +05:30 INF] Executed DbCommand (18ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND [e].[DriveId] IN (60, 61, 63)
[2022-07-26 10:10:12.354 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :160ms
[2022-07-26 10:10:12.354 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :163ms
[2022-07-26 10:10:12.357 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.357 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :162ms
[2022-07-26 10:10:12.358 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.358 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :163ms
[2022-07-26 10:10:12.359 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.359 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :164ms
[2022-07-26 10:10:12.360 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :165ms
[2022-07-26 10:10:12.361 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.361 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :166ms
[2022-07-26 10:10:12.362 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.362 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :167ms
[2022-07-26 10:10:12.362 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :171ms
[2022-07-26 10:10:12.363 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.363 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :168ms
[2022-07-26 10:10:12.365 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.365 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :170ms
[2022-07-26 10:10:12.374 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.374 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :179ms
[2022-07-26 10:10:12.406 +05:30 INF] Executed DbCommand (32ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.406 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :211ms
[2022-07-26 10:10:12.424 +05:30 INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.424 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :229ms
[2022-07-26 10:10:12.446 +05:30 INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.446 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :250ms
[2022-07-26 10:10:12.446 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :255ms
[2022-07-26 10:10:12.451 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.451 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :255ms
[2022-07-26 10:10:12.453 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.453 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :257ms
[2022-07-26 10:10:12.454 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.454 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :258ms
[2022-07-26 10:10:12.459 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.459 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :263ms
[2022-07-26 10:10:12.460 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.460 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :264ms
[2022-07-26 10:10:12.461 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.461 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :265ms
[2022-07-26 10:10:12.461 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :270ms
[2022-07-26 10:10:12.462 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.462 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :266ms
[2022-07-26 10:10:12.463 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.463 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :267ms
[2022-07-26 10:10:12.463 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.463 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :267ms
[2022-07-26 10:10:12.464 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.464 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :268ms
[2022-07-26 10:10:12.464 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.464 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :269ms
[2022-07-26 10:10:12.465 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.465 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :269ms
[2022-07-26 10:10:12.465 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :274ms
[2022-07-26 10:10:12.466 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.466 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :270ms
[2022-07-26 10:10:12.467 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.467 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :271ms
[2022-07-26 10:10:12.467 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:10:12.467 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :271ms
[2022-07-26 10:10:12.468 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.468 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :272ms
[2022-07-26 10:10:12.469 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.469 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :273ms
[2022-07-26 10:10:12.469 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:10:12.469 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :273ms
[2022-07-26 10:10:12.470 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :278ms
[2022-07-26 10:10:12.470 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :278ms
[2022-07-26 10:10:12.470 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:10:12.474 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 4686
[2022-07-26 10:10:12.474 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 288.8468ms
[2022-07-26 10:10:12.474 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:10:12.474 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":2,"DeniedDrives":3,"IgnoredDrives":0,"TotalDrives":5,"UtilizedInterviews":4,"NotUtilizedInterviews":2,"CancelledInterview":0,"SlotAvailabiltyGiven":6,"TotalAvailability":6},"employee":{"employeeName":"John","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":1,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":1,"SlotAvailabiltyGiven":1,"TotalAvailability":1},"employee":{"employeeName":"Ben","employeeACENumber":"ACE9975","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jacobs M","employeeACENumber":"ACE1999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jordan","employeeACENumber":"ACE0010","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shane","employeeACENumber":"ACE0014","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Willams","employeeACENumber":"ACE0016","employeeRole":"Project Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Stokes","employeeACENumber":"ACE0007","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Board","employeeACENumber":"ACE0009","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jason","employeeACENumber":"ACE0011","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":3,"DeniedDrives":1,"IgnoredDrives":1,"TotalDrives":5,"UtilizedInterviews":10,"NotUtilizedInterviews":2,"CancelledInterview":2,"SlotAvailabiltyGiven":14,"TotalAvailability":14},"employee":{"employeeName":"Arnold","employeeACENumber":"ACE0013","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Hardin","employeeACENumber":"ACE0020","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shelin","employeeACENumber":"ACE00985","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Robert","employeeACENumber":"ACE00243","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jeremy Buendia","employeeACENumber":"ACE4000","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Maggie","employeeACENumber":"ACE2022","employeeRole":"Software Developer"}}]
[2022-07-26 10:10:12.474 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 4686 application/json;+charset=utf-8 292.7986ms
[2022-07-26 10:11:32.220 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 39
[2022-07-26 10:11:32.220 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:11:32.221 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:11:32.221 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:11:32.221 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:11:32.222 +05:30 INF] RequestBody: {"From":"2022-07-20","To":"2022-07-26"}
[2022-07-26 10:11:32.223 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:11:32.232 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:11:32.233 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :10ms
[2022-07-26 10:11:32.247 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.247 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-26 10:11:32.248 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.248 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :25ms
[2022-07-26 10:11:32.249 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.249 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :26ms
[2022-07-26 10:11:32.253 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.253 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :30ms
[2022-07-26 10:11:32.254 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.254 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :31ms
[2022-07-26 10:11:32.254 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.254 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :32ms
[2022-07-26 10:11:32.254 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :32ms
[2022-07-26 10:11:32.255 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.255 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :32ms
[2022-07-26 10:11:32.256 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.256 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-26 10:11:32.257 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.258 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :34ms
[2022-07-26 10:11:32.258 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.259 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-26 10:11:32.259 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.259 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :36ms
[2022-07-26 10:11:32.260 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.260 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :37ms
[2022-07-26 10:11:32.260 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :37ms
[2022-07-26 10:11:32.261 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.261 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :38ms
[2022-07-26 10:11:32.262 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.262 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :39ms
[2022-07-26 10:11:32.263 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.263 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :39ms
[2022-07-26 10:11:32.263 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.264 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :40ms
[2022-07-26 10:11:32.264 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.264 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :41ms
[2022-07-26 10:11:32.265 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.265 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :42ms
[2022-07-26 10:11:32.265 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :42ms
[2022-07-26 10:11:32.266 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.266 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-26 10:11:32.267 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.267 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :43ms
[2022-07-26 10:11:32.267 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.267 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-26 10:11:32.268 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.268 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :45ms
[2022-07-26 10:11:32.269 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.269 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :45ms
[2022-07-26 10:11:32.270 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.270 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :46ms
[2022-07-26 10:11:32.270 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :47ms
[2022-07-26 10:11:32.270 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.271 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :47ms
[2022-07-26 10:11:32.271 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.271 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :48ms
[2022-07-26 10:11:32.272 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.273 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :49ms
[2022-07-26 10:11:32.274 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.274 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :50ms
[2022-07-26 10:11:32.275 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.275 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :51ms
[2022-07-26 10:11:32.275 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.276 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :52ms
[2022-07-26 10:11:32.276 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :53ms
[2022-07-26 10:11:32.277 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.277 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :53ms
[2022-07-26 10:11:32.278 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.278 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :54ms
[2022-07-26 10:11:32.279 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.279 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :55ms
[2022-07-26 10:11:32.280 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.280 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :56ms
[2022-07-26 10:11:32.281 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.281 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :57ms
[2022-07-26 10:11:32.282 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.282 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :58ms
[2022-07-26 10:11:32.282 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-26 10:11:32.283 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.283 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :59ms
[2022-07-26 10:11:32.284 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.284 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :60ms
[2022-07-26 10:11:32.285 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.285 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :61ms
[2022-07-26 10:11:32.286 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.287 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :62ms
[2022-07-26 10:11:32.288 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.288 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :64ms
[2022-07-26 10:11:32.289 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.289 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :65ms
[2022-07-26 10:11:32.289 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :66ms
[2022-07-26 10:11:32.290 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.290 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :66ms
[2022-07-26 10:11:32.291 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.291 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :66ms
[2022-07-26 10:11:32.292 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.292 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :67ms
[2022-07-26 10:11:32.292 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.292 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :68ms
[2022-07-26 10:11:32.293 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.293 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :69ms
[2022-07-26 10:11:32.295 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.295 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :70ms
[2022-07-26 10:11:32.295 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :72ms
[2022-07-26 10:11:32.296 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.296 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :71ms
[2022-07-26 10:11:32.297 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.297 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :72ms
[2022-07-26 10:11:32.297 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.297 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :73ms
[2022-07-26 10:11:32.298 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.298 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :74ms
[2022-07-26 10:11:32.299 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.299 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :74ms
[2022-07-26 10:11:32.300 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.300 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :75ms
[2022-07-26 10:11:32.300 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :77ms
[2022-07-26 10:11:32.301 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.301 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :77ms
[2022-07-26 10:11:32.302 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.303 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :78ms
[2022-07-26 10:11:32.304 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.304 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :79ms
[2022-07-26 10:11:32.318 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:32.318 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :94ms
[2022-07-26 10:11:32.320 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:32.320 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :95ms
[2022-07-26 10:11:32.334 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:32.334 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :110ms
[2022-07-26 10:11:32.334 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :112ms
[2022-07-26 10:11:32.336 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.336 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :111ms
[2022-07-26 10:11:32.337 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.337 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :112ms
[2022-07-26 10:11:32.338 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.338 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :113ms
[2022-07-26 10:11:32.339 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.339 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :114ms
[2022-07-26 10:11:32.340 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.340 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :115ms
[2022-07-26 10:11:32.341 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.341 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :116ms
[2022-07-26 10:11:32.341 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :118ms
[2022-07-26 10:11:32.341 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.342 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :116ms
[2022-07-26 10:11:32.342 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.342 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :117ms
[2022-07-26 10:11:32.343 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.343 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :118ms
[2022-07-26 10:11:32.344 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.344 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :119ms
[2022-07-26 10:11:32.345 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.345 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :119ms
[2022-07-26 10:11:32.345 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.345 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :120ms
[2022-07-26 10:11:32.345 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :123ms
[2022-07-26 10:11:32.346 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.346 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :121ms
[2022-07-26 10:11:32.347 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.347 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :122ms
[2022-07-26 10:11:32.348 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.348 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :123ms
[2022-07-26 10:11:32.349 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.349 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :123ms
[2022-07-26 10:11:32.349 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.349 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :124ms
[2022-07-26 10:11:32.350 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.350 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :125ms
[2022-07-26 10:11:32.350 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :127ms
[2022-07-26 10:11:32.351 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.351 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :126ms
[2022-07-26 10:11:32.352 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.352 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :127ms
[2022-07-26 10:11:32.353 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.353 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :128ms
[2022-07-26 10:11:32.354 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.354 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :129ms
[2022-07-26 10:11:32.355 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.355 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :130ms
[2022-07-26 10:11:32.356 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.356 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :130ms
[2022-07-26 10:11:32.356 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :133ms
[2022-07-26 10:11:32.357 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.357 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :131ms
[2022-07-26 10:11:32.358 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.358 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :132ms
[2022-07-26 10:11:32.358 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:32.358 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :133ms
[2022-07-26 10:11:32.359 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.359 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :133ms
[2022-07-26 10:11:32.360 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :134ms
[2022-07-26 10:11:32.360 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:32.361 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :135ms
[2022-07-26 10:11:32.361 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :138ms
[2022-07-26 10:11:32.361 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :138ms
[2022-07-26 10:11:32.361 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:11:32.361 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 4683
[2022-07-26 10:11:32.361 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 140.0029ms
[2022-07-26 10:11:32.361 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:11:32.361 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"John","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Ben","employeeACENumber":"ACE9975","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jacobs M","employeeACENumber":"ACE1999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jordan","employeeACENumber":"ACE0010","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shane","employeeACENumber":"ACE0014","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Willams","employeeACENumber":"ACE0016","employeeRole":"Project Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Stokes","employeeACENumber":"ACE0007","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Board","employeeACENumber":"ACE0009","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jason","employeeACENumber":"ACE0011","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":1,"UtilizedInterviews":5,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":5,"TotalAvailability":5},"employee":{"employeeName":"Arnold","employeeACENumber":"ACE0013","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Hardin","employeeACENumber":"ACE0020","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shelin","employeeACENumber":"ACE00985","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Robert","employeeACENumber":"ACE00243","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jeremy Buendia","employeeACENumber":"ACE4000","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Maggie","employeeACENumber":"ACE2022","employeeRole":"Software Developer"}}]
[2022-07-26 10:11:32.362 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 39 - 200 4683 application/json;+charset=utf-8 141.3209ms
[2022-07-26 10:11:44.610 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 39
[2022-07-26 10:11:44.610 +05:30 INF] CORS policy execution successful.
[2022-07-26 10:11:44.611 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 39
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
Origin: [Redacted]
[2022-07-26 10:11:44.611 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:11:44.611 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:11:44.612 +05:30 INF] RequestBody: {"From":"2022-07-15","To":"2022-07-26"}
[2022-07-26 10:11:44.612 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:11:44.621 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-26 10:11:44.622 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :9ms
[2022-07-26 10:11:44.636 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.637 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :25ms
[2022-07-26 10:11:44.639 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.639 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :26ms
[2022-07-26 10:11:44.640 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.640 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :28ms
[2022-07-26 10:11:44.655 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 47)
[2022-07-26 10:11:44.655 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :43ms
[2022-07-26 10:11:44.657 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 47)
[2022-07-26 10:11:44.657 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :44ms
[2022-07-26 10:11:44.680 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 47)
[2022-07-26 10:11:44.680 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :68ms
[2022-07-26 10:11:44.680 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :68ms
[2022-07-26 10:11:44.682 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.682 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :69ms
[2022-07-26 10:11:44.683 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.683 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :70ms
[2022-07-26 10:11:44.684 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.684 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :71ms
[2022-07-26 10:11:44.688 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.688 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :75ms
[2022-07-26 10:11:44.689 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.689 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :76ms
[2022-07-26 10:11:44.690 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.690 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :77ms
[2022-07-26 10:11:44.690 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :78ms
[2022-07-26 10:11:44.691 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.691 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :78ms
[2022-07-26 10:11:44.692 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.692 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :79ms
[2022-07-26 10:11:44.693 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.693 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :80ms
[2022-07-26 10:11:44.694 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.694 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :81ms
[2022-07-26 10:11:44.696 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.696 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :83ms
[2022-07-26 10:11:44.697 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.697 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :84ms
[2022-07-26 10:11:44.697 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :84ms
[2022-07-26 10:11:44.698 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.698 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :85ms
[2022-07-26 10:11:44.699 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.699 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :86ms
[2022-07-26 10:11:44.700 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.700 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :87ms
[2022-07-26 10:11:44.701 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.701 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :88ms
[2022-07-26 10:11:44.702 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.702 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :89ms
[2022-07-26 10:11:44.703 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.703 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :90ms
[2022-07-26 10:11:44.703 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :91ms
[2022-07-26 10:11:44.704 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.704 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :91ms
[2022-07-26 10:11:44.705 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.705 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :92ms
[2022-07-26 10:11:44.706 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.706 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :93ms
[2022-07-26 10:11:44.707 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.707 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :94ms
[2022-07-26 10:11:44.708 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.708 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :95ms
[2022-07-26 10:11:44.709 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.709 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :96ms
[2022-07-26 10:11:44.709 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :97ms
[2022-07-26 10:11:44.710 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.711 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :97ms
[2022-07-26 10:11:44.712 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.712 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :98ms
[2022-07-26 10:11:44.713 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.713 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :99ms
[2022-07-26 10:11:44.714 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.714 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :100ms
[2022-07-26 10:11:44.715 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.715 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :101ms
[2022-07-26 10:11:44.716 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.716 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :102ms
[2022-07-26 10:11:44.716 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :104ms
[2022-07-26 10:11:44.718 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.718 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :104ms
[2022-07-26 10:11:44.719 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.719 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :105ms
[2022-07-26 10:11:44.720 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.720 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :106ms
[2022-07-26 10:11:44.721 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.721 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :107ms
[2022-07-26 10:11:44.722 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.722 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :108ms
[2022-07-26 10:11:44.723 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.723 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :109ms
[2022-07-26 10:11:44.723 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :111ms
[2022-07-26 10:11:44.724 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.724 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :110ms
[2022-07-26 10:11:44.725 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.725 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :111ms
[2022-07-26 10:11:44.726 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.726 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :112ms
[2022-07-26 10:11:44.727 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.727 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :113ms
[2022-07-26 10:11:44.728 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.728 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :114ms
[2022-07-26 10:11:44.729 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.729 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :115ms
[2022-07-26 10:11:44.729 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :117ms
[2022-07-26 10:11:44.730 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.730 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :116ms
[2022-07-26 10:11:44.731 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.731 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :117ms
[2022-07-26 10:11:44.732 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.733 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :118ms
[2022-07-26 10:11:44.733 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.734 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :119ms
[2022-07-26 10:11:44.735 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.735 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :120ms
[2022-07-26 10:11:44.736 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.736 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :121ms
[2022-07-26 10:11:44.736 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :123ms
[2022-07-26 10:11:44.737 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.737 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :122ms
[2022-07-26 10:11:44.738 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.738 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :124ms
[2022-07-26 10:11:44.740 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.740 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :125ms
[2022-07-26 10:11:44.756 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:44.756 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :141ms
[2022-07-26 10:11:44.757 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__isUtilized_1='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ((([e].[EmployeeId] = @__employeeId_0) AND ([e].[IsInterviewScheduled] = @__isUtilized_1)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit))) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:44.758 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :143ms
[2022-07-26 10:11:44.772 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[IsInterviewCancelled] = CAST(1 AS bit)) AND ([e].[EmployeeId] = @__employeeId_0)) AND ([e].[DriveId] = 63)
[2022-07-26 10:11:44.772 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :157ms
[2022-07-26 10:11:44.772 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :160ms
[2022-07-26 10:11:44.774 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.774 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :159ms
[2022-07-26 10:11:44.775 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.775 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :160ms
[2022-07-26 10:11:44.776 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.776 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :161ms
[2022-07-26 10:11:44.777 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.777 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :162ms
[2022-07-26 10:11:44.778 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.778 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :163ms
[2022-07-26 10:11:44.779 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.779 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :164ms
[2022-07-26 10:11:44.779 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :167ms
[2022-07-26 10:11:44.781 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.781 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :165ms
[2022-07-26 10:11:44.782 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.782 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :166ms
[2022-07-26 10:11:44.782 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.783 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :167ms
[2022-07-26 10:11:44.783 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.783 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :168ms
[2022-07-26 10:11:44.784 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.784 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :169ms
[2022-07-26 10:11:44.785 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.785 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :170ms
[2022-07-26 10:11:44.785 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :173ms
[2022-07-26 10:11:44.786 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.786 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :171ms
[2022-07-26 10:11:44.787 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.787 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :171ms
[2022-07-26 10:11:44.788 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.788 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :172ms
[2022-07-26 10:11:44.788 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.789 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :173ms
[2022-07-26 10:11:44.789 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.789 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :174ms
[2022-07-26 10:11:44.790 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.790 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :174ms
[2022-07-26 10:11:44.790 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :177ms
[2022-07-26 10:11:44.791 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.791 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :175ms
[2022-07-26 10:11:44.792 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.792 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :176ms
[2022-07-26 10:11:44.792 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.792 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :177ms
[2022-07-26 10:11:44.793 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.793 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :177ms
[2022-07-26 10:11:44.794 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.794 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :178ms
[2022-07-26 10:11:44.794 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.795 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :179ms
[2022-07-26 10:11:44.795 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :182ms
[2022-07-26 10:11:44.795 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.795 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :180ms
[2022-07-26 10:11:44.796 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.796 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :180ms
[2022-07-26 10:11:44.797 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND ((((@__fromDate_Date_2 >= CONVERT(date, [d].[FromDate])) AND (@__fromDate_Date_2 <= CONVERT(date, [d].[ToDate]))) OR ((@__toDate_Date_3 >= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 <= CONVERT(date, [d].[ToDate])))) OR ((@__fromDate_Date_2 <= CONVERT(date, [d].[FromDate])) AND (@__toDate_Date_3 >= CONVERT(date, [d].[ToDate]))))
[2022-07-26 10:11:44.797 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :181ms
[2022-07-26 10:11:44.798 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.798 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :182ms
[2022-07-26 10:11:44.798 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.798 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :183ms
[2022-07-26 10:11:44.799 +05:30 INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE 0 = 1
[2022-07-26 10:11:44.799 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :183ms
[2022-07-26 10:11:44.799 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :187ms
[2022-07-26 10:11:44.799 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :187ms
[2022-07-26 10:11:44.799 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-26 10:11:44.799 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 4683
[2022-07-26 10:11:44.800 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 188.7749ms
[2022-07-26 10:11:44.800 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-26 10:11:44.800 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":1,"DeniedDrives":2,"IgnoredDrives":0,"TotalDrives":3,"UtilizedInterviews":2,"NotUtilizedInterviews":1,"CancelledInterview":0,"SlotAvailabiltyGiven":3,"TotalAvailability":3},"employee":{"employeeName":"John","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Ben","employeeACENumber":"ACE9975","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jacobs M","employeeACENumber":"ACE1999","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jordan","employeeACENumber":"ACE0010","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shane","employeeACENumber":"ACE0014","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Willams","employeeACENumber":"ACE0016","employeeRole":"Project Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Stokes","employeeACENumber":"ACE0007","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Board","employeeACENumber":"ACE0009","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jason","employeeACENumber":"ACE0011","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":1,"DeniedDrives":0,"IgnoredDrives":1,"TotalDrives":2,"UtilizedInterviews":5,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":5,"TotalAvailability":5},"employee":{"employeeName":"Arnold","employeeACENumber":"ACE0013","employeeRole":"Senior Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Hardin","employeeACENumber":"ACE0020","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Shelin","employeeACENumber":"ACE00985","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Robert","employeeACENumber":"ACE00243","employeeRole":"Delivery Manager"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Jeremy Buendia","employeeACENumber":"ACE4000","employeeRole":"Module Lead"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"CancelledInterview":0,"SlotAvailabiltyGiven":0,"TotalAvailability":0},"employee":{"employeeName":"Maggie","employeeACENumber":"ACE2022","employeeRole":"Software Developer"}}]
[2022-07-26 10:11:44.800 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 39 - 200 4683 application/json;+charset=utf-8 190.0699ms
[2022-07-26 10:12:30.588 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDriveResponse?driveId=71 application/json -
[2022-07-26 10:12:30.589 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDriveResponse
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71
[2022-07-26 10:12:30.589 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewDriveResponse (Source)'
[2022-07-26 10:12:30.592 +05:30 INF] Route matched with {action = "ViewDriveResponse", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDriveResponse(Int32) on controller IMS.Controllers.DriveController (Source).
[2022-07-26 10:12:30.597 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-26 10:12:30.615 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.631 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [e0].[EmployeeId], [e0].[DepartmentId], [e0].[EmailId], [e0].[EmployeeAceNumber], [e0].[IsActive], [e0].[IsAdminAccepted], [e0].[IsAdminResponded], [e0].[Name], [e0].[Password], [e0].[ProjectId], [e0].[RoleId]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Employees] AS [e0] ON [e].[EmployeeId] = [e0].[EmployeeId]
WHERE [e].[DriveId] = @__driveId_0
[2022-07-26 10:12:30.632 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :35ms
[2022-07-26 10:12:30.632 +05:30 INF] Drive Service Time elapsed for  ViewDriveResponse(int driveId) :37ms
[2022-07-26 10:12:30.632 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.EmployeeDriveResponse, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType39`7[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-26 10:12:30.640 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.653 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32), @__status_2='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND ((([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewScheduled] = @__status_2)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit)))
[2022-07-26 10:12:30.653 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :49ms
[2022-07-26 10:12:30.654 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.655 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32), @__status_2='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND ((([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewScheduled] = @__status_2)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit)))
[2022-07-26 10:12:30.655 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :51ms
[2022-07-26 10:12:30.657 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.665 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND (([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewCancelled] = CAST(1 AS bit)))
[2022-07-26 10:12:30.665 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :60ms
[2022-07-26 10:12:30.669 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.670 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32), @__status_2='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND ((([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewScheduled] = @__status_2)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit)))
[2022-07-26 10:12:30.670 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :62ms
[2022-07-26 10:12:30.671 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.671 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32), @__status_2='?' (DbType = Boolean)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND ((([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewScheduled] = @__status_2)) AND ([e].[IsInterviewCancelled] = CAST(0 AS bit)))
[2022-07-26 10:12:30.671 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :63ms
[2022-07-26 10:12:30.672 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DriveId] = @__driveId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-26 10:12:30.673 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__driveId_0='?' (DbType = Int32), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [EmployeeAvailability] AS [e]
WHERE ([e].[DriveId] = @__driveId_0) AND (([e].[EmployeeId] = @__employeeId_1) AND ([e].[IsInterviewCancelled] = CAST(1 AS bit)))
[2022-07-26 10:12:30.673 +05:30 INF] Drive DAL Time elapsed for GetDriveResponse(int driveId)  :65ms
[2022-07-26 10:12:30.673 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 335
[2022-07-26 10:12:30.673 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewDriveResponse (Source) in 81.5796ms
[2022-07-26 10:12:30.673 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewDriveResponse (Source)'
[2022-07-26 10:12:30.673 +05:30 INF] RequestBody: 
[2022-07-26 10:12:30.673 +05:30 INF] ResponseBody: [{"employeeId":84,"employeeName":"Maggie","employeeACENumber":"ACE2022","responseType":"NotResponded","utilizedCount":0,"notUtilizedCount":0,"cancelledInterviewCount":0},{"employeeId":74,"employeeName":"Arnold","employeeACENumber":"ACE0013","responseType":"Accepted","utilizedCount":1,"notUtilizedCount":1,"cancelledInterviewCount":1}]
[2022-07-26 10:12:30.673 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/ViewDriveResponse?driveId=71 application/json - - 200 335 application/json;+charset=utf-8 85.7291ms
[2022-07-26 10:32:48.466 +05:30 INF] Application is shutting down...
