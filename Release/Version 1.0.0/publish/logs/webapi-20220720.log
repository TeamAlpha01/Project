[2022-07-20 17:14:59.262 +05:30 INF] User profile not available. Using 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\S-1-5-82-1361998291-1551570530-77267900-3141186879-3841397018\DataProtection' as key repository and Windows DPAPI to encrypt keys at rest.
[2022-07-20 17:14:59.498 +05:30 INF] Application started. Press Ctrl+C to shut down.
[2022-07-20 17:14:59.498 +05:30 INF] Hosting environment: Production
[2022-07-20 17:14:59.499 +05:30 INF] Content root path: C:\Local\publish\
[2022-07-20 17:14:59.571 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:14:59.571 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Location/ViewLocations - -
[2022-07-20 17:14:59.571 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:14:59.655 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:14:59.655 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:14:59.659 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:14:59.666 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 107.3279ms
[2022-07-20 17:14:59.666 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 107.3435ms
[2022-07-20 17:14:59.666 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Location/ViewLocations - - - 204 - - 107.3464ms
[2022-07-20 17:14:59.707 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json -
[2022-07-20 17:14:59.708 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:14:59.711 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:14:59.713 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:14:59.721 +05:30 WRN] Failed to determine the https port for redirect.
[2022-07-20 17:14:59.745 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:14:59.747 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:00.151 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:00.151 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:00.151 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Location/ViewLocations
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:00.160 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:15:00.160 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:15:00.160 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-20 17:15:00.187 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:15:00.187 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:15:00.187 +05:30 INF] Route matched with {action = "ViewLocations", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLocations() on controller IMS.Controllers.LocationController (Source).
[2022-07-20 17:15:03.006 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:03.006 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:03.006 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:04.832 +05:30 INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:15:04.832 +05:30 INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:15:04.832 +05:30 INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [Locations] AS [l]
WHERE [l].[IsActive] = CAST(1 AS bit)
ORDER BY [l].[LocationName]
[2022-07-20 17:15:05.102 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :4569ms
[2022-07-20 17:15:05.102 +05:30 INF] Location DAL Time elapsed for  GetLocationsFromDatabase() :4569ms
[2022-07-20 17:15:05.102 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :4574ms
[2022-07-20 17:15:05.102 +05:30 INF] Location Service Time elapsed for  ViewLocations() :4574ms
[2022-07-20 17:15:05.110 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:05.125 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Location, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:05.136 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4600ms
[2022-07-20 17:15:05.136 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4602ms
[2022-07-20 17:15:05.137 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:05.275 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1029
[2022-07-20 17:15:05.276 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:15:05.287 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:15:05.297 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 5102.0945ms
[2022-07-20 17:15:05.297 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 5102.0944ms
[2022-07-20 17:15:05.298 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:15:05.298 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:15:05.297 +05:30 INF] Executed action IMS.Controllers.LocationController.ViewLocations (Source) in 5102.0404ms
[2022-07-20 17:15:05.298 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-20 17:15:05.299 +05:30 INF] RequestBody: 
[2022-07-20 17:15:05.299 +05:30 INF] RequestBody: 
[2022-07-20 17:15:05.299 +05:30 INF] RequestBody: 
[2022-07-20 17:15:05.300 +05:30 INF] ResponseBody: [{"locationId":1,"locationName":"Chennai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":8,"locationName":"Coimbatore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":4,"locationName":"Delhi","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":6,"locationName":"Hyderabad","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":7,"locationName":"Kochin","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":3,"locationName":"Mumbai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":5,"locationName":"Noida","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]}]
[2022-07-20 17:15:05.300 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:15:05.300 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:15:05.304 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 5559.9229ms
[2022-07-20 17:15:05.305 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json - - 200 1029 application/json;+charset=utf-8 5597.1013ms
[2022-07-20 17:15:05.305 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5597.3526ms
[2022-07-20 17:15:06.734 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:15:06.735 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:06.735 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 1.2073ms
[2022-07-20 17:15:06.750 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 66
[2022-07-20 17:15:06.750 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:06.751 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:15:06.751 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 66
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:15:06.751 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:06.807 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:15:06.854 +05:30 INF] RequestBody: {"emailId":"prithvi.palani@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:15:07.282 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:07.437 +05:30 INF] Executed DbCommand (63ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:15:07.442 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:15:07.442 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :358ms
[2022-07-20 17:15:07.443 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:15:07.443 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :364ms
[2022-07-20 17:15:07.443 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:15:07.444 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:15:07.444 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:15:07.445 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 637.368ms
[2022-07-20 17:15:07.445 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:07.445 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:15:07.445 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 66 - 400 - text/plain;+charset=utf-8 695.3791ms
[2022-07-20 17:15:09.016 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:15:09.017 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:09.017 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.1027ms
[2022-07-20 17:15:09.021 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:15:09.037 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:09.039 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:09.039 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:15:09.044 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:15:09.047 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:15:09.060 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:09.106 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:15:09.167 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :108ms
[2022-07-20 17:15:09.327 +05:30 INF] Executed DbCommand (31ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.328 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :261ms
[2022-07-20 17:15:09.340 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.340 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :274ms
[2022-07-20 17:15:09.349 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.349 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :282ms
[2022-07-20 17:15:09.410 +05:30 INF] Executed DbCommand (40ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:15:09.410 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :343ms
[2022-07-20 17:15:09.418 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:15:09.418 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :351ms
[2022-07-20 17:15:09.459 +05:30 INF] Executed DbCommand (31ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:15:09.533 +05:30 INF] Executed DbCommand (49ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:15:09.533 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :351ms
[2022-07-20 17:15:09.534 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :478ms
[2022-07-20 17:15:09.550 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.550 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :367ms
[2022-07-20 17:15:09.551 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.551 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :368ms
[2022-07-20 17:15:09.552 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:15:09.552 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :369ms
[2022-07-20 17:15:09.565 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:15:09.565 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :382ms
[2022-07-20 17:15:09.566 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:15:09.566 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :383ms
[2022-07-20 17:15:09.581 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:15:09.597 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:15:09.598 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :383ms
[2022-07-20 17:15:09.598 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :542ms
[2022-07-20 17:15:09.598 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :542ms
[2022-07-20 17:15:09.598 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:15:09.605 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:15:09.605 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 560.88ms
[2022-07-20 17:15:09.605 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:15:09.605 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:15:09.605 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 584.9978ms
[2022-07-20 17:15:10.187 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:15:10.188 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:10.188 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.6934ms
[2022-07-20 17:15:10.204 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:15:10.204 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:10.204 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:15:10.204 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:15:10.204 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:10.205 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:15:10.205 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:15:10.207 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:10.212 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:15:10.213 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:15:10.213 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:15:10.213 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:15:10.214 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:15:10.214 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:15:10.214 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:15:10.215 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:15:10.215 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 10.6532ms
[2022-07-20 17:15:10.215 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:10.215 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:15:10.216 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 12.0180ms
[2022-07-20 17:15:30.264 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:15:30.265 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:30.266 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 2.2192ms
[2022-07-20 17:15:30.276 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:15:30.277 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:30.278 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:15:30.278 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:15:30.278 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:30.278 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:15:30.281 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:15:30.282 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:30.288 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:15:30.288 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:15:30.289 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:15:30.289 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:15:30.289 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:15:30.289 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:15:30.289 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:15:30.289 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:15:30.290 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 11.6357ms
[2022-07-20 17:15:30.290 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:30.290 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:15:30.290 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 14.0812ms
[2022-07-20 17:15:31.495 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:15:31.496 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:31.496 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:15:31.496 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:15:31.496 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:31.496 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:15:31.497 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:15:31.498 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:31.502 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:15:31.503 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:15:31.503 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :5ms
[2022-07-20 17:15:31.503 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:15:31.503 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :6ms
[2022-07-20 17:15:31.503 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:15:31.503 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:15:31.503 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:15:31.504 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 7.4808ms
[2022-07-20 17:15:31.504 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:31.504 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:15:31.504 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 8.4198ms
[2022-07-20 17:15:36.716 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:15:36.717 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:36.717 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.8472ms
[2022-07-20 17:15:36.727 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:15:36.728 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:36.728 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:15:36.728 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:15:36.728 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:36.728 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:15:36.729 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:15:36.730 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:36.735 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:15:36.735 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:15:36.735 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :6ms
[2022-07-20 17:15:36.736 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:15:36.736 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :6ms
[2022-07-20 17:15:36.736 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:15:36.736 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:15:36.736 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:15:36.737 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 8.5033ms
[2022-07-20 17:15:36.737 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:15:36.737 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:15:36.737 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 10.0744ms
[2022-07-20 17:15:37.848 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:15:37.848 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.849 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6442ms
[2022-07-20 17:15:37.850 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:15:37.850 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.851 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.6562ms
[2022-07-20 17:15:37.852 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Location/ViewLocations - -
[2022-07-20 17:15:37.852 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.852 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Location/ViewLocations - - - 204 - - 0.4769ms
[2022-07-20 17:15:37.863 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:15:37.864 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.865 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:37.865 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:15:37.866 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:15:37.867 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:15:37.867 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.868 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json -
[2022-07-20 17:15:37.868 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:15:37.868 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:37.868 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:15:37.868 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:37.868 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:15:37.868 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Location/ViewLocations
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:15:37.868 +05:30 INF] Executing endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-20 17:15:37.869 +05:30 INF] Route matched with {action = "ViewLocations", controller = "Location"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLocations() on controller IMS.Controllers.LocationController (Source).
[2022-07-20 17:15:37.870 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:37.870 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:15:37.876 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [Locations] AS [l]
WHERE [l].[IsActive] = CAST(1 AS bit)
ORDER BY [l].[LocationName]
[2022-07-20 17:15:37.876 +05:30 INF] Location DAL Time elapsed for  GetLocationsFromDatabase() :7ms
[2022-07-20 17:15:37.876 +05:30 INF] Location Service Time elapsed for  ViewLocations() :7ms
[2022-07-20 17:15:37.876 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Location, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:37.877 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1029
[2022-07-20 17:15:37.877 +05:30 INF] Executed action IMS.Controllers.LocationController.ViewLocations (Source) in 8.66ms
[2022-07-20 17:15:37.877 +05:30 INF] Executed endpoint 'IMS.Controllers.LocationController.ViewLocations (Source)'
[2022-07-20 17:15:37.877 +05:30 INF] RequestBody: 
[2022-07-20 17:15:37.877 +05:30 INF] ResponseBody: [{"locationId":1,"locationName":"Chennai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":8,"locationName":"Coimbatore","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":4,"locationName":"Delhi","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":6,"locationName":"Hyderabad","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":7,"locationName":"Kochin","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":3,"locationName":"Mumbai","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]},{"locationId":5,"locationName":"Noida","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"drivesUnderLocation":[]}]
[2022-07-20 17:15:37.878 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Location/ViewLocations application/json - - 200 1029 application/json;+charset=utf-8 10.2491ms
[2022-07-20 17:15:37.879 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:15:37.880 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :13ms
[2022-07-20 17:15:37.880 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :13ms
[2022-07-20 17:15:37.880 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:37.880 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:15:37.880 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 14.5933ms
[2022-07-20 17:15:37.880 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:15:37.880 +05:30 INF] RequestBody: 
[2022-07-20 17:15:37.880 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:15:37.880 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:15:37.881 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 17.2349ms
[2022-07-20 17:15:37.882 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :12ms
[2022-07-20 17:15:37.882 +05:30 INF] Pool Service Time elapsed for  ViewPools() :12ms
[2022-07-20 17:15:37.882 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:15:37.882 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:15:37.883 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 14.1616ms
[2022-07-20 17:15:37.883 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:15:37.883 +05:30 INF] RequestBody: 
[2022-07-20 17:15:37.883 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:15:37.883 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 15.9794ms
[2022-07-20 17:16:01.660 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - -
[2022-07-20 17:16:01.660 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:01.661 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - - - 204 - - 0.4459ms
[2022-07-20 17:16:01.672 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 29
[2022-07-20 17:16:01.673 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:01.674 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 29
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:16:01.674 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 17:16:01.677 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:16:01.678 +05:30 INF] RequestBody: {"_fromDate":"","_toDate":""}
[2022-07-20 17:16:01.683 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:16:01.698 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:01.699 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-20 17:16:01.700 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:01.700 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-20 17:16:01.701 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:01.701 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-20 17:16:01.711 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:16:01.712 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :28ms
[2022-07-20 17:16:01.712 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:16:01.712 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :29ms
[2022-07-20 17:16:01.721 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:16:01.735 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:16:01.735 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :29ms
[2022-07-20 17:16:01.735 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :52ms
[2022-07-20 17:16:01.735 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:16:01.735 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-20 17:16:01.735 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 58.4305ms
[2022-07-20 17:16:01.736 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 17:16:01.736 +05:30 INF] ResponseBody: {"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0}
[2022-07-20 17:16:01.736 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 29 - 200 190 application/json;+charset=utf-8 63.4423ms
[2022-07-20 17:16:18.495 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - -
[2022-07-20 17:16:18.496 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:18.496 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - - - 204 - - 0.9406ms
[2022-07-20 17:16:18.504 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 29
[2022-07-20 17:16:18.504 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:18.506 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 29
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:16:18.506 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 17:16:18.506 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:16:18.508 +05:30 INF] RequestBody: {"_fromDate":"","_toDate":""}
[2022-07-20 17:16:18.509 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:16:18.529 +05:30 INF] Executed DbCommand (19ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:18.529 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-20 17:16:18.530 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:18.530 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :21ms
[2022-07-20 17:16:18.531 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:16:18.531 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 17:16:18.543 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:16:18.543 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-20 17:16:18.544 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:16:18.544 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-20 17:16:18.553 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:16:18.568 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:16:18.568 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :35ms
[2022-07-20 17:16:18.568 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :60ms
[2022-07-20 17:16:18.569 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:16:18.569 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-20 17:16:18.569 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 62.8335ms
[2022-07-20 17:16:18.569 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 17:16:18.569 +05:30 INF] ResponseBody: {"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0}
[2022-07-20 17:16:18.569 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 29 - 200 190 application/json;+charset=utf-8 65.0892ms
[2022-07-20 17:16:30.283 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:16:30.283 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:30.284 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 1.0515ms
[2022-07-20 17:16:30.297 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:16:30.298 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:16:30.298 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:16:30.298 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:16:30.298 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:16:30.298 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:16:30.299 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:16:30.301 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:16:30.305 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:16:30.306 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:16:30.306 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :6ms
[2022-07-20 17:16:30.306 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:16:30.307 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :6ms
[2022-07-20 17:16:30.307 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:16:30.307 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:16:30.307 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:16:30.308 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 8.9544ms
[2022-07-20 17:16:30.308 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:16:30.308 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:16:30.308 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 10.6515ms
[2022-07-20 17:17:16.934 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:17:16.934 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.935 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.3517ms
[2022-07-20 17:17:16.936 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:17:16.936 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.936 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:16.937 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:16.937 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:17:16.942 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:16.947 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:17:16.948 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :8ms
[2022-07-20 17:17:16.948 +05:30 INF] Pool Service Time elapsed for  ViewPools() :8ms
[2022-07-20 17:17:16.948 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:17:16.948 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:17:16.948 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.7583ms
[2022-07-20 17:17:16.948 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:16.948 +05:30 INF] RequestBody: 
[2022-07-20 17:17:16.949 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:17:16.949 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 12.7756ms
[2022-07-20 17:17:16.950 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:17:16.950 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.950 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.3749ms
[2022-07-20 17:17:16.951 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:17:16.951 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.952 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:17:16.952 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:16.952 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.952 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:16.952 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:16.952 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2479ms
[2022-07-20 17:17:16.952 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:17:16.953 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:16.953 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:17:16.953 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:16.955 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:16.955 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:16.958 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:16.964 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:17:16.964 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :12ms
[2022-07-20 17:17:16.965 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:16.983 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:17:16.983 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:17:16.983 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :22ms
[2022-07-20 17:17:16.984 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:17:16.984 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:17:16.984 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:17:16.985 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 26.3139ms
[2022-07-20 17:17:16.985 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:16.985 +05:30 INF] RequestBody: 
[2022-07-20 17:17:16.985 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:17:16.985 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 31.7260ms
[2022-07-20 17:17:16.987 +05:30 INF] Executed DbCommand (22ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:16.987 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :34ms
[2022-07-20 17:17:16.990 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:16.990 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :38ms
[2022-07-20 17:17:16.997 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:16.997 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-20 17:17:17.004 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:17.004 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :51ms
[2022-07-20 17:17:17.005 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:17.006 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :52ms
[2022-07-20 17:17:17.012 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:17.023 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:17.023 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :52ms
[2022-07-20 17:17:17.024 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :71ms
[2022-07-20 17:17:17.026 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:17.026 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :55ms
[2022-07-20 17:17:17.028 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:17.028 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :56ms
[2022-07-20 17:17:17.029 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:17.029 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :57ms
[2022-07-20 17:17:17.029 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:17.029 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :58ms
[2022-07-20 17:17:17.030 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:17.030 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :58ms
[2022-07-20 17:17:17.030 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:17.031 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:17.031 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :58ms
[2022-07-20 17:17:17.031 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :78ms
[2022-07-20 17:17:17.031 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :78ms
[2022-07-20 17:17:17.031 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:17:17.031 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:17:17.031 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 79.4313ms
[2022-07-20 17:17:17.031 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:17.031 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:17:17.031 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 80.5551ms
[2022-07-20 17:17:21.149 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:17:21.150 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:21.154 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:21.155 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:21.155 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:17:21.159 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:21.165 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:17:21.165 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:21.165 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:17:21.166 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:21.166 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :10ms
[2022-07-20 17:17:21.166 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:21.166 +05:30 INF] Pool Service Time elapsed for  ViewPools() :10ms
[2022-07-20 17:17:21.166 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:21.166 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:17:21.167 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:17:21.167 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:17:21.167 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 12.5809ms
[2022-07-20 17:17:21.167 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:21.167 +05:30 INF] RequestBody: 
[2022-07-20 17:17:21.168 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:17:21.168 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 18.4314ms
[2022-07-20 17:17:21.168 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:21.174 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:17:21.175 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:21.175 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:17:21.175 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:21.175 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:21.175 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:21.175 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :7ms
[2022-07-20 17:17:21.176 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:21.182 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:17:21.183 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:17:21.183 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :7ms
[2022-07-20 17:17:21.183 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:17:21.184 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:17:21.184 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:17:21.184 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 8.932ms
[2022-07-20 17:17:21.184 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:21.184 +05:30 INF] RequestBody: 
[2022-07-20 17:17:21.184 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:17:21.184 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 9.9346ms
[2022-07-20 17:17:21.188 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.188 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-20 17:17:21.189 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.189 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :21ms
[2022-07-20 17:17:21.190 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.190 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 17:17:21.202 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:21.202 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-20 17:17:21.203 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:21.203 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-20 17:17:21.210 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:21.227 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:21.227 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :35ms
[2022-07-20 17:17:21.227 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-20 17:17:21.228 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.228 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :36ms
[2022-07-20 17:17:21.229 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.229 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :37ms
[2022-07-20 17:17:21.230 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:21.230 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :38ms
[2022-07-20 17:17:21.231 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:21.231 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :38ms
[2022-07-20 17:17:21.231 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:21.231 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-20 17:17:21.232 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:21.233 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:21.233 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :39ms
[2022-07-20 17:17:21.233 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:21.233 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:21.233 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:17:21.234 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:17:21.234 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 67.7361ms
[2022-07-20 17:17:21.234 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:21.234 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:17:21.234 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 68.9838ms
[2022-07-20 17:17:33.871 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:17:33.872 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.875 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 3.8025ms
[2022-07-20 17:17:33.891 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:17:33.891 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.893 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.4556ms
[2022-07-20 17:17:33.893 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:17:33.893 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.893 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:17:33.894 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.894 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:33.894 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:33.894 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:33.894 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:33.894 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:33.894 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:17:33.894 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:17:33.895 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:33.895 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:33.899 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:17:33.900 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :5ms
[2022-07-20 17:17:33.900 +05:30 INF] Pool Service Time elapsed for  ViewPools() :5ms
[2022-07-20 17:17:33.900 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:17:33.900 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:17:33.901 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 6.6744ms
[2022-07-20 17:17:33.901 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:33.901 +05:30 INF] RequestBody: 
[2022-07-20 17:17:33.901 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:17:33.901 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 7.4481ms
[2022-07-20 17:17:33.904 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:17:33.905 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :10ms
[2022-07-20 17:17:33.907 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:17:33.907 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.908 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 1.1381ms
[2022-07-20 17:17:33.910 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:17:33.910 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:33.911 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:33.911 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:33.911 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:33.913 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:33.914 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.914 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-20 17:17:33.916 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:17:33.916 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.916 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :21ms
[2022-07-20 17:17:33.916 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:17:33.916 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :4ms
[2022-07-20 17:17:33.916 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:17:33.916 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:17:33.917 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:17:33.917 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.917 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 17:17:33.917 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.0122ms
[2022-07-20 17:17:33.917 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:33.917 +05:30 INF] RequestBody: 
[2022-07-20 17:17:33.917 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:17:33.918 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.8264ms
[2022-07-20 17:17:33.929 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:33.929 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-20 17:17:33.930 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:33.930 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-20 17:17:33.940 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:33.954 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:33.954 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :35ms
[2022-07-20 17:17:33.954 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-20 17:17:33.955 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.956 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :36ms
[2022-07-20 17:17:33.956 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.956 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :37ms
[2022-07-20 17:17:33.957 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:33.957 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :38ms
[2022-07-20 17:17:33.958 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:33.958 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-20 17:17:33.959 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:33.959 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-20 17:17:33.959 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:33.960 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:33.960 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :39ms
[2022-07-20 17:17:33.960 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:33.960 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:33.960 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:17:33.960 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:17:33.961 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 66.6094ms
[2022-07-20 17:17:33.961 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:33.961 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:17:33.961 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 67.4814ms
[2022-07-20 17:17:38.888 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:17:38.888 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.889 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.5268ms
[2022-07-20 17:17:38.890 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:17:38.890 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.890 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:38.890 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:38.890 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:17:38.891 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:38.898 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:17:38.898 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :7ms
[2022-07-20 17:17:38.898 +05:30 INF] Pool Service Time elapsed for  ViewPools() :7ms
[2022-07-20 17:17:38.898 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:17:38.898 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:17:38.899 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 8.3665ms
[2022-07-20 17:17:38.899 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:38.899 +05:30 INF] RequestBody: 
[2022-07-20 17:17:38.899 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:17:38.899 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 9.3495ms
[2022-07-20 17:17:38.904 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:17:38.906 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.907 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 2.7046ms
[2022-07-20 17:17:38.910 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:17:38.910 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.910 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:38.911 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:38.911 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:38.911 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:17:38.912 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:38.913 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:17:38.913 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.914 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.6429ms
[2022-07-20 17:17:38.931 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:17:38.931 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:38.931 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:38.932 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:38.932 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:38.933 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:38.943 +05:30 INF] Executed DbCommand (30ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:17:38.943 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :31ms
[2022-07-20 17:17:38.945 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:17:38.945 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:17:38.945 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :12ms
[2022-07-20 17:17:38.945 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:17:38.946 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:17:38.946 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:17:38.946 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 14.6275ms
[2022-07-20 17:17:38.946 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:38.946 +05:30 INF] RequestBody: 
[2022-07-20 17:17:38.946 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:17:38.947 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 15.7750ms
[2022-07-20 17:17:38.955 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.955 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :43ms
[2022-07-20 17:17:38.956 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.956 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-20 17:17:38.957 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.957 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-20 17:17:38.967 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:38.968 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :56ms
[2022-07-20 17:17:38.970 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:38.970 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :57ms
[2022-07-20 17:17:38.979 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:38.995 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:38.995 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :57ms
[2022-07-20 17:17:38.995 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :83ms
[2022-07-20 17:17:38.996 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.996 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :58ms
[2022-07-20 17:17:38.997 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.997 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :59ms
[2022-07-20 17:17:38.997 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:38.998 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :59ms
[2022-07-20 17:17:38.998 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:38.998 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :60ms
[2022-07-20 17:17:38.998 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:38.998 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :60ms
[2022-07-20 17:17:38.999 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:39.000 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:39.000 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :60ms
[2022-07-20 17:17:39.000 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :88ms
[2022-07-20 17:17:39.000 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :88ms
[2022-07-20 17:17:39.000 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:17:39.000 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:17:39.001 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 89.6173ms
[2022-07-20 17:17:39.001 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:39.001 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:17:39.001 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 90.9738ms
[2022-07-20 17:17:41.816 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:17:41.817 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:41.818 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:41.819 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:41.819 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:17:41.820 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:41.825 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:17:41.825 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :6ms
[2022-07-20 17:17:41.825 +05:30 INF] Pool Service Time elapsed for  ViewPools() :6ms
[2022-07-20 17:17:41.825 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:17:41.826 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:17:41.826 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 7.1283ms
[2022-07-20 17:17:41.826 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:17:41.826 +05:30 INF] RequestBody: 
[2022-07-20 17:17:41.826 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:17:41.826 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 9.8673ms
[2022-07-20 17:17:41.828 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:17:41.828 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:41.829 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:41.829 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:41.829 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:41.829 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:17:41.830 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:41.834 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:17:41.834 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:17:41.835 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:17:41.835 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:41.835 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:17:41.836 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:17:41.837 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:17:41.837 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :7ms
[2022-07-20 17:17:41.840 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:17:41.840 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:17:41.840 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :5ms
[2022-07-20 17:17:41.840 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:17:41.841 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:17:41.841 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:17:41.841 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.3406ms
[2022-07-20 17:17:41.841 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:17:41.841 +05:30 INF] RequestBody: 
[2022-07-20 17:17:41.841 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:17:41.841 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.2964ms
[2022-07-20 17:17:41.852 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.852 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 17:17:41.853 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.853 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :23ms
[2022-07-20 17:17:41.854 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.854 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:17:41.866 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:41.866 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :36ms
[2022-07-20 17:17:41.868 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:41.868 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :38ms
[2022-07-20 17:17:41.874 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:41.889 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:41.889 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :38ms
[2022-07-20 17:17:41.889 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-20 17:17:41.890 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.890 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :39ms
[2022-07-20 17:17:41.891 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.891 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :40ms
[2022-07-20 17:17:41.892 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:17:41.892 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :41ms
[2022-07-20 17:17:41.893 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:41.893 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :42ms
[2022-07-20 17:17:41.893 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:17:41.893 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :42ms
[2022-07-20 17:17:41.894 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:17:41.895 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:17:41.895 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :42ms
[2022-07-20 17:17:41.895 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:41.895 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :65ms
[2022-07-20 17:17:41.895 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:17:41.895 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:17:41.895 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 66.4728ms
[2022-07-20 17:17:41.895 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:17:41.895 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:17:41.896 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 67.4849ms
[2022-07-20 17:18:45.908 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:18:45.908 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:45.909 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6712ms
[2022-07-20 17:18:45.911 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:18:45.911 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:45.912 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:45.912 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:18:45.912 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:18:45.916 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:18:45.916 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:45.916 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:45.916 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.3537ms
[2022-07-20 17:18:45.917 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:18:45.917 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:45.917 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1869ms
[2022-07-20 17:18:45.919 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:18:45.919 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:45.919 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:45.919 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:18:45.920 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:18:45.920 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:45.922 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:18:45.922 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :10ms
[2022-07-20 17:18:45.922 +05:30 INF] Pool Service Time elapsed for  ViewPools() :10ms
[2022-07-20 17:18:45.923 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:18:45.923 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:18:45.924 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.9886ms
[2022-07-20 17:18:45.924 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:18:45.924 +05:30 INF] RequestBody: 
[2022-07-20 17:18:45.924 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:18:45.924 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 13.3756ms
[2022-07-20 17:18:45.974 +05:30 INF] Executed DbCommand (53ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:18:45.974 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:18:45.974 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :54ms
[2022-07-20 17:18:45.975 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:18:45.975 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:18:45.975 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:18:45.975 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 55.5747ms
[2022-07-20 17:18:45.975 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:18:45.975 +05:30 INF] RequestBody: 
[2022-07-20 17:18:45.975 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:18:45.983 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 63.9009ms
[2022-07-20 17:18:46.003 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:18:46.003 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:46.004 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:46.004 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:18:46.004 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:18:46.004 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:18:46.011 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:46.126 +05:30 INF] Executed DbCommand (115ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:18:46.127 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :122ms
[2022-07-20 17:18:46.209 +05:30 INF] Executed DbCommand (81ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.209 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :204ms
[2022-07-20 17:18:46.257 +05:30 INF] Executed DbCommand (48ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.257 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :253ms
[2022-07-20 17:18:46.295 +05:30 INF] Executed DbCommand (37ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.295 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :290ms
[2022-07-20 17:18:46.308 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:46.309 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :304ms
[2022-07-20 17:18:46.311 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:46.311 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :306ms
[2022-07-20 17:18:46.327 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:18:46.354 +05:30 INF] Executed DbCommand (27ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:18:46.354 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :306ms
[2022-07-20 17:18:46.354 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :350ms
[2022-07-20 17:18:46.356 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.356 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :307ms
[2022-07-20 17:18:46.406 +05:30 INF] Executed DbCommand (50ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.406 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :358ms
[2022-07-20 17:18:46.413 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:46.413 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :365ms
[2022-07-20 17:18:46.437 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:46.437 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :389ms
[2022-07-20 17:18:46.439 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:46.439 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :391ms
[2022-07-20 17:18:46.460 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:18:46.482 +05:30 INF] Executed DbCommand (22ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:18:46.482 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :391ms
[2022-07-20 17:18:46.482 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :477ms
[2022-07-20 17:18:46.482 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :477ms
[2022-07-20 17:18:46.482 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:18:46.482 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:18:46.483 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 478.9006ms
[2022-07-20 17:18:46.483 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:18:46.483 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:18:46.483 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 479.8373ms
[2022-07-20 17:18:57.096 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:18:57.097 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.098 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.9132ms
[2022-07-20 17:18:57.103 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:18:57.104 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.104 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:57.104 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:18:57.105 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:18:57.105 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:57.118 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:18:57.119 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.119 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.5011ms
[2022-07-20 17:18:57.119 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:18:57.119 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.120 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2095ms
[2022-07-20 17:18:57.122 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:18:57.122 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :17ms
[2022-07-20 17:18:57.122 +05:30 INF] Pool Service Time elapsed for  ViewPools() :17ms
[2022-07-20 17:18:57.122 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:18:57.123 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:18:57.123 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 18.487ms
[2022-07-20 17:18:57.123 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:18:57.123 +05:30 INF] RequestBody: 
[2022-07-20 17:18:57.123 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:18:57.123 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 19.9591ms
[2022-07-20 17:18:57.126 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:18:57.126 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.127 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:57.127 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:18:57.127 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:18:57.128 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:18:57.129 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:57.132 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:18:57.132 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:18:57.132 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:18:57.133 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:18:57.133 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:18:57.133 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:18:57.138 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:18:57.138 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:18:57.139 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :5ms
[2022-07-20 17:18:57.139 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:18:57.139 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:18:57.139 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:18:57.139 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.7014ms
[2022-07-20 17:18:57.139 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:18:57.139 +05:30 INF] RequestBody: 
[2022-07-20 17:18:57.139 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:18:57.140 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.7521ms
[2022-07-20 17:18:57.141 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:18:57.141 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :13ms
[2022-07-20 17:18:57.163 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.163 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :35ms
[2022-07-20 17:18:57.165 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.165 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :37ms
[2022-07-20 17:18:57.166 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.166 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :38ms
[2022-07-20 17:18:57.173 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:57.173 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :44ms
[2022-07-20 17:18:57.174 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:57.174 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :45ms
[2022-07-20 17:18:57.180 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:18:57.188 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:18:57.188 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :45ms
[2022-07-20 17:18:57.188 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-20 17:18:57.190 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.190 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :47ms
[2022-07-20 17:18:57.196 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.196 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :53ms
[2022-07-20 17:18:57.198 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:18:57.199 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :56ms
[2022-07-20 17:18:57.203 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:57.203 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :60ms
[2022-07-20 17:18:57.220 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:18:57.220 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :77ms
[2022-07-20 17:18:57.238 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:18:57.243 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:18:57.243 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :77ms
[2022-07-20 17:18:57.243 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :115ms
[2022-07-20 17:18:57.243 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :115ms
[2022-07-20 17:18:57.243 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:18:57.243 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:18:57.244 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 116.6936ms
[2022-07-20 17:18:57.244 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:18:57.244 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:18:57.245 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 118.4419ms
[2022-07-20 17:19:21.238 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:19:21.238 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.241 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 3.2411ms
[2022-07-20 17:19:21.247 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:19:21.247 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.248 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:21.248 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:21.248 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:19:21.248 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:21.256 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:19:21.256 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :7ms
[2022-07-20 17:19:21.256 +05:30 INF] Pool Service Time elapsed for  ViewPools() :7ms
[2022-07-20 17:19:21.256 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:19:21.256 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:19:21.257 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 8.6094ms
[2022-07-20 17:19:21.257 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:21.257 +05:30 INF] RequestBody: 
[2022-07-20 17:19:21.257 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:19:21.257 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 9.6013ms
[2022-07-20 17:19:21.267 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:19:21.267 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.267 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.3229ms
[2022-07-20 17:19:21.272 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:19:21.272 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.272 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:21.272 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:21.272 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:21.273 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:19:21.273 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:19:21.273 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.275 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:21.276 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 2.5007ms
[2022-07-20 17:19:21.278 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:19:21.279 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:21.280 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:21.280 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:21.280 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:21.282 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:21.294 +05:30 INF] Executed DbCommand (18ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:19:21.295 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :21ms
[2022-07-20 17:19:21.310 +05:30 INF] Executed DbCommand (27ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:19:21.312 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:19:21.315 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :33ms
[2022-07-20 17:19:21.315 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:19:21.315 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:19:21.315 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:19:21.316 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 36.1794ms
[2022-07-20 17:19:21.316 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:21.316 +05:30 INF] RequestBody: 
[2022-07-20 17:19:21.316 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:19:21.317 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 38.6721ms
[2022-07-20 17:19:21.326 +05:30 INF] Executed DbCommand (30ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.326 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :52ms
[2022-07-20 17:19:21.330 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.330 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :55ms
[2022-07-20 17:19:21.330 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.331 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :56ms
[2022-07-20 17:19:21.358 +05:30 INF] Executed DbCommand (26ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:21.359 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :84ms
[2022-07-20 17:19:21.363 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:21.363 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :89ms
[2022-07-20 17:19:21.382 +05:30 INF] Executed DbCommand (18ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:21.405 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:21.411 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :89ms
[2022-07-20 17:19:21.411 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :137ms
[2022-07-20 17:19:21.413 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.413 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :91ms
[2022-07-20 17:19:21.414 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.414 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :92ms
[2022-07-20 17:19:21.415 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:21.415 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :93ms
[2022-07-20 17:19:21.416 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:21.416 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :93ms
[2022-07-20 17:19:21.430 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:21.430 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :107ms
[2022-07-20 17:19:21.440 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:21.451 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:21.452 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :107ms
[2022-07-20 17:19:21.452 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :178ms
[2022-07-20 17:19:21.452 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :178ms
[2022-07-20 17:19:21.452 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:19:21.452 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:19:21.452 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 179.7614ms
[2022-07-20 17:19:21.452 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:21.452 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:19:21.452 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 180.9456ms
[2022-07-20 17:19:26.857 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:19:26.857 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.860 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 3.3381ms
[2022-07-20 17:19:26.862 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:19:26.862 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.863 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.8369ms
[2022-07-20 17:19:26.868 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:19:26.868 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.870 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:26.870 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:26.870 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:19:26.872 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:26.873 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:19:26.873 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.874 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:26.874 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:26.874 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:26.875 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:19:26.876 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:26.877 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:19:26.877 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.877 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2746ms
[2022-07-20 17:19:26.886 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:19:26.886 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :15ms
[2022-07-20 17:19:26.886 +05:30 INF] Pool Service Time elapsed for  ViewPools() :15ms
[2022-07-20 17:19:26.887 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:19:26.887 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:19:26.887 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 16.8775ms
[2022-07-20 17:19:26.887 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:26.887 +05:30 INF] RequestBody: 
[2022-07-20 17:19:26.887 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:19:26.887 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 19.1227ms
[2022-07-20 17:19:26.892 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:19:26.893 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :17ms
[2022-07-20 17:19:26.895 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:19:26.895 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:26.896 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:26.896 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:26.896 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:26.898 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:26.901 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:19:26.902 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:19:26.902 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :5ms
[2022-07-20 17:19:26.902 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:19:26.902 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:19:26.903 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:19:26.903 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.2885ms
[2022-07-20 17:19:26.903 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:26.903 +05:30 INF] RequestBody: 
[2022-07-20 17:19:26.903 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:19:26.903 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.1484ms
[2022-07-20 17:19:26.906 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:26.906 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :30ms
[2022-07-20 17:19:26.909 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:26.909 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-20 17:19:26.910 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:26.910 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :34ms
[2022-07-20 17:19:26.922 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:26.923 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :46ms
[2022-07-20 17:19:26.924 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:26.924 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :48ms
[2022-07-20 17:19:26.938 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:26.987 +05:30 INF] Executed DbCommand (48ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:26.987 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :48ms
[2022-07-20 17:19:26.987 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :111ms
[2022-07-20 17:19:27.012 +05:30 INF] Executed DbCommand (25ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:27.012 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :73ms
[2022-07-20 17:19:27.025 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:27.025 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :86ms
[2022-07-20 17:19:27.026 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:27.026 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :87ms
[2022-07-20 17:19:27.026 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:27.026 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :87ms
[2022-07-20 17:19:27.027 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:27.027 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :88ms
[2022-07-20 17:19:27.028 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:27.041 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:27.041 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :88ms
[2022-07-20 17:19:27.041 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :166ms
[2022-07-20 17:19:27.042 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :166ms
[2022-07-20 17:19:27.042 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:19:27.042 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:19:27.042 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 167.6807ms
[2022-07-20 17:19:27.042 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:27.042 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:19:27.042 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 169.2543ms
[2022-07-20 17:19:28.414 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:19:28.414 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:28.414 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:28.414 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:28.414 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:19:28.415 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:28.423 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:19:28.424 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :9ms
[2022-07-20 17:19:28.424 +05:30 INF] Pool Service Time elapsed for  ViewPools() :9ms
[2022-07-20 17:19:28.424 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:19:28.424 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:19:28.424 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 9.8011ms
[2022-07-20 17:19:28.424 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:19:28.424 +05:30 INF] RequestBody: 
[2022-07-20 17:19:28.424 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:19:28.424 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 10.6320ms
[2022-07-20 17:19:28.425 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:19:28.425 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:28.425 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:28.425 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:28.425 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:28.425 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:19:28.426 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:28.460 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:19:28.460 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:19:28.460 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:19:28.461 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:28.461 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:19:28.461 +05:30 INF] Executed DbCommand (35ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:19:28.461 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :35ms
[2022-07-20 17:19:28.461 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:19:28.491 +05:30 INF] Executed DbCommand (30ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:19:28.492 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:19:28.492 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :30ms
[2022-07-20 17:19:28.492 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:19:28.492 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:19:28.492 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:19:28.493 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 32.0856ms
[2022-07-20 17:19:28.493 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:19:28.493 +05:30 INF] RequestBody: 
[2022-07-20 17:19:28.493 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:19:28.493 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 32.9091ms
[2022-07-20 17:19:28.498 +05:30 INF] Executed DbCommand (36ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.498 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :72ms
[2022-07-20 17:19:28.504 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.504 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :78ms
[2022-07-20 17:19:28.505 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.506 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :79ms
[2022-07-20 17:19:28.511 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:28.511 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :85ms
[2022-07-20 17:19:28.512 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:28.513 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :86ms
[2022-07-20 17:19:28.521 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:28.528 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:28.528 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :86ms
[2022-07-20 17:19:28.528 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :102ms
[2022-07-20 17:19:28.529 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.529 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :87ms
[2022-07-20 17:19:28.529 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.530 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :88ms
[2022-07-20 17:19:28.530 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:19:28.530 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :88ms
[2022-07-20 17:19:28.530 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:28.530 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :89ms
[2022-07-20 17:19:28.531 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:19:28.531 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :89ms
[2022-07-20 17:19:28.531 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:19:28.531 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:19:28.532 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :89ms
[2022-07-20 17:19:28.532 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :106ms
[2022-07-20 17:19:28.532 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :106ms
[2022-07-20 17:19:28.532 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:19:28.532 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:19:28.534 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 108.5046ms
[2022-07-20 17:19:28.534 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:19:28.534 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:19:28.534 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 109.7711ms
[2022-07-20 17:21:28.753 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - -
[2022-07-20 17:21:28.753 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-20 17:21:28.753 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.753 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.754 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.9230ms
[2022-07-20 17:21:28.754 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - - - 204 - - 1.0162ms
[2022-07-20 17:21:28.755 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:21:28.755 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.755 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.4676ms
[2022-07-20 17:21:28.767 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:21:28.767 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.767 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:21:28.768 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:21:28.768 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:21:28.770 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:28.772 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-20 17:21:28.772 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:21:28.776 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.776 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:28.777 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:21:28.777 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:21:28.777 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:21:28.777 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:21:28.778 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:21:28.778 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-20 17:21:28.778 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-20 17:21:28.778 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:21:28.779 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:21:28.779 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 11.2492ms
[2022-07-20 17:21:28.779 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:21:28.779 +05:30 INF] RequestBody: 
[2022-07-20 17:21:28.779 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:21:28.779 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 12.8842ms
[2022-07-20 17:21:28.781 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:21:28.781 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-20 17:21:28.787 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:28.787 +05:30 ERR] logger DAL
[2022-07-20 17:21:28.789 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:28.805 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:21:28.806 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :19ms
[2022-07-20 17:21:28.806 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :21ms
[2022-07-20 17:21:28.807 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:21:28.814 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-20 17:21:28.818 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:21:28.819 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 37.9803ms
[2022-07-20 17:21:28.819 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:21:28.819 +05:30 INF] RequestBody: 
[2022-07-20 17:21:28.819 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:21:28.819 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 47.4603ms
[2022-07-20 17:21:28.826 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :39ms
[2022-07-20 17:21:28.826 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :41ms
[2022-07-20 17:21:28.826 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:21:28.829 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-20 17:21:28.830 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 48.7997ms
[2022-07-20 17:21:28.830 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:21:28.830 +05:30 INF] RequestBody: 
[2022-07-20 17:21:28.830 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-20 17:21:28.830 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 58.1730ms
[2022-07-20 17:21:29.189 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:21:29.189 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:29.190 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.6644ms
[2022-07-20 17:21:29.197 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:21:29.197 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:29.197 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:21:29.197 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:21:29.197 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:21:29.197 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:21:29.198 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:21:29.199 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:29.205 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:21:29.206 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:21:29.206 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:21:29.206 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:21:29.206 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:21:29.207 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:21:29.207 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:21:29.207 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:21:29.207 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 9.7037ms
[2022-07-20 17:21:29.207 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:21:29.207 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:21:29.207 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 10.7302ms
[2022-07-20 17:21:52.922 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:21:52.922 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.922 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.3760ms
[2022-07-20 17:21:52.924 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:21:52.924 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.924 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:21:52.924 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:21:52.924 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:21:52.927 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:52.935 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:21:52.935 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :10ms
[2022-07-20 17:21:52.935 +05:30 INF] Pool Service Time elapsed for  ViewPools() :10ms
[2022-07-20 17:21:52.935 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:21:52.935 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:21:52.936 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.2517ms
[2022-07-20 17:21:52.936 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:21:52.936 +05:30 INF] RequestBody: 
[2022-07-20 17:21:52.936 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:21:52.936 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 12.0720ms
[2022-07-20 17:21:52.936 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:21:52.936 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.936 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1776ms
[2022-07-20 17:21:52.938 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:21:52.938 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.939 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.1612ms
[2022-07-20 17:21:52.940 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:21:52.940 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.940 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:21:52.940 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:21:52.940 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:21:52.940 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:21:52.941 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:52.949 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:21:52.949 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :8ms
[2022-07-20 17:21:52.950 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:21:52.950 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:21:52.951 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:21:52.951 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:21:52.951 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:21:52.953 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:21:52.955 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:21:52.955 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:21:52.955 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :3ms
[2022-07-20 17:21:52.956 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:21:52.956 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:21:52.956 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:21:52.956 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 4.3493ms
[2022-07-20 17:21:52.956 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:21:52.956 +05:30 INF] RequestBody: 
[2022-07-20 17:21:52.956 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:21:52.956 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 5.9465ms
[2022-07-20 17:21:52.960 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.960 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-20 17:21:52.964 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.965 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:21:52.965 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.966 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:21:52.971 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:21:52.971 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :30ms
[2022-07-20 17:21:52.972 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:21:52.972 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :31ms
[2022-07-20 17:21:52.981 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:21:52.988 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:21:52.988 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :31ms
[2022-07-20 17:21:52.989 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :48ms
[2022-07-20 17:21:52.989 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.989 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :32ms
[2022-07-20 17:21:52.990 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.990 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-20 17:21:52.991 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:21:52.991 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :34ms
[2022-07-20 17:21:52.992 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:21:52.992 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-20 17:21:52.992 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:21:52.992 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-20 17:21:52.993 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:21:52.993 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:21:52.993 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :35ms
[2022-07-20 17:21:52.993 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :52ms
[2022-07-20 17:21:52.993 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :52ms
[2022-07-20 17:21:52.993 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:21:52.993 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:21:52.994 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 53.4897ms
[2022-07-20 17:21:52.994 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:21:52.994 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:21:52.994 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 54.1679ms
[2022-07-20 17:22:10.698 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:22:10.698 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.698 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.2957ms
[2022-07-20 17:22:10.700 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:22:10.700 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.700 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:22:10.700 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:22:10.700 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:22:10.702 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:22:10.711 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:22:10.712 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.712 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:22:10.712 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.712 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.6191ms
[2022-07-20 17:22:10.712 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.6263ms
[2022-07-20 17:22:10.715 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:22:10.715 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.716 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:22:10.716 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:22:10.716 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:22:10.716 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:22:10.716 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:22:10.716 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:22:10.716 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:22:10.716 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:22:10.717 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:22:10.717 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:22:10.720 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:22:10.720 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:22:10.722 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:22:10.722 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :5ms
[2022-07-20 17:22:10.722 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:22:10.722 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:22:10.723 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:22:10.723 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.88ms
[2022-07-20 17:22:10.723 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:22:10.723 +05:30 INF] RequestBody: 
[2022-07-20 17:22:10.723 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:22:10.723 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.5957ms
[2022-07-20 17:22:10.726 +05:30 INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:22:10.727 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :25ms
[2022-07-20 17:22:10.727 +05:30 INF] Pool Service Time elapsed for  ViewPools() :25ms
[2022-07-20 17:22:10.727 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:22:10.727 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:22:10.727 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 26.7362ms
[2022-07-20 17:22:10.727 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:22:10.727 +05:30 INF] RequestBody: 
[2022-07-20 17:22:10.727 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:22:10.727 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 27.7315ms
[2022-07-20 17:22:10.729 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:22:10.729 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :11ms
[2022-07-20 17:22:10.736 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.736 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-20 17:22:10.740 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.740 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 17:22:10.741 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.741 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :23ms
[2022-07-20 17:22:10.761 +05:30 INF] Executed DbCommand (19ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:22:10.761 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :43ms
[2022-07-20 17:22:10.767 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:22:10.768 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :50ms
[2022-07-20 17:22:10.779 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:22:10.794 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:22:10.794 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :50ms
[2022-07-20 17:22:10.794 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :77ms
[2022-07-20 17:22:10.795 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.796 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :51ms
[2022-07-20 17:22:10.796 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.796 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :51ms
[2022-07-20 17:22:10.797 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:22:10.797 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :52ms
[2022-07-20 17:22:10.798 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:22:10.798 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :53ms
[2022-07-20 17:22:10.798 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:22:10.798 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :53ms
[2022-07-20 17:22:10.799 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:22:10.799 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:22:10.799 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :53ms
[2022-07-20 17:22:10.799 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :82ms
[2022-07-20 17:22:10.800 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :82ms
[2022-07-20 17:22:10.800 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:22:10.800 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:22:10.800 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 83.4686ms
[2022-07-20 17:22:10.800 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:22:10.800 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:22:10.800 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 85.0420ms
[2022-07-20 17:23:01.714 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:23:01.714 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:01.714 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.6643ms
[2022-07-20 17:23:01.737 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-20 17:23:01.737 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:01.737 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:23:01.737 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:01.737 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:23:01.738 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:23:01.739 +05:30 INF] RequestBody: {"emailId":"admin@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:23:01.740 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:01.745 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:01.755 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:01.763 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:01.771 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:01.807 +05:30 INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-20 17:23:01.816 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :76ms
[2022-07-20 17:23:01.817 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :76ms
[2022-07-20 17:23:01.839 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :100ms
[2022-07-20 17:23:01.839 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:23:01.847 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 854
[2022-07-20 17:23:01.847 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 109.4109ms
[2022-07-20 17:23:01.847 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:23:01.847 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..NqRhnox16QRmfk8MuWKMyQ.FnIFVKnoM-PQvLO-wwAbWivnOnrQFKd0Iaxiet7sNL1nKfIO1XXkhG3cCtorahooyrfVQA7_EH5IVP0YXQwvVid-FDw7BfXcAEgACl8u7W03C9J6oV3fi1pNdkn7LV7Mcu-gQ7H7Q7_LzGmk1YbNQnlSZB6_tdHb8Y-tfkB2oWVoIukD5T66irl11VrMbO8HpNNu_KitYEXTb2uiEB0jln6a4Hdmjh6xTkGArosHK6x4aS-d0mPN_bRgQnRmq_YmgS4ooztF1Lh6mukBIDfCKjby0n5z9Swehd3vQBvmDC3cH3ztpoiaoTOt7TyItTUTod0HfcQDRVBRWA766wy7eJblf0e08DjZjCXVzjFKgZzrNhCbAAe1UnBw9x2fqGEE6Gw71IXx8buauVcmGKkAlsO4CYzqzSv5-TEbrX1_QUcS9tRCp6jtWXUHxzwFYHtkhXRMo0odsC2PEMuuXEAWiyLM_bfy_srnGVf_WV67E17c0K3838nOeDVt9PRqClZPOTnzzgc8ZKiyIuuciZY8pJlTGUseeAeJwXMSSnZXejImaCON5te_HfXEZwefrebP8l_X04DpZGnkP8yHHH_opqW1U2Z9uBYCXUOsrdowtok.YzBF8aSnt9GIoIBzLjdYaW-yTXwJ9iJvzlIvlHoLoR8","expiryInMinutes":360,"isAdmin":true,"isTAC":false,"isManagement":false,"userName":"Admin"}
[2022-07-20 17:23:01.847 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 854 application/json;+charset=utf-8 110.6892ms
[2022-07-20 17:23:01.889 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest - -
[2022-07-20 17:23:01.890 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:01.890 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest - - - 204 - - 0.5951ms
[2022-07-20 17:23:01.896 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json -
[2022-07-20 17:23:01.907 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:01.908 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployeeRequest
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:01.908 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-20 17:23:01.910 +05:30 INF] Route matched with {action = "ViewEmployeeRequest", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeRequest() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:23:01.916 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:01.950 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE (([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(0 AS bit))) AND ([e].[IsAdminResponded] = CAST(0 AS bit))
[2022-07-20 17:23:01.950 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesRequestFromDatabase()  :34ms
[2022-07-20 17:23:01.950 +05:30 INF] Employee Service Time elapsed for  ViewEmployeeRequest() :36ms
[2022-07-20 17:23:01.951 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType42`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:23:01.953 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-20 17:23:01.953 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source) in 42.812ms
[2022-07-20 17:23:01.953 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployeeRequest (Source)'
[2022-07-20 17:23:01.953 +05:30 INF] RequestBody: 
[2022-07-20 17:23:01.953 +05:30 INF] ResponseBody: []
[2022-07-20 17:23:01.953 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployeeRequest application/json - - 200 2 application/json;+charset=utf-8 57.0985ms
[2022-07-20 17:23:14.115 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:23:14.115 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.115 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.5723ms
[2022-07-20 17:23:14.120 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-20 17:23:14.120 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - -
[2022-07-20 17:23:14.120 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.120 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.121 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.5466ms
[2022-07-20 17:23:14.121 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - - - 204 - - 0.6406ms
[2022-07-20 17:23:14.124 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:23:14.124 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.124 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:14.124 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:23:14.125 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:23:14.126 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:14.132 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:23:14.133 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-20 17:23:14.133 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-20 17:23:14.133 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:23:14.133 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:23:14.133 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 8.7202ms
[2022-07-20 17:23:14.133 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:23:14.133 +05:30 INF] RequestBody: 
[2022-07-20 17:23:14.133 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:23:14.134 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.0832ms
[2022-07-20 17:23:14.143 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:23:14.143 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.144 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-20 17:23:14.144 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:14.144 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:14.144 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:23:14.144 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:23:14.144 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:14.145 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:23:14.145 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-20 17:23:14.145 +05:30 ERR] logger DAL
[2022-07-20 17:23:14.146 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:14.146 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:14.155 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:23:14.155 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-20 17:23:14.155 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :10ms
[2022-07-20 17:23:14.155 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :10ms
[2022-07-20 17:23:14.155 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:23:14.155 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:23:14.156 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :10ms
[2022-07-20 17:23:14.156 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :10ms
[2022-07-20 17:23:14.156 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 11.3625ms
[2022-07-20 17:23:14.156 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:23:14.156 +05:30 INF] RequestBody: 
[2022-07-20 17:23:14.156 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:23:14.156 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:23:14.156 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 12.7164ms
[2022-07-20 17:23:14.156 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-20 17:23:14.156 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 11.5535ms
[2022-07-20 17:23:14.156 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:23:14.156 +05:30 INF] RequestBody: 
[2022-07-20 17:23:14.156 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-20 17:23:14.156 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 12.6696ms
[2022-07-20 17:23:16.711 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:23:16.711 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:16.711 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.2918ms
[2022-07-20 17:23:16.745 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-20 17:23:16.745 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:16.746 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:23:16.746 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:23:16.746 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:23:16.747 +05:30 INF] RequestBody: {"emailId":"vishnu@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:23:16.748 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:16.754 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:16.755 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:23:16.755 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :8ms
[2022-07-20 17:23:16.755 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:23:16.755 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :8ms
[2022-07-20 17:23:16.756 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:23:16.756 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:23:16.756 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:23:16.756 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 10.4488ms
[2022-07-20 17:23:16.756 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:23:16.756 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:23:16.757 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 400 - text/plain;+charset=utf-8 12.0734ms
[2022-07-20 17:23:30.831 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:23:30.834 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.835 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 4.8369ms
[2022-07-20 17:23:30.836 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:23:30.836 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.837 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.2130ms
[2022-07-20 17:23:30.838 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:23:30.838 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.839 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.8514ms
[2022-07-20 17:23:30.839 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:23:30.839 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.839 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:23:30.839 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:23:30.839 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:23:30.840 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:23:30.840 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:30.852 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:23:30.852 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :12ms
[2022-07-20 17:23:30.852 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:23:30.853 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.853 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:23:30.853 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:30.853 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:23:30.853 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:23:30.853 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:23:30.853 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:23:30.854 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:23:30.854 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:23:30.855 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:30.855 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:30.873 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:23:30.873 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:23:30.873 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :19ms
[2022-07-20 17:23:30.873 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.873 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-20 17:23:30.873 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:23:30.873 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:23:30.873 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:23:30.874 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 20.1311ms
[2022-07-20 17:23:30.874 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:23:30.874 +05:30 INF] RequestBody: 
[2022-07-20 17:23:30.874 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:23:30.874 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 21.3503ms
[2022-07-20 17:23:30.882 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.882 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:23:30.883 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.883 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:23:30.887 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:23:30.887 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :33ms
[2022-07-20 17:23:30.887 +05:30 INF] Pool Service Time elapsed for  ViewPools() :33ms
[2022-07-20 17:23:30.887 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:23:30.888 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:23:30.888 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:30.888 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :47ms
[2022-07-20 17:23:30.888 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 34.2229ms
[2022-07-20 17:23:30.888 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:23:30.888 +05:30 INF] RequestBody: 
[2022-07-20 17:23:30.888 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:23:30.888 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 35.5556ms
[2022-07-20 17:23:30.889 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:30.889 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :49ms
[2022-07-20 17:23:30.896 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:23:30.903 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:23:30.904 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :49ms
[2022-07-20 17:23:30.904 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :63ms
[2022-07-20 17:23:30.905 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.905 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :50ms
[2022-07-20 17:23:30.905 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.905 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :50ms
[2022-07-20 17:23:30.905 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:30.905 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :51ms
[2022-07-20 17:23:30.906 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:30.906 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :51ms
[2022-07-20 17:23:30.907 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:30.907 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :52ms
[2022-07-20 17:23:30.907 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:23:30.914 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:23:30.914 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :52ms
[2022-07-20 17:23:30.914 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :74ms
[2022-07-20 17:23:30.914 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :74ms
[2022-07-20 17:23:30.914 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:23:30.915 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:23:30.915 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 75.4281ms
[2022-07-20 17:23:30.915 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:23:30.915 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:23:30.915 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 76.0796ms
[2022-07-20 17:23:43.633 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:23:43.633 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:43.634 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.1692ms
[2022-07-20 17:23:43.635 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:23:43.635 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:23:43.635 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:23:43.636 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:23:43.636 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:23:43.637 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:23:43.638 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:23:43.643 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:23:43.643 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :5ms
[2022-07-20 17:23:43.655 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.655 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-20 17:23:43.656 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.657 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-20 17:23:43.658 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.658 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-20 17:23:43.668 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:43.668 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :30ms
[2022-07-20 17:23:43.669 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:43.669 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :31ms
[2022-07-20 17:23:43.678 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:23:43.693 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:23:43.693 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :31ms
[2022-07-20 17:23:43.693 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :55ms
[2022-07-20 17:23:43.694 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.694 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :32ms
[2022-07-20 17:23:43.695 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.695 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-20 17:23:43.696 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:23:43.696 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :34ms
[2022-07-20 17:23:43.697 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:43.697 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :34ms
[2022-07-20 17:23:43.698 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:23:43.698 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :35ms
[2022-07-20 17:23:43.698 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:23:43.700 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:23:43.700 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :35ms
[2022-07-20 17:23:43.700 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :62ms
[2022-07-20 17:23:43.700 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :62ms
[2022-07-20 17:23:43.700 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:23:43.700 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:23:43.700 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 64.2685ms
[2022-07-20 17:23:43.700 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:23:43.700 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:23:43.700 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 65.2902ms
[2022-07-20 17:24:11.889 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:24:11.889 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.890 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.9639ms
[2022-07-20 17:24:11.893 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:24:11.893 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.894 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:11.894 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:24:11.894 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:24:11.897 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:11.908 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:24:11.908 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :13ms
[2022-07-20 17:24:11.908 +05:30 INF] Pool Service Time elapsed for  ViewPools() :13ms
[2022-07-20 17:24:11.908 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:24:11.908 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:24:11.909 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 14.292ms
[2022-07-20 17:24:11.909 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:24:11.909 +05:30 INF] RequestBody: 
[2022-07-20 17:24:11.909 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:24:11.909 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 16.1039ms
[2022-07-20 17:24:11.915 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:24:11.915 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.915 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.5906ms
[2022-07-20 17:24:11.918 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:24:11.918 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.919 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:11.919 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:24:11.919 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:24:11.920 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:24:11.920 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.920 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:24:11.920 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2564ms
[2022-07-20 17:24:11.921 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:11.923 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:24:11.923 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:11.923 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:11.923 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:24:11.924 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:24:11.925 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:11.928 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:24:11.929 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :8ms
[2022-07-20 17:24:11.930 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:24:11.930 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:24:11.930 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 17:24:11.930 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:24:11.930 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:24:11.930 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:24:11.931 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 7.4322ms
[2022-07-20 17:24:11.931 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:24:11.931 +05:30 INF] RequestBody: 
[2022-07-20 17:24:11.931 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:24:11.931 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.5238ms
[2022-07-20 17:24:11.945 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.945 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:24:11.946 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.946 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :26ms
[2022-07-20 17:24:11.947 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.947 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :27ms
[2022-07-20 17:24:11.961 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:11.961 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :40ms
[2022-07-20 17:24:11.962 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:11.962 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :41ms
[2022-07-20 17:24:11.973 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:24:11.988 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:24:11.988 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :41ms
[2022-07-20 17:24:11.988 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :68ms
[2022-07-20 17:24:11.989 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.990 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:24:11.991 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.991 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :43ms
[2022-07-20 17:24:11.991 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:11.991 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :44ms
[2022-07-20 17:24:11.992 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:11.992 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :45ms
[2022-07-20 17:24:11.993 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:11.993 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :46ms
[2022-07-20 17:24:11.994 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:24:11.996 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:24:11.996 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :46ms
[2022-07-20 17:24:11.996 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :75ms
[2022-07-20 17:24:11.996 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :75ms
[2022-07-20 17:24:11.996 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:24:11.996 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:24:11.996 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 77.3927ms
[2022-07-20 17:24:11.996 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:24:11.996 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:24:11.996 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 78.8703ms
[2022-07-20 17:24:36.414 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:24:36.415 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.416 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.5791ms
[2022-07-20 17:24:36.417 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:24:36.417 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.418 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:36.418 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:24:36.418 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:24:36.423 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:36.423 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:24:36.424 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.425 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 1.4366ms
[2022-07-20 17:24:36.426 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:24:36.426 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.427 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.6860ms
[2022-07-20 17:24:36.428 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:24:36.428 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.428 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:36.428 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:24:36.428 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:24:36.429 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:24:36.429 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:36.430 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:24:36.430 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:36.430 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:24:36.431 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:24:36.431 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:24:36.431 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:24:36.436 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:24:36.437 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :7ms
[2022-07-20 17:24:36.441 +05:30 INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:24:36.441 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :22ms
[2022-07-20 17:24:36.441 +05:30 INF] Pool Service Time elapsed for  ViewPools() :22ms
[2022-07-20 17:24:36.441 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:24:36.441 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:24:36.442 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 23.5732ms
[2022-07-20 17:24:36.442 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:24:36.442 +05:30 INF] RequestBody: 
[2022-07-20 17:24:36.442 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:24:36.442 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 24.3422ms
[2022-07-20 17:24:36.461 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.461 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :31ms
[2022-07-20 17:24:36.492 +05:30 INF] Executed DbCommand (60ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:24:36.494 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:24:36.494 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :63ms
[2022-07-20 17:24:36.494 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:24:36.495 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:24:36.495 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:24:36.495 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 64.2626ms
[2022-07-20 17:24:36.495 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:24:36.495 +05:30 INF] RequestBody: 
[2022-07-20 17:24:36.495 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:24:36.495 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 65.1966ms
[2022-07-20 17:24:36.498 +05:30 INF] Executed DbCommand (37ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.498 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :69ms
[2022-07-20 17:24:36.499 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.499 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :70ms
[2022-07-20 17:24:36.508 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:36.508 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :78ms
[2022-07-20 17:24:36.509 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:36.509 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :79ms
[2022-07-20 17:24:36.518 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:24:36.528 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:24:36.528 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :79ms
[2022-07-20 17:24:36.528 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :99ms
[2022-07-20 17:24:36.529 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.529 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :80ms
[2022-07-20 17:24:36.530 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.530 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :81ms
[2022-07-20 17:24:36.531 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:24:36.531 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :82ms
[2022-07-20 17:24:36.532 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:36.532 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :83ms
[2022-07-20 17:24:36.532 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:24:36.533 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :83ms
[2022-07-20 17:24:36.533 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:24:36.534 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:24:36.534 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :83ms
[2022-07-20 17:24:36.534 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :105ms
[2022-07-20 17:24:36.534 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :105ms
[2022-07-20 17:24:36.534 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:24:36.534 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:24:36.534 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 105.911ms
[2022-07-20 17:24:36.534 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:24:36.534 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:24:36.534 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 106.5725ms
[2022-07-20 17:24:38.505 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - -
[2022-07-20 17:24:38.505 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:38.506 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - - - 204 - - 0.5673ms
[2022-07-20 17:24:38.513 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 163
[2022-07-20 17:24:38.513 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:24:38.514 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 163
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:24:38.514 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:24:38.517 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:24:38.518 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE76598","name":"Annu","departmentId":"2","roleId":"4","projectId":"5","emailId":"annu1@aspiresys.com","password":"Annu@345"}
[2022-07-20 17:24:38.575 +05:30 ERR] Employee Service : CreateNewEmployee(Employee employee) : ACE number must be 7 or 8 characters
[2022-07-20 17:24:38.576 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:24:38.576 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:24:38.576 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 59.1346ms
[2022-07-20 17:24:38.576 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:24:38.576 +05:30 INF] ResponseBody: ACE number must be 7 or 8 characters
[2022-07-20 17:24:38.576 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 163 - 400 - text/plain;+charset=utf-8 63.6618ms
[2022-07-20 17:25:29.320 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:25:29.320 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.321 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.8071ms
[2022-07-20 17:25:29.323 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:25:29.323 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.324 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:29.324 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:25:29.324 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:25:29.325 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:29.328 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:25:29.328 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.329 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 1.4266ms
[2022-07-20 17:25:29.330 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:25:29.330 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:25:29.330 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.330 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :6ms
[2022-07-20 17:25:29.330 +05:30 INF] Pool Service Time elapsed for  ViewPools() :6ms
[2022-07-20 17:25:29.330 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:25:29.330 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:29.330 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:25:29.330 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:25:29.330 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:25:29.331 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 6.7349ms
[2022-07-20 17:25:29.331 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:25:29.331 +05:30 INF] RequestBody: 
[2022-07-20 17:25:29.331 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:25:29.331 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 7.5034ms
[2022-07-20 17:25:29.332 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:25:29.332 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.332 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:29.332 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.8156ms
[2022-07-20 17:25:29.336 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:25:29.336 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:29.336 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:25:29.337 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:29.337 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:25:29.337 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:25:29.337 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:25:29.337 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :5ms
[2022-07-20 17:25:29.338 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:25:29.338 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:25:29.338 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:25:29.338 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:25:29.338 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 7.5041ms
[2022-07-20 17:25:29.338 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:25:29.338 +05:30 INF] RequestBody: 
[2022-07-20 17:25:29.338 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:25:29.338 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:29.338 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.1633ms
[2022-07-20 17:25:29.351 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:25:29.351 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :13ms
[2022-07-20 17:25:29.365 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.365 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :27ms
[2022-07-20 17:25:29.371 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.371 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :33ms
[2022-07-20 17:25:29.373 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.373 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :35ms
[2022-07-20 17:25:29.381 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:29.381 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :43ms
[2022-07-20 17:25:29.382 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:29.382 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :44ms
[2022-07-20 17:25:29.389 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:25:29.401 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:25:29.401 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :44ms
[2022-07-20 17:25:29.401 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :62ms
[2022-07-20 17:25:29.402 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.402 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :45ms
[2022-07-20 17:25:29.402 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.402 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :45ms
[2022-07-20 17:25:29.403 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:29.403 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :46ms
[2022-07-20 17:25:29.403 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:29.403 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :46ms
[2022-07-20 17:25:29.404 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:29.404 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :47ms
[2022-07-20 17:25:29.404 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:25:29.405 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:25:29.405 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :47ms
[2022-07-20 17:25:29.406 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :67ms
[2022-07-20 17:25:29.406 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :67ms
[2022-07-20 17:25:29.406 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:25:29.406 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:25:29.407 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 70.0995ms
[2022-07-20 17:25:29.407 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:25:29.407 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:25:29.407 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 71.0641ms
[2022-07-20 17:25:48.044 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:25:48.044 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.045 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6563ms
[2022-07-20 17:25:48.047 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:25:48.047 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.048 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:48.048 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:25:48.048 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:25:48.049 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:48.050 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:25:48.050 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-20 17:25:48.051 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-20 17:25:48.051 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:25:48.051 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:25:48.051 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.2651ms
[2022-07-20 17:25:48.051 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:25:48.051 +05:30 INF] RequestBody: 
[2022-07-20 17:25:48.051 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:25:48.051 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 4.5321ms
[2022-07-20 17:25:48.059 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:25:48.060 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.060 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.7355ms
[2022-07-20 17:25:48.062 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:25:48.062 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.063 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:48.063 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:25:48.063 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:25:48.064 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:25:48.065 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:25:48.065 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.065 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.6500ms
[2022-07-20 17:25:48.066 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:48.067 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:25:48.067 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :2ms
[2022-07-20 17:25:48.067 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:25:48.067 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:25:48.068 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:25:48.068 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:25:48.068 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.068 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:25:48.068 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :3ms
[2022-07-20 17:25:48.069 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.069 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4ms
[2022-07-20 17:25:48.069 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:25:48.070 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.070 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :5ms
[2022-07-20 17:25:48.070 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:25:48.070 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:48.070 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :5ms
[2022-07-20 17:25:48.070 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:25:48.070 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :2ms
[2022-07-20 17:25:48.071 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:25:48.071 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:48.071 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :6ms
[2022-07-20 17:25:48.071 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:25:48.071 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:25:48.071 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:25:48.071 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 2.863ms
[2022-07-20 17:25:48.071 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:25:48.071 +05:30 INF] RequestBody: 
[2022-07-20 17:25:48.071 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:25:48.071 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 4.2559ms
[2022-07-20 17:25:48.072 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:25:48.072 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :6ms
[2022-07-20 17:25:48.072 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :7ms
[2022-07-20 17:25:48.072 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.072 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :6ms
[2022-07-20 17:25:48.073 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.074 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :8ms
[2022-07-20 17:25:48.074 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:25:48.075 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :8ms
[2022-07-20 17:25:48.076 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:48.076 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :10ms
[2022-07-20 17:25:48.077 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:25:48.077 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :11ms
[2022-07-20 17:25:48.078 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:25:48.078 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:25:48.078 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :11ms
[2022-07-20 17:25:48.078 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :13ms
[2022-07-20 17:25:48.078 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :13ms
[2022-07-20 17:25:48.078 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:25:48.078 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:25:48.079 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 15.3187ms
[2022-07-20 17:25:48.079 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:25:48.079 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:25:48.079 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 16.6466ms
[2022-07-20 17:26:15.445 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - -
[2022-07-20 17:26:15.445 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:26:15.446 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - - - 204 - - 0.6739ms
[2022-07-20 17:26:15.452 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 163
[2022-07-20 17:26:15.452 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:26:15.453 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 163
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:26:15.453 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:26:15.453 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:26:15.456 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE76598","name":"Annu","departmentId":"2","roleId":"4","projectId":"5","emailId":"annu1@aspiresys.com","password":"Annu@345"}
[2022-07-20 17:26:15.458 +05:30 ERR] Employee Service : CreateNewEmployee(Employee employee) : ACE number must be 7 or 8 characters
[2022-07-20 17:26:15.458 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:26:15.458 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:26:15.458 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 5.0036ms
[2022-07-20 17:26:15.459 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:26:15.459 +05:30 INF] ResponseBody: ACE number must be 7 or 8 characters
[2022-07-20 17:26:15.459 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 163 - 400 - text/plain;+charset=utf-8 6.7269ms
[2022-07-20 17:26:41.247 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:26:41.247 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:26:41.247 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.5963ms
[2022-07-20 17:26:41.263 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68
[2022-07-20 17:26:41.263 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:26:41.263 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 68
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:26:41.263 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:26:41.263 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:26:41.264 +05:30 INF] RequestBody: {"emailId":"vinoth.jayakumar@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:26:41.264 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:26:41.269 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:26:41.269 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:26:41.269 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :5ms
[2022-07-20 17:26:41.269 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:26:41.270 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :5ms
[2022-07-20 17:26:41.270 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:26:41.270 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:26:41.270 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:26:41.270 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 6.6276ms
[2022-07-20 17:26:41.270 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:26:41.270 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:26:41.270 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68 - 400 - text/plain;+charset=utf-8 7.2133ms
[2022-07-20 17:27:12.529 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:27:12.529 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:27:12.529 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.5673ms
[2022-07-20 17:27:12.535 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68
[2022-07-20 17:27:12.535 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:27:12.535 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 68
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:27:12.536 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:27:12.536 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:27:12.536 +05:30 INF] RequestBody: {"emailId":"vinoth.jayakumar@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:27:12.537 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:27:12.538 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:27:12.539 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:27:12.539 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :2ms
[2022-07-20 17:27:12.540 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:27:12.540 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :3ms
[2022-07-20 17:27:12.540 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:27:12.540 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:27:12.540 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:27:12.541 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 4.9191ms
[2022-07-20 17:27:12.541 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:27:12.541 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:27:12.541 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68 - 400 - text/plain;+charset=utf-8 6.4925ms
[2022-07-20 17:27:45.846 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:27:45.846 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:27:45.847 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.4348ms
[2022-07-20 17:27:45.857 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:27:45.857 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:27:45.857 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:27:45.858 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:27:45.858 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:27:45.858 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:27:45.860 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:27:45.865 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:27:45.866 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:27:45.866 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:27:45.866 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:27:45.866 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:27:45.867 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:27:45.867 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:27:45.867 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:27:45.867 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 9.6852ms
[2022-07-20 17:27:45.868 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:27:45.868 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:27:45.868 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 11.2778ms
[2022-07-20 17:28:22.892 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:28:22.892 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:22.893 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.7614ms
[2022-07-20 17:28:22.897 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:28:22.898 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:22.898 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.5433ms
[2022-07-20 17:28:22.902 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:28:22.902 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:22.902 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:28:22.903 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:28:22.903 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:28:22.903 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:28:22.903 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:22.903 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:28:22.903 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:28:22.904 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:28:22.904 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:28:22.905 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:28:22.913 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:28:22.913 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-20 17:28:22.913 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :9ms
[2022-07-20 17:28:22.913 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:28:22.913 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:28:22.914 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 10.1535ms
[2022-07-20 17:28:22.914 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:28:22.914 +05:30 INF] RequestBody: 
[2022-07-20 17:28:22.914 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:28:22.914 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:28:22.914 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 11.4983ms
[2022-07-20 17:28:22.915 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :11ms
[2022-07-20 17:28:22.915 +05:30 INF] Pool Service Time elapsed for  ViewPools() :11ms
[2022-07-20 17:28:22.915 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:28:22.915 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:28:22.915 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 12.5046ms
[2022-07-20 17:28:22.915 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:28:22.915 +05:30 INF] RequestBody: 
[2022-07-20 17:28:22.915 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:28:22.915 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 13.4455ms
[2022-07-20 17:28:34.494 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:28:34.494 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:34.494 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.5710ms
[2022-07-20 17:28:34.500 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:28:34.500 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:34.500 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:28:34.500 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:28:34.501 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:28:34.501 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:28:34.502 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:28:34.506 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:28:34.507 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:28:34.507 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :6ms
[2022-07-20 17:28:34.508 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:28:34.508 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :6ms
[2022-07-20 17:28:34.508 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:28:34.509 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:28:34.509 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:28:34.509 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 8.68ms
[2022-07-20 17:28:34.509 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:28:34.509 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:28:34.510 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 10.2260ms
[2022-07-20 17:28:52.822 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:28:52.822 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:52.822 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6959ms
[2022-07-20 17:28:52.822 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:28:52.822 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:52.822 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.2729ms
[2022-07-20 17:28:52.827 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:28:52.827 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:28:52.827 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:52.827 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:28:52.828 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:28:52.828 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:28:52.828 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:28:52.828 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:28:52.828 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:28:52.828 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:28:52.829 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:28:52.829 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:28:52.836 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:28:52.837 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :8ms
[2022-07-20 17:28:52.837 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :8ms
[2022-07-20 17:28:52.837 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:28:52.837 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:28:52.838 +05:30 INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:28:52.838 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 9.7599ms
[2022-07-20 17:28:52.838 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:28:52.838 +05:30 INF] RequestBody: 
[2022-07-20 17:28:52.838 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:28:52.838 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 11.3084ms
[2022-07-20 17:28:52.838 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :9ms
[2022-07-20 17:28:52.838 +05:30 INF] Pool Service Time elapsed for  ViewPools() :9ms
[2022-07-20 17:28:52.838 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:28:52.839 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:28:52.839 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 10.9226ms
[2022-07-20 17:28:52.839 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:28:52.839 +05:30 INF] RequestBody: 
[2022-07-20 17:28:52.839 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:28:52.839 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 12.5008ms
[2022-07-20 17:29:09.307 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:29:09.307 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.308 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.4474ms
[2022-07-20 17:29:09.317 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:29:09.317 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.317 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-20 17:29:09.318 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.318 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - -
[2022-07-20 17:29:09.318 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.318 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.5121ms
[2022-07-20 17:29:09.318 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:29:09.318 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:29:09.318 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - - - 204 - - 0.6222ms
[2022-07-20 17:29:09.318 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:29:09.320 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:29:09.322 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:29:09.322 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :3ms
[2022-07-20 17:29:09.322 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :3ms
[2022-07-20 17:29:09.322 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:29:09.323 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:29:09.323 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 4.531ms
[2022-07-20 17:29:09.323 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:29:09.323 +05:30 INF] RequestBody: 
[2022-07-20 17:29:09.323 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:29:09.323 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 5.9704ms
[2022-07-20 17:29:09.356 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-20 17:29:09.356 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.356 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:29:09.356 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:29:09.357 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:29:09.357 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:29:09.357 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:29:09.357 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-20 17:29:09.357 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:29:09.357 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:29:09.358 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:29:09.359 +05:30 ERR] logger DAL
[2022-07-20 17:29:09.360 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:29:09.365 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:29:09.366 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :7ms
[2022-07-20 17:29:09.366 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :7ms
[2022-07-20 17:29:09.366 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:29:09.366 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:29:09.366 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 9.1442ms
[2022-07-20 17:29:09.366 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:29:09.366 +05:30 INF] RequestBody: 
[2022-07-20 17:29:09.366 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:29:09.366 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 10.4398ms
[2022-07-20 17:29:09.367 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-20 17:29:09.367 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :9ms
[2022-07-20 17:29:09.367 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :9ms
[2022-07-20 17:29:09.367 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:29:09.367 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-20 17:29:09.368 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 10.5747ms
[2022-07-20 17:29:09.368 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:29:09.368 +05:30 INF] RequestBody: 
[2022-07-20 17:29:09.368 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-20 17:29:09.368 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 11.7429ms
[2022-07-20 17:30:58.373 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - -
[2022-07-20 17:30:58.373 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:30:58.374 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - - - 204 - - 0.6039ms
[2022-07-20 17:30:58.382 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 166
[2022-07-20 17:30:58.383 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:30:58.383 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 166
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:30:58.383 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:30:58.383 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:30:58.408 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE67890","name":"Annu","departmentId":"5","roleId":"7","projectId":"20","emailId":"annu1@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:30:58.420 +05:30 ERR] Employee Service : CreateNewEmployee(Employee employee) : ACE number must be 7 or 8 characters
[2022-07-20 17:30:58.421 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:30:58.422 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:30:58.424 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 40.7553ms
[2022-07-20 17:30:58.426 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:30:58.427 +05:30 INF] ResponseBody: ACE number must be 7 or 8 characters
[2022-07-20 17:30:58.431 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 166 - 400 - text/plain;+charset=utf-8 48.2745ms
[2022-07-20 17:31:32.568 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:31:32.568 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.569 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 0.4587ms
[2022-07-20 17:31:32.576 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-20 17:31:32.576 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.577 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - -
[2022-07-20 17:31:32.577 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:31:32.577 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.6773ms
[2022-07-20 17:31:32.577 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.577 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.577 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:31:32.577 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - - - 204 - - 0.6678ms
[2022-07-20 17:31:32.578 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:31:32.578 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:31:32.578 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:31:32.579 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:31:32.582 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-20 17:31:32.582 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:31:32.583 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.583 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:31:32.583 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:31:32.583 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:31:32.583 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:31:32.583 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:31:32.583 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:31:32.583 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:31:32.583 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:31:32.583 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-20 17:31:32.584 +05:30 ERR] logger DAL
[2022-07-20 17:31:32.585 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:31:32.585 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:31:32.585 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:31:32.586 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-20 17:31:32.586 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-20 17:31:32.586 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:31:32.586 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:31:32.587 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 8.8557ms
[2022-07-20 17:31:32.587 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:31:32.587 +05:30 INF] RequestBody: 
[2022-07-20 17:31:32.587 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:31:32.587 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 10.4107ms
[2022-07-20 17:31:32.595 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-20 17:31:32.595 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :11ms
[2022-07-20 17:31:32.595 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :11ms
[2022-07-20 17:31:32.595 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:31:32.596 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-20 17:31:32.596 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 12.4603ms
[2022-07-20 17:31:32.596 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:31:32.596 +05:30 INF] RequestBody: 
[2022-07-20 17:31:32.596 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-20 17:31:32.596 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 13.6544ms
[2022-07-20 17:31:32.599 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:31:32.599 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :15ms
[2022-07-20 17:31:32.599 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :15ms
[2022-07-20 17:31:32.599 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:31:32.599 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:31:32.600 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 16.3488ms
[2022-07-20 17:31:32.600 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:31:32.600 +05:30 INF] RequestBody: 
[2022-07-20 17:31:32.600 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:31:32.600 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 17.4652ms
[2022-07-20 17:32:34.622 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - -
[2022-07-20 17:32:34.623 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:32:34.623 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - - - 204 - - 0.6529ms
[2022-07-20 17:32:34.629 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 166
[2022-07-20 17:32:34.629 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:32:34.629 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:32:34.629 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 166
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:32:34.629 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:32:34.630 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:32:34.630 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE00956","name":"Annu","departmentId":"5","roleId":"3","projectId":"17","emailId":"annu1@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:32:34.631 +05:30 ERR] Employee Service : CreateNewEmployee(Employee employee) : ACE number must be 7 or 8 characters
[2022-07-20 17:32:34.631 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:32:34.632 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:32:34.632 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 2.3146ms
[2022-07-20 17:32:34.632 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:32:34.632 +05:30 INF] ResponseBody: ACE number must be 7 or 8 characters
[2022-07-20 17:32:34.632 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 166 - 400 - text/plain;+charset=utf-8 3.3441ms
[2022-07-20 17:34:48.193 +05:30 INF] Application is shutting down...
[2022-07-20 17:35:55.143 +05:30 INF] User profile not available. Using 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\S-1-5-82-1361998291-1551570530-77267900-3141186879-3841397018\DataProtection' as key repository and Windows DPAPI to encrypt keys at rest.
[2022-07-20 17:35:55.504 +05:30 INF] Application started. Press Ctrl+C to shut down.
[2022-07-20 17:35:55.504 +05:30 INF] Hosting environment: Production
[2022-07-20 17:35:55.504 +05:30 INF] Content root path: C:\Local\publish\
[2022-07-20 17:35:55.565 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:35:55.565 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:35:55.565 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:35:55.652 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.652 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.652 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.705 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 146.6633ms
[2022-07-20 17:35:55.708 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 153.3954ms
[2022-07-20 17:35:55.708 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 153.4135ms
[2022-07-20 17:35:55.719 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:35:55.720 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:35:55.724 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:35:55.735 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.750 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.751 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:35:55.773 +05:30 WRN] Failed to determine the https port for redirect.
[2022-07-20 17:35:56.541 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:35:56.541 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:35:56.541 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:35:56.548 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:35:56.548 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:35:56.548 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:35:56.573 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:35:56.573 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:35:56.585 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:35:57.042 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:36:00.066 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:00.066 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:00.073 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:01.465 +05:30 INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:36:01.483 +05:30 INF] Executed DbCommand (46ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:01.488 +05:30 INF] Executed DbCommand (56ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:36:01.507 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:36:01.507 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :4498ms
[2022-07-20 17:36:01.507 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:36:01.521 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:36:01.522 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:36:01.570 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 4971.0757ms
[2022-07-20 17:36:01.571 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:36:01.571 +05:30 INF] RequestBody: 
[2022-07-20 17:36:01.572 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:36:01.591 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 5873.0349ms
[2022-07-20 17:36:01.626 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :4277ms
[2022-07-20 17:36:01.631 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4617ms
[2022-07-20 17:36:01.632 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4622ms
[2022-07-20 17:36:01.633 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:36:01.770 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:36:01.774 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 5199.7455ms
[2022-07-20 17:36:01.774 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:36:01.774 +05:30 INF] RequestBody: 
[2022-07-20 17:36:01.774 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:36:01.775 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 6051.2298ms
[2022-07-20 17:36:01.841 +05:30 INF] Executed DbCommand (105ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:01.841 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4489ms
[2022-07-20 17:36:01.856 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:01.856 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4503ms
[2022-07-20 17:36:01.857 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:01.857 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4505ms
[2022-07-20 17:36:01.920 +05:30 INF] Executed DbCommand (33ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:01.920 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :4566ms
[2022-07-20 17:36:01.921 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:01.921 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :4567ms
[2022-07-20 17:36:01.945 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:36:02.006 +05:30 INF] Executed DbCommand (26ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:36:02.006 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :4567ms
[2022-07-20 17:36:02.006 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :4658ms
[2022-07-20 17:36:02.021 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:02.021 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4581ms
[2022-07-20 17:36:02.022 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:02.022 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4582ms
[2022-07-20 17:36:02.023 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:02.023 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :4583ms
[2022-07-20 17:36:02.023 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:02.023 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :4584ms
[2022-07-20 17:36:02.024 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:02.024 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :4584ms
[2022-07-20 17:36:02.033 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:36:02.056 +05:30 INF] Executed DbCommand (22ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:36:02.056 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :4584ms
[2022-07-20 17:36:02.056 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :4707ms
[2022-07-20 17:36:02.056 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :4707ms
[2022-07-20 17:36:02.056 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:36:02.066 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:36:02.066 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 5480.6513ms
[2022-07-20 17:36:02.066 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:36:02.066 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:36:02.066 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 6346.5742ms
[2022-07-20 17:36:16.486 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:36:16.497 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:16.499 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 12.6559ms
[2022-07-20 17:36:16.528 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-20 17:36:16.529 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:16.563 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:36:16.563 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:36:16.580 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:36:16.590 +05:30 INF] RequestBody: {"emailId":"girish@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:36:16.742 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:16.759 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:16.774 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:16.781 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:16.793 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:16.859 +05:30 INF] Executed DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-20 17:36:16.891 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :263ms
[2022-07-20 17:36:16.893 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :263ms
[2022-07-20 17:36:16.921 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :296ms
[2022-07-20 17:36:16.922 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:36:16.935 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 855
[2022-07-20 17:36:16.937 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 356.7591ms
[2022-07-20 17:36:16.937 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:36:16.937 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..V-94UcIBJcmiyeZkVLPe6w.7o_y3Dk7N-xhY8LBs0EIubN2EVgVeIZn8vL6d9sjA6pOk-AIca5iQYx4LjbPIpUgFTb_sjmJfBG0GlyAURajn8wuLFSAEhiYM5ANDzJRXStE63O7-S5iyWs0w7BSWs_llq37J7TMviLoeNlYq5Rj9sEYCSMt_nKRSzhDSyjlQ7jYiZBiBIlqFrrpySF_YB95qutEU1oNgoKGCPlw_dyh7-sK3Ms5S1jQH_WcznMVxEy8eMa1zxGEY5YPf9IQrAPMuCl211H8I-jVU9Oc30tbL_OaAEsbmRI8wd0rsXSAX0fNwmOROmnyBMYsIOk_KoexFjMGOTOgnMzC2tGpwa-L7pwkCRK3sr0VV0TRXwMNcAOMYoINp722JiUtLvQ4NkNF2kQwWARfzOo8rIU4D_RHpAviQUbDf1BvGTj3kCaTwGPlzwy8RfrQ74brW5wfGpMGEDjMiEHPn1t7DFk5S0B_z4iNPxv1qVNIcq_sRWz5TGw-oELzPtTwhMFIYq-HOG1IZwO6dINBITeDK5VA-rf8LesGWkiZq0Rz0p8am5GF50zaA5r-gM7b3imCoiRi4le2hqQ5tQ41mRvSeGYcGSM0JGNjL7PO1EaVCTqOUQW9MNA.tLXBQBDa9Mr41o5jVXmtNrLDTJRJ6T5J7y3DMjBIkGY","expiryInMinutes":360,"isAdmin":false,"isTAC":false,"isManagement":true,"userName":"Girish"}
[2022-07-20 17:36:16.938 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 855 application/json;+charset=utf-8 409.2140ms
[2022-07-20 17:36:20.056 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:36:20.056 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.059 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 2.8956ms
[2022-07-20 17:36:20.060 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:36:20.060 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.063 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:36:20.063 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:36:20.063 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:36:20.066 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:36:20.066 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.067 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:20.068 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 2.3991ms
[2022-07-20 17:36:20.069 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:36:20.070 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.072 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 2.1970ms
[2022-07-20 17:36:20.072 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:36:20.072 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.077 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:36:20.077 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:36:20.077 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:36:20.080 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:36:20.082 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:20.084 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:36:20.084 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:36:20.086 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:36:20.091 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:36:20.092 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:36:20.093 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:36:20.097 +05:30 INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:36:20.099 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :33ms
[2022-07-20 17:36:20.099 +05:30 INF] Pool Service Time elapsed for  ViewPools() :33ms
[2022-07-20 17:36:20.099 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:36:20.100 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:36:20.101 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 37.2896ms
[2022-07-20 17:36:20.101 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:36:20.101 +05:30 INF] RequestBody: 
[2022-07-20 17:36:20.101 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:36:20.101 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 41.5646ms
[2022-07-20 17:36:20.117 +05:30 INF] Executed DbCommand (21ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:36:20.118 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:36:20.118 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :25ms
[2022-07-20 17:36:20.118 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:36:20.118 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:36:20.119 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:36:20.119 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 27.3123ms
[2022-07-20 17:36:20.119 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:36:20.119 +05:30 INF] RequestBody: 
[2022-07-20 17:36:20.120 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:36:20.120 +05:30 INF] Executed DbCommand (36ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:36:20.120 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 35.9233ms
[2022-07-20 17:36:20.121 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :40ms
[2022-07-20 17:36:20.137 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.137 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :56ms
[2022-07-20 17:36:20.138 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.138 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :57ms
[2022-07-20 17:36:20.143 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.143 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :62ms
[2022-07-20 17:36:20.155 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:20.155 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :74ms
[2022-07-20 17:36:20.157 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:20.157 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :75ms
[2022-07-20 17:36:20.169 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:36:20.185 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:36:20.185 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :75ms
[2022-07-20 17:36:20.185 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :104ms
[2022-07-20 17:36:20.186 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.186 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :77ms
[2022-07-20 17:36:20.188 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.188 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :78ms
[2022-07-20 17:36:20.189 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:36:20.189 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :79ms
[2022-07-20 17:36:20.190 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:20.190 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :80ms
[2022-07-20 17:36:20.193 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:36:20.193 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :83ms
[2022-07-20 17:36:20.194 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:36:20.195 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:36:20.195 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :83ms
[2022-07-20 17:36:20.195 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :114ms
[2022-07-20 17:36:20.195 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :114ms
[2022-07-20 17:36:20.196 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:36:20.196 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:36:20.196 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 118.6014ms
[2022-07-20 17:36:20.196 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:36:20.196 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:36:20.197 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 124.2738ms
[2022-07-20 17:37:13.348 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - -
[2022-07-20 17:37:13.348 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.349 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Department/ViewDepartments - - - 204 - - 1.5627ms
[2022-07-20 17:37:13.355 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - -
[2022-07-20 17:37:13.355 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.355 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Role/ViewRoles - - - 204 - - 0.5466ms
[2022-07-20 17:37:13.356 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - -
[2022-07-20 17:37:13.356 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.356 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Project/ViewProjects - - - 204 - - 0.3977ms
[2022-07-20 17:37:13.357 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:37:13.361 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.361 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:37:13.362 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:37:13.362 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:37:13.365 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:37:13.370 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:37:13.371 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json -
[2022-07-20 17:37:13.374 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.375 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:37:13.375 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:13.375 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:37:13.375 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:37:13.375 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:37:13.375 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Project/ViewProjects
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:37:13.375 +05:30 INF] Executing endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:37:13.376 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:13.378 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:37:13.378 +05:30 INF] Route matched with {action = "ViewProjects", controller = "Project"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewProjects() on controller IMS.Controller.ProjectController (Source).
[2022-07-20 17:37:13.386 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:13.387 +05:30 ERR] logger DAL
[2022-07-20 17:37:13.388 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:13.412 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:37:13.412 +05:30 INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:37:13.413 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :38ms
[2022-07-20 17:37:13.413 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :27ms
[2022-07-20 17:37:13.413 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :41ms
[2022-07-20 17:37:13.413 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:37:13.413 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :29ms
[2022-07-20 17:37:13.414 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:37:13.417 +05:30 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Projects] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
ORDER BY [p].[ProjectName]
[2022-07-20 17:37:13.418 +05:30 INF] Department DAL Time elapsed for  GetProjectsFromDatabase() :33ms
[2022-07-20 17:37:13.419 +05:30 INF] Department Service Time elapsed for  ViewProjects(int departmentId) :37ms
[2022-07-20 17:37:13.419 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Project, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType23`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:37:13.424 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1081
[2022-07-20 17:37:13.425 +05:30 INF] Executed action IMS.Controller.ProjectController.ViewProjects (Source) in 47.0963ms
[2022-07-20 17:37:13.425 +05:30 INF] Executed endpoint 'IMS.Controller.ProjectController.ViewProjects (Source)'
[2022-07-20 17:37:13.425 +05:30 INF] RequestBody: 
[2022-07-20 17:37:13.425 +05:30 INF] ResponseBody: [{"projectId":20,"projectName":"Banking_BFS","departmentName":"BFS"},{"projectId":8,"projectName":"Banking_JAVA","departmentName":"JAVA"},{"projectId":16,"projectName":"Banking_LAMP","departmentName":"LAMP"},{"projectId":4,"projectName":"Banking_NET","departmentName":".NET"},{"projectId":14,"projectName":"Employee_Management_LAMP","departmentName":"LAMP"},{"projectId":2,"projectName":"Employee_Management_NET","departmentName":".NET"},{"projectId":17,"projectName":"Interview_Management_BFS","departmentName":"BFS"},{"projectId":5,"projectName":"Interview_Management_JAVA","departmentName":"JAVA"},{"projectId":13,"projectName":"Interview_Management_LAMP","departmentName":"LAMP"},{"projectId":1,"projectName":"Interview_Management_NET","departmentName":".NET"},{"projectId":9,"projectName":"Interview_Management_ORACLE","departmentName":"ORACLE"},{"projectId":21,"projectName":"Not Applicable","departmentName":"TAC"},{"projectId":19,"projectName":"Profile_Management_BFS","departmentName":"BFS"},{"projectId":7,"projectName":"Profile_Management_JAVA","departmentName":"JAVA"}]
[2022-07-20 17:37:13.426 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Project/ViewProjects application/json - - 200 1081 application/json;+charset=utf-8 55.1660ms
[2022-07-20 17:37:13.429 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:37:13.429 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 51.0861ms
[2022-07-20 17:37:13.429 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:37:13.429 +05:30 INF] RequestBody: 
[2022-07-20 17:37:13.430 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:37:13.430 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 59.5051ms
[2022-07-20 17:37:13.432 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:37:13.433 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 67.4442ms
[2022-07-20 17:37:13.433 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:37:13.433 +05:30 INF] RequestBody: 
[2022-07-20 17:37:13.433 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:37:13.433 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 75.9079ms
[2022-07-20 17:37:51.080 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:37:51.081 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.082 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.8919ms
[2022-07-20 17:37:51.089 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:37:51.089 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.091 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:37:51.091 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:37:51.092 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:37:51.094 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:51.105 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:37:51.105 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :12ms
[2022-07-20 17:37:51.105 +05:30 INF] Pool Service Time elapsed for  ViewPools() :12ms
[2022-07-20 17:37:51.105 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:37:51.106 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:37:51.106 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 14.3141ms
[2022-07-20 17:37:51.106 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:37:51.106 +05:30 INF] RequestBody: 
[2022-07-20 17:37:51.106 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:37:51.106 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 17.7121ms
[2022-07-20 17:37:51.296 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:37:51.296 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.296 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.7899ms
[2022-07-20 17:37:51.298 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:37:51.298 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.299 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:37:51.299 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:37:51.299 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:37:51.299 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:37:51.300 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:51.309 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:37:51.309 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :9ms
[2022-07-20 17:37:51.317 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:37:51.317 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.317 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.3453ms
[2022-07-20 17:37:51.319 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:37:51.320 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:37:51.321 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:37:51.321 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:37:51.321 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:37:51.323 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:37:51.324 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.324 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:37:51.326 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:37:51.326 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.326 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :26ms
[2022-07-20 17:37:51.326 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:37:51.327 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :4ms
[2022-07-20 17:37:51.327 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:37:51.327 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.327 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :27ms
[2022-07-20 17:37:51.327 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:37:51.327 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:37:51.327 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.1285ms
[2022-07-20 17:37:51.327 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:37:51.327 +05:30 INF] RequestBody: 
[2022-07-20 17:37:51.327 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:37:51.328 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.2704ms
[2022-07-20 17:37:51.339 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:37:51.339 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-20 17:37:51.340 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:37:51.340 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :40ms
[2022-07-20 17:37:51.345 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:37:51.356 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:37:51.356 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :40ms
[2022-07-20 17:37:51.356 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :56ms
[2022-07-20 17:37:51.357 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.357 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :41ms
[2022-07-20 17:37:51.358 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.358 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:37:51.359 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:37:51.359 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:37:51.360 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:37:51.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :43ms
[2022-07-20 17:37:51.360 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:37:51.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :44ms
[2022-07-20 17:37:51.361 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:37:51.362 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:37:51.362 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :44ms
[2022-07-20 17:37:51.362 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :62ms
[2022-07-20 17:37:51.362 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :62ms
[2022-07-20 17:37:51.362 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:37:51.362 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:37:51.363 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 63.9183ms
[2022-07-20 17:37:51.363 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:37:51.363 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:37:51.364 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 65.7534ms
[2022-07-20 17:38:11.419 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - -
[2022-07-20 17:38:11.419 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:11.420 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Employee/CreateNewEmployee - - - 204 - - 1.0462ms
[2022-07-20 17:38:11.436 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 172
[2022-07-20 17:38:11.441 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:11.441 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:38:11.442 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Employee/CreateNewEmployee
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 172
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:38:11.442 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:38:11.446 +05:30 INF] Route matched with {action = "CreateNewEmployee", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateNewEmployee(IMS.Models.Employee) on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:38:11.448 +05:30 INF] RequestBody: {"employeeId":0,"employeeAceNumber":"ACE00077","name":"dsfesdfvfs","departmentId":"5","roleId":"7","projectId":"20","emailId":"wegsd@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:38:11.563 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:11.592 +05:30 INF] Executed DbCommand (26ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Departments] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:11.593 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:11.598 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__roleId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Roles] AS [r]
        WHERE [r].[RoleId] = @__roleId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:11.610 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__projectId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Projects] AS [p]
        WHERE [p].[ProjectId] = @__projectId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:11.612 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:11.627 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__employee_EmployeeAceNumber_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmployeeAceNumber] = @__employee_EmployeeAceNumber_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:11.634 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employee_EmailId_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employee_EmailId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:11.862 +05:30 INF] Executed DbCommand (30ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (DbType = Boolean), @p4='?' (DbType = Boolean), @p5='?' (DbType = Boolean), @p6='?' (Size = 4000), @p7='?' (Size = 4000), @p8='?' (DbType = Int32), @p9='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Employees] ([DepartmentId], [EmailId], [EmployeeAceNumber], [IsActive], [IsAdminAccepted], [IsAdminResponded], [Name], [Password], [ProjectId], [RoleId])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9);
SELECT [EmployeeId]
FROM [Employees]
WHERE @@ROWCOUNT = 1 AND [EmployeeId] = scope_identity();
[2022-07-20 17:38:11.908 +05:30 INF] Employee DAL Time elapsed for  AddEmployeeToDatabase(Employee employee)  :297ms
[2022-07-20 17:38:11.908 +05:30 INF] Employee Service Time elapsed for  CreateNewEmployee(Employee employee) :364ms
[2022-07-20 17:38:11.909 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType47`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:38:11.910 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 107
[2022-07-20 17:38:11.911 +05:30 INF] Executed action IMS.Controllers.EmployeeController.CreateNewEmployee (Source) in 464.2964ms
[2022-07-20 17:38:11.911 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.CreateNewEmployee (Source)'
[2022-07-20 17:38:11.911 +05:30 INF] ResponseBody: {"message":"Account has been created sucessfully. Please wait until you receive a mail from administrator"}
[2022-07-20 17:38:11.911 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Employee/CreateNewEmployee application/json 172 - 200 107 application/json;+charset=utf-8 475.0154ms
[2022-07-20 17:38:23.898 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:38:23.898 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.899 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.6541ms
[2022-07-20 17:38:23.902 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:38:23.902 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.908 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:38:23.908 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:38:23.908 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:38:23.912 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:23.919 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:38:23.919 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.920 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.3600ms
[2022-07-20 17:38:23.921 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:38:23.922 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.923 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:38:23.923 +05:30 INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:38:23.923 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:38:23.923 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:38:23.924 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :14ms
[2022-07-20 17:38:23.924 +05:30 INF] Pool Service Time elapsed for  ViewPools() :14ms
[2022-07-20 17:38:23.924 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:38:23.924 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:38:23.925 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:38:23.925 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 16.7061ms
[2022-07-20 17:38:23.925 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:38:23.925 +05:30 INF] RequestBody: 
[2022-07-20 17:38:23.925 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:38:23.925 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 23.5199ms
[2022-07-20 17:38:23.927 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:38:23.927 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.927 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:23.928 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.9868ms
[2022-07-20 17:38:23.932 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:38:23.933 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:38:23.934 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:38:23.934 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:38:23.934 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:38:23.936 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:38:23.945 +05:30 INF] Executed DbCommand (17ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:38:23.945 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :19ms
[2022-07-20 17:38:23.946 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:38:23.948 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:38:23.948 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :12ms
[2022-07-20 17:38:23.948 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:38:23.948 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:38:23.948 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:38:23.949 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 14.5215ms
[2022-07-20 17:38:23.949 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:38:23.949 +05:30 INF] RequestBody: 
[2022-07-20 17:38:23.949 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:38:23.949 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 16.6825ms
[2022-07-20 17:38:23.961 +05:30 INF] Executed DbCommand (15ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:23.961 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :35ms
[2022-07-20 17:38:23.962 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:23.962 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :36ms
[2022-07-20 17:38:23.963 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:23.963 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :37ms
[2022-07-20 17:38:23.978 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:38:23.978 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :52ms
[2022-07-20 17:38:23.979 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:38:23.979 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :53ms
[2022-07-20 17:38:23.989 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:38:24.003 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:38:24.003 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :53ms
[2022-07-20 17:38:24.004 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :78ms
[2022-07-20 17:38:24.004 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:24.004 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :54ms
[2022-07-20 17:38:24.005 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:24.005 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :54ms
[2022-07-20 17:38:24.006 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:38:24.006 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :55ms
[2022-07-20 17:38:24.006 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:38:24.006 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :55ms
[2022-07-20 17:38:24.007 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:38:24.007 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :56ms
[2022-07-20 17:38:24.007 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:38:24.008 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:38:24.008 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :56ms
[2022-07-20 17:38:24.008 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :82ms
[2022-07-20 17:38:24.008 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :82ms
[2022-07-20 17:38:24.008 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:38:24.008 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:38:24.008 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 84.956ms
[2022-07-20 17:38:24.008 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:38:24.008 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:38:24.008 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 86.8391ms
[2022-07-20 17:39:42.086 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:39:42.086 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.087 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6292ms
[2022-07-20 17:39:42.087 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:39:42.087 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.087 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2172ms
[2022-07-20 17:39:42.120 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:39:42.120 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.121 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.3491ms
[2022-07-20 17:39:42.121 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:39:42.121 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.122 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:42.122 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:39:42.122 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:39:42.124 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:42.130 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:39:42.130 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.137 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:42.139 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:39:42.140 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:39:42.141 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:42.144 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:39:42.144 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:42.145 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:42.145 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:39:42.145 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:39:42.145 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:39:42.146 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:42.148 +05:30 INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:39:42.148 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :25ms
[2022-07-20 17:39:42.148 +05:30 INF] Pool Service Time elapsed for  ViewPools() :26ms
[2022-07-20 17:39:42.148 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:39:42.149 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:39:42.149 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 26.9736ms
[2022-07-20 17:39:42.149 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:39:42.149 +05:30 INF] RequestBody: 
[2022-07-20 17:39:42.149 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:39:42.149 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 28.4731ms
[2022-07-20 17:39:42.153 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:39:42.153 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :7ms
[2022-07-20 17:39:42.156 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:39:42.157 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:39:42.157 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :16ms
[2022-07-20 17:39:42.157 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:39:42.158 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:39:42.158 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:39:42.161 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 20.7924ms
[2022-07-20 17:39:42.161 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:39:42.161 +05:30 INF] RequestBody: 
[2022-07-20 17:39:42.161 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:39:42.161 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 31.3925ms
[2022-07-20 17:39:42.197 +05:30 INF] Executed DbCommand (43ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.197 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :51ms
[2022-07-20 17:39:42.247 +05:30 INF] Executed DbCommand (39ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.247 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :101ms
[2022-07-20 17:39:42.248 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.248 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :102ms
[2022-07-20 17:39:42.273 +05:30 INF] Executed DbCommand (25ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:42.273 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :127ms
[2022-07-20 17:39:42.274 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:42.274 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :128ms
[2022-07-20 17:39:42.312 +05:30 INF] Executed DbCommand (38ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:39:42.360 +05:30 INF] Executed DbCommand (48ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:39:42.361 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :128ms
[2022-07-20 17:39:42.361 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :215ms
[2022-07-20 17:39:42.361 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.362 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :129ms
[2022-07-20 17:39:42.370 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.370 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :137ms
[2022-07-20 17:39:42.370 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:42.371 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :137ms
[2022-07-20 17:39:42.371 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:42.371 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :138ms
[2022-07-20 17:39:42.372 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:42.372 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :139ms
[2022-07-20 17:39:42.373 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:39:42.379 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:39:42.379 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :139ms
[2022-07-20 17:39:42.379 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :233ms
[2022-07-20 17:39:42.379 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :233ms
[2022-07-20 17:39:42.379 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:39:42.379 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:39:42.379 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 234.5009ms
[2022-07-20 17:39:42.379 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:39:42.379 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:39:42.380 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 235.6138ms
[2022-07-20 17:39:50.255 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:39:50.255 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.255 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.5231ms
[2022-07-20 17:39:50.258 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:39:50.258 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.259 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:50.259 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:39:50.259 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:39:50.260 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:50.261 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:39:50.261 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.262 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.1678ms
[2022-07-20 17:39:50.263 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:39:50.263 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.263 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.6386ms
[2022-07-20 17:39:50.264 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:39:50.264 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.265 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:50.265 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:39:50.265 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:39:50.265 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:39:50.265 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:39:50.266 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :6ms
[2022-07-20 17:39:50.266 +05:30 INF] Pool Service Time elapsed for  ViewPools() :6ms
[2022-07-20 17:39:50.266 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:50.266 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:39:50.266 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:39:50.266 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 7.0754ms
[2022-07-20 17:39:50.266 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:39:50.266 +05:30 INF] RequestBody: 
[2022-07-20 17:39:50.266 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:39:50.266 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 8.8215ms
[2022-07-20 17:39:50.268 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:39:50.269 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:50.269 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:39:50.269 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:39:50.269 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:39:50.270 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:50.275 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:39:50.275 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :9ms
[2022-07-20 17:39:50.275 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:39:50.276 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:39:50.276 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 17:39:50.276 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:39:50.276 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:39:50.276 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:39:50.277 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 7.4407ms
[2022-07-20 17:39:50.277 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:39:50.277 +05:30 INF] RequestBody: 
[2022-07-20 17:39:50.277 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:39:50.277 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.3411ms
[2022-07-20 17:39:50.283 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.284 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-20 17:39:50.284 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.284 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-20 17:39:50.285 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.285 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :19ms
[2022-07-20 17:39:50.298 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:50.298 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :32ms
[2022-07-20 17:39:50.299 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:50.299 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :33ms
[2022-07-20 17:39:50.313 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:39:50.325 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:39:50.325 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :33ms
[2022-07-20 17:39:50.325 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :59ms
[2022-07-20 17:39:50.329 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.329 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :37ms
[2022-07-20 17:39:50.334 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.344 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :52ms
[2022-07-20 17:39:50.346 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:39:50.346 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :54ms
[2022-07-20 17:39:50.355 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:50.356 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :63ms
[2022-07-20 17:39:50.418 +05:30 INF] Executed DbCommand (60ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:39:50.418 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :126ms
[2022-07-20 17:39:50.454 +05:30 INF] Executed DbCommand (36ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:39:50.461 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:39:50.461 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :126ms
[2022-07-20 17:39:50.461 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :195ms
[2022-07-20 17:39:50.461 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :195ms
[2022-07-20 17:39:50.461 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:39:50.462 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:39:50.462 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 197.5428ms
[2022-07-20 17:39:50.463 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:39:50.463 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:39:50.463 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 198.7133ms
[2022-07-20 17:39:59.758 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:39:59.758 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:59.758 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.6083ms
[2022-07-20 17:39:59.766 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68
[2022-07-20 17:39:59.767 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:39:59.767 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 68
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:39:59.767 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:39:59.768 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:39:59.768 +05:30 INF] RequestBody: {"emailId":"vinoth.jayakumar@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:39:59.770 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:39:59.775 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:39:59.776 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:39:59.776 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:39:59.776 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:39:59.777 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:39:59.777 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:39:59.778 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:39:59.778 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:39:59.778 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 10.8712ms
[2022-07-20 17:39:59.779 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:39:59.779 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:39:59.779 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68 - 400 - text/plain;+charset=utf-8 12.5390ms
[2022-07-20 17:40:29.256 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:40:29.256 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:40:29.257 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.9409ms
[2022-07-20 17:40:29.278 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68
[2022-07-20 17:40:29.278 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:40:29.279 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 68
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:40:29.279 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:40:29.280 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:40:29.281 +05:30 INF] RequestBody: {"emailId":"vinoth.jayakumar@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:40:29.283 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:40:29.285 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:40:29.286 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:40:29.286 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :4ms
[2022-07-20 17:40:29.287 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:40:29.287 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :5ms
[2022-07-20 17:40:29.288 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:40:29.288 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:40:29.288 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:40:29.289 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 8.8539ms
[2022-07-20 17:40:29.289 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:40:29.289 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:40:29.289 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68 - 400 - text/plain;+charset=utf-8 10.8508ms
[2022-07-20 17:40:38.676 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - -
[2022-07-20 17:40:38.676 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:40:38.676 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Token/Login - - - 204 - - 0.2628ms
[2022-07-20 17:40:38.688 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55
[2022-07-20 17:40:38.688 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:40:38.688 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:40:38.688 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 55
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:40:38.688 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:40:38.688 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:40:38.689 +05:30 INF] RequestBody: {"emailId":"bakky@aspiresys.com","password":"Bakky@09"}
[2022-07-20 17:40:38.690 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:40:38.696 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:40:38.697 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:40:38.697 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:40:38.697 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:40:38.697 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:40:38.697 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:40:38.697 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:40:38.697 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:40:38.698 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 9.0814ms
[2022-07-20 17:40:38.698 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:40:38.698 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:40:38.698 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 55 - 400 - text/plain;+charset=utf-8 9.8214ms
[2022-07-20 17:41:04.606 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/ - -
[2022-07-20 17:41:04.607 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: keep-alive
Host: 172.24.217.145
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Upgrade-Insecure-Requests: [Redacted]
[2022-07-20 17:41:04.607 +05:30 INF] Response:
StatusCode: 404
[2022-07-20 17:41:04.607 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/ - - - 404 - - 1.2559ms
[2022-07-20 17:42:42.882 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68
[2022-07-20 17:42:42.882 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:42:42.883 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:42:42.883 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 68
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:42:42.883 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:42:42.883 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:42:42.885 +05:30 INF] RequestBody: {"emailId":"vinoth.jayakumar@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:42:42.886 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:42:42.891 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:42:42.892 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:42:42.892 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :7ms
[2022-07-20 17:42:42.893 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:42:42.893 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :7ms
[2022-07-20 17:42:42.893 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:42:42.893 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:42:42.893 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:42:42.894 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 10.2656ms
[2022-07-20 17:42:42.894 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:42:42.894 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:42:42.894 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 68 - 400 - text/plain;+charset=utf-8 12.0359ms
[2022-07-20 17:42:58.958 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-20 17:42:58.958 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:42:58.958 +05:30 INF] Bearer was not authenticated. Failure message: No SecurityTokenValidator available for token.
[2022-07-20 17:42:58.958 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:42:58.958 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:42:58.959 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:42:58.959 +05:30 INF] RequestBody: {"emailId":"vinoth@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:42:58.961 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:42:58.965 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:42:58.970 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:42:58.974 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:42:58.979 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:42:58.992 +05:30 INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-20 17:42:58.993 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :33ms
[2022-07-20 17:42:58.993 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :33ms
[2022-07-20 17:42:58.994 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :34ms
[2022-07-20 17:42:58.994 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:42:58.994 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 856
[2022-07-20 17:42:58.995 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 36.137ms
[2022-07-20 17:42:58.995 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:42:58.995 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..QMbixG1c1yQqGv16hcrZPg.HSJQU_EFAVarL7jlUtE60wVX1-PXyLikpURFi1QOmVjGPQZmokK_bBYc3YL5wur8GZRZd9lYkp04TMSPieDVgEARFQ5mcUsYdeI487Nu9zquCGiLginlNip0VQ3leBWfkfVZHV_PzRsL9P9YjsQhsPeEAmlHSUwtP0C__kgiHc1A06KK5Mu0XQposC4R_6xco6cYlNBpJ7yj362VRvF1UoWvLCPcc_T8OrUDratK-l0Qw5rSFXsBHSGCZwhho90ynDMlhSCe4_bAw4vNNwe0gfdi-7xH5XEsoYgEXa0QscQsmkUnrkNYzbLpljYCvI8Jxjb5Q5_GpMzFMCNmyId4-bS2BK3DvLNzp_XKzSx5sO2GgbJ-dNMulZk3ge_-Gn-5lDZ9p-26MKxiF9Wrg8TbX07SoTv9SOEv-F2EobNGqeGBw6LWm8AUwDxupxnn5_33PekiV8Q6HtCcQ1gVEp3bc-l8DqFuVWqs8ZgDrlxIBhai4D-g5kOUGygHOXOUSZiVDPLB8UtYuAHTxdfDS4yzXWx87lXtg4l6rH-POUblOf3q9ELOKxhqqMCBfzk8Kn3-Tfq2BsCVdvqew0TuDHwk9Bob4r0-vKj2oTqvsP3K18g.ntTqD-toR_btLgRLgP_0U0t9xhrnS9KCMv49i7uPR2Y","expiryInMinutes":360,"isAdmin":false,"isTAC":false,"isManagement":false,"userName":"Vinoth"}
[2022-07-20 17:42:58.995 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 200 856 application/json;+charset=utf-8 37.0755ms
[2022-07-20 17:47:29.816 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:47:29.817 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.817 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.0267ms
[2022-07-20 17:47:29.821 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:47:29.821 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:47:29.821 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.821 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.821 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2488ms
[2022-07-20 17:47:29.822 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:47:29.822 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:47:29.822 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:47:29.822 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:47:29.822 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.823 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:47:29.823 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.9340ms
[2022-07-20 17:47:29.824 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:47:29.824 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.825 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:47:29.825 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:47:29.825 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:47:29.825 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:47:29.827 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:47:29.828 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:47:29.828 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :5ms
[2022-07-20 17:47:29.828 +05:30 INF] Pool Service Time elapsed for  ViewPools() :5ms
[2022-07-20 17:47:29.828 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:29.828 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:47:29.828 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:47:29.828 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:47:29.828 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:47:29.828 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 6.1876ms
[2022-07-20 17:47:29.828 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:47:29.828 +05:30 INF] RequestBody: 
[2022-07-20 17:47:29.828 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:47:29.828 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 7.3110ms
[2022-07-20 17:47:29.829 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:47:29.829 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:47:29.830 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:47:29.834 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:47:29.835 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :5ms
[2022-07-20 17:47:29.842 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.842 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :12ms
[2022-07-20 17:47:29.845 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.845 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :15ms
[2022-07-20 17:47:29.846 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.846 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-20 17:47:29.869 +05:30 INF] Executed DbCommand (23ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:47:29.870 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :39ms
[2022-07-20 17:47:29.871 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:47:29.871 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:47:29.871 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :41ms
[2022-07-20 17:47:29.871 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:47:29.872 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :46ms
[2022-07-20 17:47:29.873 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:47:29.873 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:47:29.873 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:47:29.874 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 49.2307ms
[2022-07-20 17:47:29.874 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:47:29.874 +05:30 INF] RequestBody: 
[2022-07-20 17:47:29.874 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:47:29.875 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 50.5381ms
[2022-07-20 17:47:29.881 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:47:29.887 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:47:29.887 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :41ms
[2022-07-20 17:47:29.887 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :57ms
[2022-07-20 17:47:29.887 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.887 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :41ms
[2022-07-20 17:47:29.888 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.888 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:47:29.888 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:47:29.888 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :42ms
[2022-07-20 17:47:29.889 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:47:29.889 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :42ms
[2022-07-20 17:47:29.889 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:47:29.889 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :43ms
[2022-07-20 17:47:29.889 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:47:29.890 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:47:29.890 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :43ms
[2022-07-20 17:47:29.890 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :60ms
[2022-07-20 17:47:29.890 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :60ms
[2022-07-20 17:47:29.890 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:47:29.890 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:47:29.891 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 61.936ms
[2022-07-20 17:47:29.891 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:47:29.891 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:47:29.892 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 64.0136ms
[2022-07-20 17:47:43.017 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58
[2022-07-20 17:47:43.018 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:47:43.018 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 58
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:47:43.018 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:47:43.018 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:47:43.019 +05:30 INF] RequestBody: {"emailId":"vishnu@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:47:43.020 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:47:43.022 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:47:43.022 +05:30 ERR] Exception on Employee DAL : CheckLoginCrendentials(string employeeAceNumber, string password) : Invalid credentials
[2022-07-20 17:47:43.022 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :3ms
[2022-07-20 17:47:43.022 +05:30 ERR] Employee DAL : CheckLoginCredentails throwed an exception : Invalid credentials
[2022-07-20 17:47:43.022 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :3ms
[2022-07-20 17:47:43.023 +05:30 ERR] Token Service : AuthToken() : Invalid credentials
[2022-07-20 17:47:43.023 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:47:43.023 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:47:43.023 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 4.4044ms
[2022-07-20 17:47:43.023 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:47:43.023 +05:30 INF] ResponseBody: Invalid credentials
[2022-07-20 17:47:43.023 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 58 - 400 - text/plain;+charset=utf-8 5.6096ms
[2022-07-20 17:49:22.286 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57
[2022-07-20 17:49:22.287 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:49:22.287 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Token/Login
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 57
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 17:49:22.287 +05:30 INF] Executing endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:49:22.287 +05:30 INF] Route matched with {action = "Login", controller = "Token"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(IMS.Models.User) on controller IMS.Controllers.TokenController (Source).
[2022-07-20 17:49:22.288 +05:30 INF] RequestBody: {"emailId":"gokul@aspiresys.com","password":"Pass@12345"}
[2022-07-20 17:49:22.289 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:49:22.291 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeMail_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE [e].[EmailId] = @__employeeMail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:49:22.293 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE ([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:49:22.294 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsActive] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:49:22.296 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeMail_0='?' (Size = 4000), @__password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Employees] AS [e]
        WHERE (([e].[EmailId] = @__employeeMail_0) AND ([e].[Password] = @__password_1)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:49:22.301 +05:30 INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-20 17:49:22.302 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :13ms
[2022-07-20 17:49:22.302 +05:30 INF] Employee DAL Time elapsed for  CheckLoginCrendentials(string employeeMail, string password)  :13ms
[2022-07-20 17:49:22.302 +05:30 INF] token Service Time elapsed for  AuthToken(string employeeMail, string password) :14ms
[2022-07-20 17:49:22.302 +05:30 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType46`6[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:49:22.302 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 854
[2022-07-20 17:49:22.303 +05:30 INF] Executed action IMS.Controllers.TokenController.Login (Source) in 15.2102ms
[2022-07-20 17:49:22.303 +05:30 INF] Executed endpoint 'IMS.Controllers.TokenController.Login (Source)'
[2022-07-20 17:49:22.303 +05:30 INF] ResponseBody: {"token":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwidHlwIjoiSldUIn0..QFhdL3QdwAH2urkU_yMj_A.DF3TBFRh3TANfK5YORoifTuWaRKTTN6kFDsT6MBN_J3uRslnaJn2J5ppSmn5tq9EaaxBHI9vY00soGYeA6T0E9dWexWLDsXtZq1a05yZq49DM4FycQsrJHnsO_zgO1aFNPm_Yt956xINtySqJ4JrJxha_fHXXkh21x1lICHpVFjG5PFd6CshtHWIn3NWc7sfYyRiID_Pi-pinqP8WNekbjhYSMKjpjDlb3lk0IB6fHLK214dWV-Za6oIlZ0-pksRT0ZwiEFN4C6NX-4-zkhGbiusu1xbv8jycSgsr8kIldH06As7giqeCCt_pMHuG3ahCoVzLw1izda49VQ1mbhEt3yphPFtGsx4TwDDpcmPGZlqNOxMg4gloaNm9JRFL_OJ7iusFaqBOtdQ_dvwyzt3a_diEDN7Y3BaoB4YO_CXT6kUJvW3o4RPLjfaoUCnSfY_B_4wA4DeFJ4Qgt3ULp97YW155SaCpHhKLlF0bWLbXVQahDVk_N7Hryod6UIjQCAxe3dsuZVGfQxhMFzPQ5VDhgu5f4zW5Rc1zgBfhhh3g-hq7XNc5BQfUtreWFYC9iI9bOi-x_WkxnDhQ5vLBzpkXbvTo7Vyr9MQivvrcYiYwEs.xhB-VR4rGl3aVeOjo-hcBjP1iM5FfejE5FP62H2MP-E","expiryInMinutes":360,"isAdmin":false,"isTAC":true,"isManagement":false,"userName":"Gokul"}
[2022-07-20 17:49:22.303 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Token/Login application/json 57 - 200 854 application/json;+charset=utf-8 16.2944ms
[2022-07-20 17:49:24.633 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:49:24.634 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:49:24.634 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:49:24.634 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:49:24.635 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:49:24.635 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:49:24.635 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:49:24.635 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:49:24.637 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:49:24.637 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:49:24.639 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:49:24.639 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-20 17:49:24.639 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-20 17:49:24.639 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:49:24.640 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:49:24.640 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 5.1114ms
[2022-07-20 17:49:24.640 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:49:24.640 +05:30 INF] RequestBody: 
[2022-07-20 17:49:24.640 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:49:24.640 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 6.7543ms
[2022-07-20 17:49:24.640 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:49:24.641 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :4ms
[2022-07-20 17:49:24.641 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :4ms
[2022-07-20 17:49:24.641 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:49:24.641 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:49:24.641 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 6.2014ms
[2022-07-20 17:49:24.641 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:49:24.641 +05:30 INF] RequestBody: 
[2022-07-20 17:49:24.641 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:49:24.641 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 7.0073ms
[2022-07-20 17:49:27.714 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:49:27.715 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:49:27.715 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:49:27.715 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:49:27.716 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:49:27.722 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:49:27.723 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :7ms
[2022-07-20 17:49:27.723 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :7ms
[2022-07-20 17:49:27.723 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:49:27.723 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:49:27.724 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 8.606ms
[2022-07-20 17:49:27.724 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:49:27.724 +05:30 INF] RequestBody: 
[2022-07-20 17:49:27.724 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:49:27.724 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 9.3688ms
[2022-07-20 17:50:07.655 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:50:07.656 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:07.656 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:07.657 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:50:07.657 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:50:07.658 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:07.658 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:50:07.658 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:50:07.658 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:07.659 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:07.659 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:50:07.660 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-20 17:50:07.660 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:50:07.660 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-20 17:50:07.660 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :2ms
[2022-07-20 17:50:07.660 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :2ms
[2022-07-20 17:50:07.660 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:07.660 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:07.660 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:50:07.660 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:50:07.661 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 2.9229ms
[2022-07-20 17:50:07.661 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:50:07.661 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.0264ms
[2022-07-20 17:50:07.661 +05:30 INF] RequestBody: 
[2022-07-20 17:50:07.661 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:07.661 +05:30 INF] RequestBody: 
[2022-07-20 17:50:07.661 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:50:07.661 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:50:07.661 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 3.7024ms
[2022-07-20 17:50:07.661 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 5.6342ms
[2022-07-20 17:50:10.307 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:50:10.308 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:10.308 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:10.308 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:50:10.309 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:10.310 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:50:10.311 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-20 17:50:10.311 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-20 17:50:10.311 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:10.311 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:50:10.312 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.6731ms
[2022-07-20 17:50:10.312 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:10.312 +05:30 INF] RequestBody: 
[2022-07-20 17:50:10.312 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:50:10.312 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 4.8632ms
[2022-07-20 17:50:18.297 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:50:18.298 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:18.298 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:18.298 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:50:18.299 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:18.300 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:50:18.300 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json -
[2022-07-20 17:50:18.300 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :2ms
[2022-07-20 17:50:18.301 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Department/ViewDepartments
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:18.301 +05:30 INF] Pool Service Time elapsed for  ViewPools() :2ms
[2022-07-20 17:50:18.301 +05:30 INF] Executing endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:50:18.301 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:18.301 +05:30 INF] Route matched with {action = "ViewDepartments", controller = "Department"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewDepartments() on controller IMS.Controllers.DepartmentController (Source).
[2022-07-20 17:50:18.301 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:50:18.301 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.125ms
[2022-07-20 17:50:18.301 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:18.302 +05:30 INF] RequestBody: 
[2022-07-20 17:50:18.302 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:50:18.302 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 4.2147ms
[2022-07-20 17:50:18.302 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:18.303 +05:30 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Departments] AS [d]
WHERE [d].[IsActive] = CAST(1 AS bit)
ORDER BY [d].[DepartmentName]
[2022-07-20 17:50:18.303 +05:30 INF] Department DAL Time elapsed for  GetDepartmentsFromDatabase() :1ms
[2022-07-20 17:50:18.303 +05:30 INF] Department Service Time elapsed for  ViewDepartments() :1ms
[2022-07-20 17:50:18.303 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Department, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:18.303 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1266
[2022-07-20 17:50:18.303 +05:30 INF] Executed action IMS.Controllers.DepartmentController.ViewDepartments (Source) in 2.4468ms
[2022-07-20 17:50:18.303 +05:30 INF] Executed endpoint 'IMS.Controllers.DepartmentController.ViewDepartments (Source)'
[2022-07-20 17:50:18.303 +05:30 INF] RequestBody: 
[2022-07-20 17:50:18.303 +05:30 INF] ResponseBody: [{"departmentId":1,"departmentName":".NET","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":12,"updatedOn":"2022-07-19T14:43:33.1825162","pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":5,"departmentName":"BFS","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":2,"departmentName":"JAVA","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":4,"departmentName":"LAMP","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":3,"departmentName":"ORACLE","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]},{"departmentId":6,"departmentName":"TAC","isActive":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"pools":[],"projects":[],"employeesUnderDepartment":null,"drivesUnderDepartment":[]}]
[2022-07-20 17:50:18.303 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Department/ViewDepartments application/json - - 200 1266 application/json;+charset=utf-8 3.1950ms
[2022-07-20 17:50:21.049 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json -
[2022-07-20 17:50:21.050 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Role/ViewRoles
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:21.050 +05:30 INF] Executing endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:50:21.050 +05:30 INF] Route matched with {action = "ViewRoles", controller = "Role"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewRoles() on controller IMS.Controllers.RoleController (Source).
[2022-07-20 17:50:21.051 +05:30 ERR] logger DAL
[2022-07-20 17:50:21.051 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:50:21.052 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:21.052 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:21.052 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:21.052 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:50:21.052 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:21.055 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Roles] AS [r]
WHERE [r].[IsActive] = CAST(1 AS bit)
ORDER BY [r].[RoleName]
[2022-07-20 17:50:21.055 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:50:21.055 +05:30 INF] Role DAL Time elapsed for  GetRolesFromDatabase() :4ms
[2022-07-20 17:50:21.055 +05:30 INF] Role Service Time elapsed for  ViewRoles(int roleId) :4ms
[2022-07-20 17:50:21.055 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[IMS.Models.Role, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:21.055 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1664
[2022-07-20 17:50:21.055 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-20 17:50:21.055 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-20 17:50:21.055 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:21.055 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:50:21.055 +05:30 INF] Executed action IMS.Controllers.RoleController.ViewRoles (Source) in 5.4158ms
[2022-07-20 17:50:21.055 +05:30 INF] Executed endpoint 'IMS.Controllers.RoleController.ViewRoles (Source)'
[2022-07-20 17:50:21.055 +05:30 INF] RequestBody: 
[2022-07-20 17:50:21.056 +05:30 INF] ResponseBody: [{"roleId":10,"roleName":"Admin","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":7,"roleName":"Delivery Manager","isActive":true,"isManagement":true,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":4,"roleName":"Module Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":3,"roleName":"Project Manager","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":2,"roleName":"Senior Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":8,"roleName":"Service Line Owner","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":6,"roleName":"Software Architect","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":1,"roleName":"Software Developer","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":9,"roleName":"TAC","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]},{"roleId":5,"roleName":"Technical Lead","isActive":true,"isManagement":false,"addedBy":null,"addedOn":null,"updatedBy":null,"updatedOn":null,"employeesUnderRole":[]}]
[2022-07-20 17:50:21.056 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Role/ViewRoles application/json - - 200 1664 application/json;+charset=utf-8 6.1832ms
[2022-07-20 17:50:21.056 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.6846ms
[2022-07-20 17:50:21.056 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:50:21.056 +05:30 INF] RequestBody: 
[2022-07-20 17:50:21.056 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:50:21.056 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 4.4184ms
[2022-07-20 17:50:21.084 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployees application/json -
[2022-07-20 17:50:21.089 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Employee/ViewEmployees
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:21.089 +05:30 INF] Executing endpoint 'IMS.Controllers.EmployeeController.ViewEmployees (Source)'
[2022-07-20 17:50:21.090 +05:30 INF] Route matched with {action = "ViewEmployees", controller = "Employee"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployees() on controller IMS.Controllers.EmployeeController (Source).
[2022-07-20 17:50:21.091 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:21.095 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn], [p].[ProjectId], [p].[DepartmentId], [p].[IsActive], [p].[ProjectName]
FROM [Employees] AS [e]
INNER JOIN [Departments] AS [d] ON [e].[DepartmentId] = [d].[DepartmentId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
INNER JOIN [Projects] AS [p] ON [e].[ProjectId] = [p].[ProjectId]
WHERE ([e].[IsActive] = CAST(1 AS bit)) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))
[2022-07-20 17:50:21.095 +05:30 INF] Employee DAL Time elapsed for  GetEmployeesFromDatabase()  :3ms
[2022-07-20 17:50:21.095 +05:30 INF] Employee Service Time elapsed for  ViewEmployees() :3ms
[2022-07-20 17:50:21.095 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Employee, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType40`6[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:21.098 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 906
[2022-07-20 17:50:21.098 +05:30 INF] Executed action IMS.Controllers.EmployeeController.ViewEmployees (Source) in 7.6895ms
[2022-07-20 17:50:21.098 +05:30 INF] Executed endpoint 'IMS.Controllers.EmployeeController.ViewEmployees (Source)'
[2022-07-20 17:50:21.098 +05:30 INF] RequestBody: 
[2022-07-20 17:50:21.098 +05:30 INF] ResponseBody: [{"employeeId":12,"employeeName":"Admin","employeeAceNumber":"ACE0012","employeeDepartmentName":"ADMIN","employeeProjectName":"Banking_NET","employeeRoleName":"Admin"},{"employeeId":47,"employeeName":"Vinoth","employeeAceNumber":"ACE9889","employeeDepartmentName":"ORACLE","employeeProjectName":"Interview_Management_ORACLE","employeeRoleName":"Software Developer"},{"employeeId":48,"employeeName":"Gokul","employeeAceNumber":"ACE7777","employeeDepartmentName":"TAC","employeeProjectName":"Not Applicable","employeeRoleName":"TAC"},{"employeeId":49,"employeeName":"Alessandro","employeeAceNumber":"ACE9000","employeeDepartmentName":".NET","employeeProjectName":"Employee_Management_NET","employeeRoleName":"Software Developer"},{"employeeId":53,"employeeName":"Girish","employeeAceNumber":"ACE9999","employeeDepartmentName":".NET","employeeProjectName":"Banking_NET","employeeRoleName":"Delivery Manager"}]
[2022-07-20 17:50:21.098 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Employee/ViewEmployees application/json - - 200 906 application/json;+charset=utf-8 14.6027ms
[2022-07-20 17:50:21.100 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=2 application/json -
[2022-07-20 17:50:21.100 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPoolMembers
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
[2022-07-20 17:50:21.100 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-20 17:50:21.101 +05:30 INF] Route matched with {action = "ViewPoolMembers", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPoolMembers(Int32) on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:50:21.106 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:50:21.125 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__poolId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolMembersId], [p].[EmployeeId], [p].[IsActive], [p].[PoolId], [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [PoolMembers] AS [p]
INNER JOIN [Employees] AS [e] ON [p].[EmployeeId] = [e].[EmployeeId]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ((([p].[PoolId] = @__poolId_0) AND ([p].[IsActive] = CAST(1 AS bit))) AND ([e].[IsAdminAccepted] = CAST(1 AS bit))) AND ([e].[IsAdminResponded] = CAST(1 AS bit))
[2022-07-20 17:50:21.125 +05:30 INF] Pool DAL Time elapsed for GetPoolMembersFromDatabase(int poolId)  :19ms
[2022-07-20 17:50:21.125 +05:30 INF] Pool Service Time elapsed for  ViewPoolMembers(int poolId) :20ms
[2022-07-20 17:50:21.125 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.PoolMembers, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType45`5[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:50:21.126 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 2
[2022-07-20 17:50:21.127 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPoolMembers (Source) in 25.4103ms
[2022-07-20 17:50:21.127 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPoolMembers (Source)'
[2022-07-20 17:50:21.127 +05:30 INF] RequestBody: 
[2022-07-20 17:50:21.127 +05:30 INF] ResponseBody: []
[2022-07-20 17:50:21.127 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPoolMembers?poolId=2 application/json - - 200 2 application/json;+charset=utf-8 26.8981ms
[2022-07-20 17:52:38.281 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:52:38.281 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.282 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6981ms
[2022-07-20 17:52:38.286 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:52:38.286 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.287 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.0246ms
[2022-07-20 17:52:38.290 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:52:38.290 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.291 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:52:38.291 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:52:38.291 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:52:38.292 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:52:38.293 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:52:38.295 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:52:38.295 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.295 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:52:38.295 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:52:38.295 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:52:38.296 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:52:38.296 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:52:38.296 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.298 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 1.3664ms
[2022-07-20 17:52:38.302 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:52:38.302 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:52:38.303 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:52:38.303 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:52:38.303 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:52:38.303 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:52:38.306 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:52:38.307 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:52:38.307 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :14ms
[2022-07-20 17:52:38.307 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :11ms
[2022-07-20 17:52:38.307 +05:30 INF] Pool Service Time elapsed for  ViewPools() :11ms
[2022-07-20 17:52:38.307 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:52:38.307 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:52:38.307 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 11.9457ms
[2022-07-20 17:52:38.307 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:52:38.307 +05:30 INF] RequestBody: 
[2022-07-20 17:52:38.307 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:52:38.308 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 12.6121ms
[2022-07-20 17:52:38.321 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:52:38.321 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :29ms
[2022-07-20 17:52:38.323 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:52:38.323 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :30ms
[2022-07-20 17:52:38.327 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:52:38.327 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :35ms
[2022-07-20 17:52:38.340 +05:30 INF] Executed DbCommand (13ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:52:38.340 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :48ms
[2022-07-20 17:52:38.342 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:52:38.342 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :49ms
[2022-07-20 17:52:38.348 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:52:38.351 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:52:38.352 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :48ms
[2022-07-20 17:52:38.353 +05:30 INF] Executed DbCommand (11ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:52:38.359 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:52:38.359 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:52:38.359 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:52:38.359 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 56.7269ms
[2022-07-20 17:52:38.359 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:52:38.359 +05:30 INF] RequestBody: 
[2022-07-20 17:52:38.359 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:52:38.360 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 57.4660ms
[2022-07-20 17:52:38.370 +05:30 INF] Executed DbCommand (16ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:52:38.370 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :49ms
[2022-07-20 17:52:38.370 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :77ms
[2022-07-20 17:52:38.370 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :77ms
[2022-07-20 17:52:38.370 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:52:38.370 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 318
[2022-07-20 17:52:38.370 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 79.2311ms
[2022-07-20 17:52:38.370 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:52:38.370 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}}]
[2022-07-20 17:52:38.371 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 318 application/json;+charset=utf-8 80.3190ms
[2022-07-20 17:53:07.544 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:53:07.545 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.545 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.4754ms
[2022-07-20 17:53:07.547 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:53:07.547 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.547 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:07.547 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:53:07.547 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:53:07.548 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:07.551 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:53:07.552 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4ms
[2022-07-20 17:53:07.552 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4ms
[2022-07-20 17:53:07.552 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:53:07.552 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:53:07.552 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.7441ms
[2022-07-20 17:53:07.552 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:53:07.552 +05:30 INF] RequestBody: 
[2022-07-20 17:53:07.552 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:53:07.552 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 5.6019ms
[2022-07-20 17:53:07.552 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:53:07.552 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.552 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.1251ms
[2022-07-20 17:53:07.558 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:53:07.558 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.559 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.9846ms
[2022-07-20 17:53:07.562 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:53:07.562 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.563 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:07.563 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:53:07.563 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:53:07.563 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:07.564 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:53:07.564 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:07.564 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:07.564 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:53:07.564 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:53:07.565 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:53:07.565 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:07.565 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:53:07.565 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:53:07.566 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :2ms
[2022-07-20 17:53:07.566 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:53:07.566 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:53:07.566 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:53:07.566 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 3.2393ms
[2022-07-20 17:53:07.566 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:53:07.566 +05:30 INF] RequestBody: 
[2022-07-20 17:53:07.566 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:53:07.566 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 4.2154ms
[2022-07-20 17:53:07.569 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:53:07.569 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :4ms
[2022-07-20 17:53:07.572 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.572 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :7ms
[2022-07-20 17:53:07.573 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.573 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :8ms
[2022-07-20 17:53:07.574 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.574 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :9ms
[2022-07-20 17:53:07.581 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:07.581 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :15ms
[2022-07-20 17:53:07.581 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:07.581 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :16ms
[2022-07-20 17:53:07.585 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:53:07.599 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:53:07.599 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :16ms
[2022-07-20 17:53:07.599 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :34ms
[2022-07-20 17:53:07.600 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.600 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-20 17:53:07.601 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.601 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-20 17:53:07.601 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:07.601 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-20 17:53:07.602 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:07.602 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :18ms
[2022-07-20 17:53:07.602 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:07.602 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :18ms
[2022-07-20 17:53:07.602 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:53:07.602 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:53:07.602 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :18ms
[2022-07-20 17:53:07.602 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :37ms
[2022-07-20 17:53:07.602 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :37ms
[2022-07-20 17:53:07.602 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:53:07.602 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 629
[2022-07-20 17:53:07.603 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 38.2167ms
[2022-07-20 17:53:07.603 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:53:07.603 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:53:07.603 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 629 application/json;+charset=utf-8 38.8296ms
[2022-07-20 17:53:31.143 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:53:31.143 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.144 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.7393ms
[2022-07-20 17:53:31.145 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:53:31.146 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.146 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:31.146 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:53:31.146 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:53:31.147 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:31.150 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:53:31.150 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4ms
[2022-07-20 17:53:31.151 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4ms
[2022-07-20 17:53:31.151 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:53:31.151 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:53:31.151 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 4.8272ms
[2022-07-20 17:53:31.151 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:53:31.151 +05:30 INF] RequestBody: 
[2022-07-20 17:53:31.151 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:53:31.151 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 5.5795ms
[2022-07-20 17:53:31.153 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:53:31.153 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.154 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.0313ms
[2022-07-20 17:53:31.154 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:53:31.154 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.155 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.8020ms
[2022-07-20 17:53:31.155 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:53:31.155 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.155 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:31.155 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:53:31.155 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:53:31.156 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:53:31.156 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:31.162 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:53:31.162 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :6ms
[2022-07-20 17:53:31.164 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:53:31.164 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:53:31.164 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:53:31.164 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:53:31.164 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:53:31.165 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:53:31.167 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:53:31.168 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:53:31.168 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :3ms
[2022-07-20 17:53:31.168 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:53:31.168 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:53:31.168 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:53:31.169 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 4.5558ms
[2022-07-20 17:53:31.169 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:53:31.169 +05:30 INF] RequestBody: 
[2022-07-20 17:53:31.169 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:53:31.169 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 5.1737ms
[2022-07-20 17:53:31.170 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.171 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :14ms
[2022-07-20 17:53:31.171 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.171 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :15ms
[2022-07-20 17:53:31.172 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.172 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :15ms
[2022-07-20 17:53:31.177 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.177 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :20ms
[2022-07-20 17:53:31.177 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.178 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :21ms
[2022-07-20 17:53:31.181 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:53:31.189 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:53:31.189 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :21ms
[2022-07-20 17:53:31.189 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :33ms
[2022-07-20 17:53:31.192 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.192 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:53:31.193 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.193 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :24ms
[2022-07-20 17:53:31.193 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.193 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :25ms
[2022-07-20 17:53:31.194 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.194 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :25ms
[2022-07-20 17:53:31.194 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.194 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :26ms
[2022-07-20 17:53:31.195 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:53:31.195 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:53:31.195 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :26ms
[2022-07-20 17:53:31.195 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :39ms
[2022-07-20 17:53:31.195 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.195 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :26ms
[2022-07-20 17:53:31.196 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.196 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :27ms
[2022-07-20 17:53:31.196 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:53:31.196 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :27ms
[2022-07-20 17:53:31.197 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.197 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :27ms
[2022-07-20 17:53:31.197 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:53:31.197 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :28ms
[2022-07-20 17:53:31.197 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:53:31.198 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:53:31.198 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :28ms
[2022-07-20 17:53:31.198 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :41ms
[2022-07-20 17:53:31.198 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :41ms
[2022-07-20 17:53:31.198 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:53:31.198 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 942
[2022-07-20 17:53:31.198 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 42.6793ms
[2022-07-20 17:53:31.198 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:53:31.198 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Vinoth","employeeACENumber":"ACE9889","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}},{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:53:31.198 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 942 application/json;+charset=utf-8 43.3850ms
[2022-07-20 17:54:16.185 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:54:16.185 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.186 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.0355ms
[2022-07-20 17:54:16.188 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:54:16.188 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.189 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.2194ms
[2022-07-20 17:54:16.189 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:54:16.189 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.190 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.7180ms
[2022-07-20 17:54:16.203 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:54:16.203 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.203 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:16.203 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:54:16.203 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:54:16.204 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:54:16.229 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:16.229 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:54:16.230 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.232 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:16.232 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:54:16.232 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:54:16.233 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:16.238 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:54:16.238 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:16.238 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:16.238 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:54:16.238 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:54:16.239 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:16.244 +05:30 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:54:16.245 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :12ms
[2022-07-20 17:54:16.245 +05:30 INF] Pool Service Time elapsed for  ViewPools() :12ms
[2022-07-20 17:54:16.245 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:54:16.245 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:54:16.245 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 12.7547ms
[2022-07-20 17:54:16.245 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:54:16.245 +05:30 INF] RequestBody: 
[2022-07-20 17:54:16.245 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:54:16.245 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 15.9953ms
[2022-07-20 17:54:16.251 +05:30 INF] Executed DbCommand (22ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:54:16.252 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :47ms
[2022-07-20 17:54:16.277 +05:30 INF] Executed DbCommand (37ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:54:16.278 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:54:16.278 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :39ms
[2022-07-20 17:54:16.278 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:54:16.278 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:54:16.278 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:54:16.279 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 40.0574ms
[2022-07-20 17:54:16.279 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:54:16.279 +05:30 INF] RequestBody: 
[2022-07-20 17:54:16.279 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:54:16.279 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 41.1205ms
[2022-07-20 17:54:16.294 +05:30 INF] Executed DbCommand (42ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:16.294 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :89ms
[2022-07-20 17:54:16.296 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:16.296 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :91ms
[2022-07-20 17:54:16.297 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:16.297 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :92ms
[2022-07-20 17:54:16.304 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:54:16.304 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :99ms
[2022-07-20 17:54:16.304 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:54:16.304 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :100ms
[2022-07-20 17:54:16.307 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:54:16.310 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:54:16.310 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :100ms
[2022-07-20 17:54:16.310 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :106ms
[2022-07-20 17:54:16.310 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :106ms
[2022-07-20 17:54:16.310 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:54:16.311 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 318
[2022-07-20 17:54:16.311 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 107.3604ms
[2022-07-20 17:54:16.311 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:54:16.311 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Alessandro","employeeACENumber":"ACE9000","employeeRole":"Software Developer"}}]
[2022-07-20 17:54:16.311 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 318 application/json;+charset=utf-8 108.1256ms
[2022-07-20 17:54:44.999 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:54:44.999 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.000 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.5585ms
[2022-07-20 17:54:45.001 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:54:45.001 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.002 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:45.002 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:54:45.002 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:54:45.003 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:45.008 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:54:45.008 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :6ms
[2022-07-20 17:54:45.008 +05:30 INF] Pool Service Time elapsed for  ViewPools() :6ms
[2022-07-20 17:54:45.008 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:54:45.008 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:54:45.009 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 6.8851ms
[2022-07-20 17:54:45.009 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:54:45.009 +05:30 INF] RequestBody: 
[2022-07-20 17:54:45.009 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:54:45.009 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 7.8680ms
[2022-07-20 17:54:45.009 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:54:45.009 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.010 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.1276ms
[2022-07-20 17:54:45.011 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:54:45.011 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.011 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:45.011 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:54:45.011 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:54:45.012 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:54:45.015 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:45.017 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:54:45.017 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.017 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2531ms
[2022-07-20 17:54:45.020 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:54:45.020 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :7ms
[2022-07-20 17:54:45.021 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:54:45.021 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:54:45.021 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:54:45.022 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:54:45.022 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:54:45.022 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:54:45.028 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:54:45.029 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:54:45.029 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 17:54:45.030 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:54:45.030 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:54:45.031 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:54:45.031 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 9.6408ms
[2022-07-20 17:54:45.031 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:54:45.031 +05:30 INF] RequestBody: 
[2022-07-20 17:54:45.031 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:54:45.032 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 10.5712ms
[2022-07-20 17:54:45.033 +05:30 INF] Executed DbCommand (12ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:45.033 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-20 17:54:45.034 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:45.034 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :20ms
[2022-07-20 17:54:45.034 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:54:45.035 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :21ms
[2022-07-20 17:54:45.039 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:54:45.039 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :25ms
[2022-07-20 17:54:45.040 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:54:45.040 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :26ms
[2022-07-20 17:54:45.054 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:54:45.059 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:54:45.059 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :26ms
[2022-07-20 17:54:45.059 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :46ms
[2022-07-20 17:54:45.059 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :46ms
[2022-07-20 17:54:45.059 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:54:45.060 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 17:54:45.060 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 48.2394ms
[2022-07-20 17:54:45.060 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:54:45.060 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:54:45.060 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 48.8667ms
[2022-07-20 17:55:27.213 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:55:27.213 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:55:27.213 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.2416ms
[2022-07-20 17:55:27.214 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 29
[2022-07-20 17:55:27.215 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:55:27.215 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 29
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:55:27.215 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:55:27.215 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:55:27.215 +05:30 INF] RequestBody: {"From":"2022-07-14","To":""}
[2022-07-20 17:55:27.215 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:55:27.219 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:55:27.219 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :3ms
[2022-07-20 17:55:27.227 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:55:27.227 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :11ms
[2022-07-20 17:55:27.228 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:55:27.228 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :12ms
[2022-07-20 17:55:27.228 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:55:27.228 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :13ms
[2022-07-20 17:55:27.233 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:55:27.233 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :17ms
[2022-07-20 17:55:27.234 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:55:27.234 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :18ms
[2022-07-20 17:55:27.239 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:55:27.246 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:55:27.246 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :18ms
[2022-07-20 17:55:27.246 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :30ms
[2022-07-20 17:55:27.246 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :30ms
[2022-07-20 17:55:27.246 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:55:27.246 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 17:55:27.246 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 31.4254ms
[2022-07-20 17:55:27.246 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:55:27.246 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:55:27.246 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 29 - 200 312 application/json;+charset=utf-8 31.9819ms
[2022-07-20 17:56:48.147 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 17:56:48.148 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.148 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.3071ms
[2022-07-20 17:56:48.149 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 17:56:48.149 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.149 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:56:48.149 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:56:48.150 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 17:56:48.150 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:56:48.153 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 17:56:48.153 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 17:56:48.153 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.153 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.153 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.2991ms
[2022-07-20 17:56:48.153 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1869ms
[2022-07-20 17:56:48.155 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 17:56:48.155 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.155 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:56:48.155 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:56:48.155 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:56:48.156 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 17:56:48.156 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:56:48.157 +05:30 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 17:56:48.157 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :7ms
[2022-07-20 17:56:48.157 +05:30 INF] Pool Service Time elapsed for  ViewPools() :7ms
[2022-07-20 17:56:48.157 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 17:56:48.157 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 17:56:48.158 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 8.0492ms
[2022-07-20 17:56:48.158 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 17:56:48.158 +05:30 INF] RequestBody: 
[2022-07-20 17:56:48.158 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 17:56:48.158 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 8.7077ms
[2022-07-20 17:56:48.158 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 17:56:48.158 +05:30 INF] CORS policy execution successful.
[2022-07-20 17:56:48.158 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 17:56:48.158 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:56:48.158 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 17:56:48.159 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 17:56:48.161 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 17:56:48.162 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :5ms
[2022-07-20 17:56:48.164 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 17:56:48.165 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 17:56:48.165 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 17:56:48.165 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 17:56:48.165 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 17:56:48.165 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 17:56:48.165 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.9073ms
[2022-07-20 17:56:48.165 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 17:56:48.165 +05:30 INF] RequestBody: 
[2022-07-20 17:56:48.165 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 17:56:48.165 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.4726ms
[2022-07-20 17:56:48.168 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:56:48.168 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :12ms
[2022-07-20 17:56:48.169 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:56:48.169 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :13ms
[2022-07-20 17:56:48.169 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 17:56:48.169 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :13ms
[2022-07-20 17:56:48.174 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:56:48.174 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :17ms
[2022-07-20 17:56:48.174 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 17:56:48.174 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :18ms
[2022-07-20 17:56:48.180 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 17:56:48.187 +05:30 INF] Executed DbCommand (7ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 17:56:48.188 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :18ms
[2022-07-20 17:56:48.188 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :31ms
[2022-07-20 17:56:48.188 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :31ms
[2022-07-20 17:56:48.188 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 17:56:48.188 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 17:56:48.188 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 32.5133ms
[2022-07-20 17:56:48.188 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 17:56:48.188 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 17:56:48.188 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 33.4395ms
[2022-07-20 18:00:22.516 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:00:22.517 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.517 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.6752ms
[2022-07-20 18:00:22.525 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:00:22.525 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.526 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:22.526 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:00:22.526 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:00:22.526 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.526 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:00:22.527 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:22.527 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.3622ms
[2022-07-20 18:00:22.528 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:00:22.528 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.529 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.8956ms
[2022-07-20 18:00:22.529 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:00:22.529 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.529 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:22.529 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:00:22.529 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:00:22.530 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:00:22.530 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:22.531 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:00:22.531 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4ms
[2022-07-20 18:00:22.531 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4ms
[2022-07-20 18:00:22.531 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:00:22.531 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:00:22.532 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 5.5952ms
[2022-07-20 18:00:22.532 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:00:22.532 +05:30 INF] RequestBody: 
[2022-07-20 18:00:22.532 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:00:22.532 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 6.6911ms
[2022-07-20 18:00:22.534 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:00:22.535 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:22.535 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:22.535 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:00:22.535 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:00:22.535 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:22.540 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:00:22.540 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :10ms
[2022-07-20 18:00:22.541 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:00:22.541 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:00:22.541 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 18:00:22.542 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:00:22.542 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:00:22.542 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:00:22.542 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.9135ms
[2022-07-20 18:00:22.542 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:00:22.542 +05:30 INF] RequestBody: 
[2022-07-20 18:00:22.542 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:00:22.542 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.6107ms
[2022-07-20 18:00:22.547 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:22.547 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :16ms
[2022-07-20 18:00:22.548 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:22.548 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :17ms
[2022-07-20 18:00:22.548 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:22.549 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :18ms
[2022-07-20 18:00:22.552 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:00:22.552 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :21ms
[2022-07-20 18:00:22.552 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:00:22.552 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :22ms
[2022-07-20 18:00:22.559 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:00:22.568 +05:30 INF] Executed DbCommand (9ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:00:22.568 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :22ms
[2022-07-20 18:00:22.569 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :38ms
[2022-07-20 18:00:22.569 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :38ms
[2022-07-20 18:00:22.569 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:00:22.570 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:00:22.571 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 41.9982ms
[2022-07-20 18:00:22.571 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:00:22.571 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:00:22.572 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 42.7689ms
[2022-07-20 18:00:46.326 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:00:46.326 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.327 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 1.2179ms
[2022-07-20 18:00:46.330 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:00:46.330 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.331 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:46.331 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:00:46.331 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:00:46.333 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:46.337 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:00:46.337 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:00:46.337 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.337 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.337 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2373ms
[2022-07-20 18:00:46.337 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.2772ms
[2022-07-20 18:00:46.337 +05:30 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:00:46.338 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :6ms
[2022-07-20 18:00:46.338 +05:30 INF] Pool Service Time elapsed for  ViewPools() :6ms
[2022-07-20 18:00:46.338 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:00:46.338 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:00:46.338 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 6.9765ms
[2022-07-20 18:00:46.338 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:00:46.338 +05:30 INF] RequestBody: 
[2022-07-20 18:00:46.338 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:00:46.338 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 8.0923ms
[2022-07-20 18:00:46.339 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:00:46.339 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.340 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:00:46.340 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:00:46.340 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:46.340 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:00:46.340 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:00:46.340 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:00:46.340 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:00:46.340 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:00:46.340 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:00:46.341 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:46.341 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:00:46.345 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:00:46.346 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:00:46.346 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :5ms
[2022-07-20 18:00:46.346 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:00:46.346 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 18:00:46.347 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:00:46.347 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:00:46.347 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:00:46.347 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 6.5977ms
[2022-07-20 18:00:46.347 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:00:46.347 +05:30 INF] RequestBody: 
[2022-07-20 18:00:46.347 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:00:46.347 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 7.0888ms
[2022-07-20 18:00:46.352 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:46.353 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :12ms
[2022-07-20 18:00:46.353 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:46.353 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :12ms
[2022-07-20 18:00:46.354 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:00:46.354 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :13ms
[2022-07-20 18:00:46.360 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:00:46.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :19ms
[2022-07-20 18:00:46.360 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:00:46.360 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :19ms
[2022-07-20 18:00:46.366 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:00:46.374 +05:30 INF] Executed DbCommand (8ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:00:46.374 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :19ms
[2022-07-20 18:00:46.374 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :33ms
[2022-07-20 18:00:46.374 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :33ms
[2022-07-20 18:00:46.374 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:00:46.374 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:00:46.375 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 34.4212ms
[2022-07-20 18:00:46.375 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:00:46.375 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:00:46.375 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 35.4012ms
[2022-07-20 18:01:29.870 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:01:29.870 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.870 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.2844ms
[2022-07-20 18:01:29.871 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:01:29.871 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.872 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:29.872 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:01:29.872 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:01:29.873 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:29.876 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:01:29.877 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :4ms
[2022-07-20 18:01:29.877 +05:30 INF] Pool Service Time elapsed for  ViewPools() :4ms
[2022-07-20 18:01:29.877 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:01:29.877 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:01:29.877 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 5.0401ms
[2022-07-20 18:01:29.877 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:01:29.877 +05:30 INF] RequestBody: 
[2022-07-20 18:01:29.877 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:01:29.877 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 6.4267ms
[2022-07-20 18:01:29.880 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:01:29.881 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.882 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 1.0127ms
[2022-07-20 18:01:29.883 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:01:29.883 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:01:29.884 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.884 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.884 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.2436ms
[2022-07-20 18:01:29.884 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:29.884 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:01:29.884 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:01:29.884 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:01:29.885 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:01:29.885 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:29.885 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:29.885 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:29.885 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:01:29.885 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:01:29.886 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:29.888 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:01:29.888 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:01:29.889 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :3ms
[2022-07-20 18:01:29.889 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:01:29.889 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:01:29.889 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:01:29.889 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 3.9106ms
[2022-07-20 18:01:29.889 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:01:29.889 +05:30 INF] RequestBody: 
[2022-07-20 18:01:29.889 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:01:29.889 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 4.5081ms
[2022-07-20 18:01:29.890 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:01:29.890 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :5ms
[2022-07-20 18:01:29.895 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:29.895 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :10ms
[2022-07-20 18:01:29.896 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:29.896 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :11ms
[2022-07-20 18:01:29.896 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:29.896 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :11ms
[2022-07-20 18:01:29.899 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:01:29.899 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :14ms
[2022-07-20 18:01:29.899 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:01:29.899 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :14ms
[2022-07-20 18:01:29.902 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:01:29.908 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:01:29.908 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :14ms
[2022-07-20 18:01:29.908 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :23ms
[2022-07-20 18:01:29.908 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :23ms
[2022-07-20 18:01:29.908 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:01:29.908 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:01:29.908 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 24.3204ms
[2022-07-20 18:01:29.908 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:01:29.908 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:01:29.909 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 25.0370ms
[2022-07-20 18:01:35.876 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:01:35.876 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.876 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.2368ms
[2022-07-20 18:01:35.877 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:01:35.877 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.877 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:35.877 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:01:35.877 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:01:35.877 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:35.880 +05:30 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:01:35.880 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :3ms
[2022-07-20 18:01:35.880 +05:30 INF] Pool Service Time elapsed for  ViewPools() :3ms
[2022-07-20 18:01:35.880 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:01:35.881 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:01:35.881 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.881 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:01:35.881 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 3.7114ms
[2022-07-20 18:01:35.881 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:01:35.881 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.1864ms
[2022-07-20 18:01:35.881 +05:30 INF] RequestBody: 
[2022-07-20 18:01:35.881 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:01:35.881 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 4.3261ms
[2022-07-20 18:01:35.882 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:01:35.882 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.882 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:35.882 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:01:35.882 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:01:35.882 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:01:35.883 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:35.883 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:01:35.883 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.884 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1946ms
[2022-07-20 18:01:35.884 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:01:35.884 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:01:35.885 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:01:35.885 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:01:35.885 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:01:35.885 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:01:35.886 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:01:35.886 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :3ms
[2022-07-20 18:01:35.888 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:01:35.888 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:01:35.888 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :3ms
[2022-07-20 18:01:35.888 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:01:35.888 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:01:35.888 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:01:35.889 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 3.881ms
[2022-07-20 18:01:35.889 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:01:35.889 +05:30 INF] RequestBody: 
[2022-07-20 18:01:35.889 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:01:35.889 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 4.4636ms
[2022-07-20 18:01:35.892 +05:30 INF] Executed DbCommand (5ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:35.892 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :9ms
[2022-07-20 18:01:35.892 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:35.892 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :9ms
[2022-07-20 18:01:35.893 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:01:35.893 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :10ms
[2022-07-20 18:01:35.896 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:01:35.897 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :14ms
[2022-07-20 18:01:35.897 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:01:35.897 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :14ms
[2022-07-20 18:01:35.912 +05:30 INF] Executed DbCommand (14ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:01:35.925 +05:30 INF] Executed DbCommand (6ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:01:35.925 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :14ms
[2022-07-20 18:01:35.925 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :42ms
[2022-07-20 18:01:35.925 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :42ms
[2022-07-20 18:01:35.925 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:01:35.925 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:01:35.925 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 43.2695ms
[2022-07-20 18:01:35.925 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:01:35.925 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:01:35.926 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 43.9825ms
[2022-07-20 18:02:27.773 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/ - -
[2022-07-20 18:02:27.773 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: keep-alive
Host: 172.24.217.145
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Upgrade-Insecure-Requests: [Redacted]
[2022-07-20 18:02:27.773 +05:30 INF] Response:
StatusCode: 404
[2022-07-20 18:02:27.773 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/ - - - 404 - - 0.4605ms
[2022-07-20 18:08:11.935 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewDashboard - -
[2022-07-20 18:08:11.935 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:11.935 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewDashboard - - - 204 - - 0.4095ms
[2022-07-20 18:08:11.951 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 29
[2022-07-20 18:08:11.951 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:11.952 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 29
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:08:11.952 +05:30 INF] Executing endpoint '405 HTTP Method Not Supported'
[2022-07-20 18:08:11.952 +05:30 INF] Executed endpoint '405 HTTP Method Not Supported'
[2022-07-20 18:08:11.952 +05:30 INF] RequestBody: 
[2022-07-20 18:08:11.952 +05:30 INF] Response:
StatusCode: 405
Allow: GET
[2022-07-20 18:08:11.953 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewDashboard application/json 29 - 405 - - 2.2888ms
[2022-07-20 18:08:12.207 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:08:12.207 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.207 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.2310ms
[2022-07-20 18:08:12.209 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:08:12.209 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.209 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.1395ms
[2022-07-20 18:08:12.216 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:08:12.216 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.216 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1948ms
[2022-07-20 18:08:12.216 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:08:12.216 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.216 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:08:12.216 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:08:12.216 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:08:12.217 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:08:12.219 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:08:12.219 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.219 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:08:12.219 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:08:12.219 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:08:12.219 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:08:12.220 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:08:12.231 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:08:12.231 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:08:12.231 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:08:12.231 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:08:12.231 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:08:12.232 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:08:12.234 +05:30 INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:08:12.235 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :17ms
[2022-07-20 18:08:12.235 +05:30 INF] Pool Service Time elapsed for  ViewPools() :17ms
[2022-07-20 18:08:12.235 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:08:12.235 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:08:12.235 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 18.6611ms
[2022-07-20 18:08:12.235 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:08:12.235 +05:30 INF] RequestBody: 
[2022-07-20 18:08:12.235 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:08:12.235 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 19.1343ms
[2022-07-20 18:08:12.237 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:08:12.237 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :17ms
[2022-07-20 18:08:12.238 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:08:12.238 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:08:12.238 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :6ms
[2022-07-20 18:08:12.238 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:08:12.238 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:08:12.239 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:08:12.239 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 7.4238ms
[2022-07-20 18:08:12.239 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:08:12.239 +05:30 INF] RequestBody: 
[2022-07-20 18:08:12.239 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:08:12.239 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 8.0781ms
[2022-07-20 18:08:12.241 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:08:12.241 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :21ms
[2022-07-20 18:08:12.242 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:08:12.242 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 18:08:12.242 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:08:12.242 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :22ms
[2022-07-20 18:08:12.246 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:08:12.246 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :26ms
[2022-07-20 18:08:12.247 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:08:12.247 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :26ms
[2022-07-20 18:08:12.249 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:08:12.252 +05:30 INF] Executed DbCommand (3ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:08:12.252 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :26ms
[2022-07-20 18:08:12.252 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :32ms
[2022-07-20 18:08:12.252 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :32ms
[2022-07-20 18:08:12.252 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:08:12.252 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:08:12.252 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 33.2732ms
[2022-07-20 18:08:12.253 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:08:12.253 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:08:12.253 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 33.9209ms
[2022-07-20 18:28:48.773 +05:30 INF] Application is shutting down...
[2022-07-20 18:38:17.271 +05:30 INF] User profile not available. Using 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\S-1-5-82-1361998291-1551570530-77267900-3141186879-3841397018\DataProtection' as key repository and Windows DPAPI to encrypt keys at rest.
[2022-07-20 18:38:17.351 +05:30 INF] Application started. Press Ctrl+C to shut down.
[2022-07-20 18:38:17.352 +05:30 INF] Hosting environment: Production
[2022-07-20 18:38:17.352 +05:30 INF] Content root path: C:\Local\publish\
[2022-07-20 18:38:17.364 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - -
[2022-07-20 18:38:17.383 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.392 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard - - - 204 - - 29.5888ms
[2022-07-20 18:38:17.433 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19
[2022-07-20 18:38:17.440 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.447 +05:30 WRN] Failed to determine the https port for redirect.
[2022-07-20 18:38:17.597 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeeDashboard
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
Origin: [Redacted]
[2022-07-20 18:38:17.599 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 18:38:17.612 +05:30 INF] Route matched with {action = "ViewEmployeeDashboard", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeeDashboard(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:38:17.726 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:38:17.864 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - -
[2022-07-20 18:38:17.865 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.865 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Pool/ViewPools - - - 204 - - 0.5857ms
[2022-07-20 18:38:17.875 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - -
[2022-07-20 18:38:17.875 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.875 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance - - - 204 - - 0.2550ms
[2022-07-20 18:38:17.876 +05:30 INF] Request starting HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - -
[2022-07-20 18:38:17.876 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.876 +05:30 INF] Request finished HTTP/1.1 OPTIONS http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser - - - 204 - - 0.1558ms
[2022-07-20 18:38:17.879 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json -
[2022-07-20 18:38:17.880 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.881 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Pool/ViewPools
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:38:17.882 +05:30 INF] Executing endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:38:17.882 +05:30 INF] Route matched with {action = "ViewPools", controller = "Pool"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewPools() on controller IMS.Controllers.PoolController (Source).
[2022-07-20 18:38:17.883 +05:30 INF] Request starting HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19
[2022-07-20 18:38:17.883 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.885 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: POST
Scheme: http
PathBase: /IMS-API
Path: /Drive/ViewEmployeePerformance
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Length: 19
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:38:17.885 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:38:17.886 +05:30 INF] Route matched with {action = "ViewEmployeePerformance", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewEmployeePerformance(IMS.Models.DateRange) on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:38:17.887 +05:30 INF] RequestBody: {"From":"","To":""}
[2022-07-20 18:38:17.891 +05:30 INF] Request starting HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json -
[2022-07-20 18:38:17.891 +05:30 INF] CORS policy execution successful.
[2022-07-20 18:38:17.891 +05:30 INF] Request:
Protocol: HTTP/1.1
Method: GET
Scheme: http
PathBase: /IMS-API
Path: /Drive/GetDrivesForCurrentUser
Accept: application/json, text/plain, */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Authorization: [Redacted]
Connection: keep-alive
Content-Type: application/json
Host: 172.24.217.145
Referer: [Redacted]
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62
Origin: [Redacted]
[2022-07-20 18:38:17.892 +05:30 INF] Executing endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:38:17.892 +05:30 INF] Route matched with {action = "GetDrivesForCurrentUser", controller = "Drive"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetDrivesForCurrentUser() on controller IMS.Controllers.DriveController (Source).
[2022-07-20 18:38:18.425 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:38:18.425 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:38:18.425 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:38:18.425 +05:30 INF] Entity Framework Core 6.0.6 initialized 'InterviewManagementSystemDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.5' with options: None
[2022-07-20 18:38:18.794 +05:30 INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [d].[DepartmentId], [d].[AddedBy], [d].[AddedOn], [d].[DepartmentName], [d].[IsActive], [d].[UpdatedBy], [d].[UpdatedOn]
FROM [Pools] AS [p]
INNER JOIN [Departments] AS [d] ON [p].[DepartmentId] = [d].[DepartmentId]
WHERE [p].[IsActive] = CAST(1 AS bit)
[2022-07-20 18:38:18.803 +05:30 INF] Executed DbCommand (22ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.803 +05:30 INF] Executed DbCommand (27ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Drives] AS [d]
        WHERE [d].[DepartmentId] = @__departmentId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
[2022-07-20 18:38:18.803 +05:30 INF] Executed DbCommand (20ms) [Parameters=[@__departmentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeId], [e].[DepartmentId], [e].[EmailId], [e].[EmployeeAceNumber], [e].[IsActive], [e].[IsAdminAccepted], [e].[IsAdminResponded], [e].[Name], [e].[Password], [e].[ProjectId], [e].[RoleId], [r].[RoleId], [r].[AddedBy], [r].[AddedOn], [r].[IsActive], [r].[IsManagement], [r].[RoleName], [r].[UpdatedBy], [r].[UpdatedOn]
FROM [Employees] AS [e]
INNER JOIN [Roles] AS [r] ON [e].[RoleId] = [r].[RoleId]
WHERE ([e].[DepartmentId] = @__departmentId_0) AND ([e].[IsActive] = CAST(1 AS bit))
[2022-07-20 18:38:18.813 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :1019ms
[2022-07-20 18:38:18.816 +05:30 ERR] Drive service:GetDrivesForCurrentUser(int departmentId):Department not found wwith given department Id
[2022-07-20 18:38:18.816 +05:30 INF] Drive Service Time elapsed for  GetDrivesForCurrentUser(int departmentId) :922ms
[2022-07-20 18:38:18.816 +05:30 ERR] Drive controller:GetDrivesForCurrentUser():Department not found wwith given department Id
[2022-07-20 18:38:18.817 +05:30 INF] Executed DbCommand (2ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.817 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :1023ms
[2022-07-20 18:38:18.818 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.818 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :1024ms
[2022-07-20 18:38:18.821 +05:30 INF] Executing BadRequestObjectResult, writing value of type 'System.String'.
[2022-07-20 18:38:18.821 +05:30 INF] Response:
StatusCode: 400
Content-Type: text/plain; charset=utf-8
[2022-07-20 18:38:18.841 +05:30 INF] Executed action IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source) in 944.2716ms
[2022-07-20 18:38:18.841 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.GetDrivesForCurrentUser (Source)'
[2022-07-20 18:38:18.841 +05:30 INF] RequestBody: 
[2022-07-20 18:38:18.841 +05:30 INF] ResponseBody: Department not found wwith given department Id
[2022-07-20 18:38:18.845 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Drive/GetDrivesForCurrentUser application/json - - 400 - text/plain;+charset=utf-8 954.0742ms
[2022-07-20 18:38:18.846 +05:30 INF] Executed DbCommand (10ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:38:18.846 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :1051ms
[2022-07-20 18:38:18.847 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:38:18.847 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :1051ms
[2022-07-20 18:38:18.855 +05:30 INF] pool DAL Time elapsed for GetPoolsFromDatabase()  :969ms
[2022-07-20 18:38:18.855 +05:30 INF] Pool Service Time elapsed for  ViewPools() :970ms
[2022-07-20 18:38:18.856 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+SelectListIterator`2[[IMS.Models.Pool, Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType43`4[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Source, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
[2022-07-20 18:38:18.858 +05:30 INF] Drive DAL Time elapsed for GetEmployee(int departmentId)  :969ms
[2022-07-20 18:38:18.860 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:38:18.860 +05:30 INF] Executed DbCommand (1ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.860 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :971ms
[2022-07-20 18:38:18.860 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.861 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :971ms
[2022-07-20 18:38:18.861 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32), @__responseType_1='?' (DbType = Int32), @__fromDate_Date_2='?' (DbType = DateTime2), @__toDate_Date_3='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[ResponseId], [e].[DriveId], [e].[EmployeeId], [e].[ResponseType], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeDriveResponse] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE (([e].[EmployeeId] = @__employeeId_0) AND ([e].[ResponseType] = @__responseType_1)) AND (((CONVERT(date, [d].[FromDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[FromDate]) <= @__toDate_Date_3)) OR ((CONVERT(date, [d].[ToDate]) >= @__fromDate_Date_2) AND (CONVERT(date, [d].[ToDate]) <= @__toDate_Date_3)))
[2022-07-20 18:38:18.861 +05:30 INF] Drive DAL Time elapsed for GetResponseDetailsByStatus(int responseType, int employeeId, DateTime fromDate, DateTime toDate)  :972ms
[2022-07-20 18:38:18.862 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:38:18.862 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :972ms
[2022-07-20 18:38:18.862 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__isUtilized_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE ([e].[IsInterviewScheduled] = @__isUtilized_0) AND ([e].[EmployeeId] = @__employeeId_1)
[2022-07-20 18:38:18.862 +05:30 INF] Drive DAL Time elapsed for GetResponseUtilizationByStatus(bool isUtilized, int employeeId)  :973ms
[2022-07-20 18:38:18.863 +05:30 INF] Executed DbCommand (0ms) [Parameters=[@__employeeId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
WHERE [e].[EmployeeId] = @__employeeId_0
[2022-07-20 18:38:18.877 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:38:18.877 +05:30 INF] Executed DbCommand (4ms) [Parameters=[@__status_0='?' (DbType = Boolean), @__employeeId_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [e].[EmployeeAvailabilityId], [e].[CancellationReason], [e].[Comments], [e].[DriveId], [e].[EmployeeId], [e].[From], [e].[InterviewDate], [e].[IsInterviewCancelled], [e].[IsInterviewScheduled], [e].[To], [d].[DriveId], [d].[AddedBy], [d].[AddedOn], [d].[CancelReason], [d].[DepartmentId], [d].[FromDate], [d].[IsCancelled], [d].[IsScheduled], [d].[LocationId], [d].[ModeId], [d].[Name], [d].[PoolId], [d].[SlotTiming], [d].[ToDate], [d].[UpdatedBy], [d].[UpdatedOn], [l].[LocationId], [l].[AddedBy], [l].[AddedOn], [l].[IsActive], [l].[LocationName], [l].[UpdatedBy], [l].[UpdatedOn], [p].[PoolId], [p].[AddedBy], [p].[AddedOn], [p].[DepartmentId], [p].[IsActive], [p].[PoolName], [p].[UpdatedBy], [p].[UpdatedOn]
FROM [EmployeeAvailability] AS [e]
INNER JOIN [Drives] AS [d] ON [e].[DriveId] = [d].[DriveId]
INNER JOIN [Locations] AS [l] ON [d].[LocationId] = [l].[LocationId]
INNER JOIN [Pools] AS [p] ON [d].[PoolId] = [p].[PoolId]
WHERE (((([e].[IsInterviewCancelled] = @__status_0) AND ([d].[IsCancelled] = CAST(0 AS bit))) AND ([e].[EmployeeId] = @__employeeId_1)) AND (CONVERT(date, [e].[InterviewDate]) > CONVERT(date, GETDATE()))) AND [e].[IsInterviewScheduled] IN (CAST(1 AS bit), CAST(0 AS bit))
[2022-07-20 18:38:18.877 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :973ms
[2022-07-20 18:38:18.877 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :988ms
[2022-07-20 18:38:18.877 +05:30 INF] Drive DAL Time elapsed for ViewCancelledInterview(bool status, int employeeId)  :1051ms
[2022-07-20 18:38:18.877 +05:30 INF] Drive Service Time elapsed for  ViewEmployeeDashboard(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :1085ms
[2022-07-20 18:38:18.877 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:38:18.877 +05:30 INF] Drive Service Time elapsed for  ViewEmployeePerformance(int employeeId, int departmentId, DateTime fromDate, DateTime toDate) :988ms
[2022-07-20 18:38:18.877 +05:30 INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
[2022-07-20 18:38:18.884 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 1173
[2022-07-20 18:38:18.884 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 190
[2022-07-20 18:38:18.884 +05:30 INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Content-Length: 312
[2022-07-20 18:38:18.884 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeeDashboard (Source) in 1271.8327ms
[2022-07-20 18:38:18.884 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeeDashboard (Source)'
[2022-07-20 18:38:18.884 +05:30 INF] ResponseBody: {"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0}
[2022-07-20 18:38:18.884 +05:30 INF] Executed action IMS.Controllers.DriveController.ViewEmployeePerformance (Source) in 998.1661ms
[2022-07-20 18:38:18.884 +05:30 INF] Executed action IMS.Controllers.PoolController.ViewPools (Source) in 1001.7913ms
[2022-07-20 18:38:18.884 +05:30 INF] Executed endpoint 'IMS.Controllers.DriveController.ViewEmployeePerformance (Source)'
[2022-07-20 18:38:18.884 +05:30 INF] Executed endpoint 'IMS.Controllers.PoolController.ViewPools (Source)'
[2022-07-20 18:38:18.885 +05:30 INF] ResponseBody: [{"dashboardCount":{"AcceptedDrives":0,"DeniedDrives":0,"IgnoredDrives":0,"TotalDrives":0,"UtilizedInterviews":0,"NotUtilizedInterviews":0,"SlotAvailabiltyGiven":0,"CancelledInterview":0,"TotalAvailability":0},"employee":{"employeeName":"Girish","employeeACENumber":"ACE9999","employeeRole":"Delivery Manager"}}]
[2022-07-20 18:38:18.885 +05:30 INF] RequestBody: 
[2022-07-20 18:38:18.885 +05:30 INF] ResponseBody: [{"poolId":1,"poolName":"Fresher .NET","departmentId":1,"departmentName":".NET"},{"poolId":2,"poolName":"SSE .NET","departmentId":1,"departmentName":".NET"},{"poolId":3,"poolName":"SLO .NET","departmentId":1,"departmentName":".NET"},{"poolId":4,"poolName":"Fresher JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":5,"poolName":"SSE JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":6,"poolName":"SLO JAVA","departmentId":2,"departmentName":"JAVA"},{"poolId":7,"poolName":"Fresher ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":8,"poolName":"SSE ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":9,"poolName":"SLO ORACLE","departmentId":3,"departmentName":"ORACLE"},{"poolId":10,"poolName":"Fresher LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":11,"poolName":"SSE LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":12,"poolName":"SLO LAMP","departmentId":4,"departmentName":"LAMP"},{"poolId":13,"poolName":"Fresher BFS","departmentId":5,"departmentName":"BFS"},{"poolId":14,"poolName":"SSE BFS","departmentId":5,"departmentName":"BFS"},{"poolId":15,"poolName":"SLO BFS","departmentId":5,"departmentName":"BFS"}]
[2022-07-20 18:38:18.885 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeeDashboard application/json 19 - 200 190 application/json;+charset=utf-8 1451.6301ms
[2022-07-20 18:38:18.885 +05:30 INF] Request finished HTTP/1.1 GET http://172.24.217.145/IMS-API/Pool/ViewPools application/json - - 200 1173 application/json;+charset=utf-8 1005.2027ms
[2022-07-20 18:38:18.885 +05:30 INF] Request finished HTTP/1.1 POST http://172.24.217.145/IMS-API/Drive/ViewEmployeePerformance application/json 19 - 200 312 application/json;+charset=utf-8 1001.9507ms
[2022-07-20 18:59:16.515 +05:30 INF] Application is shutting down...
